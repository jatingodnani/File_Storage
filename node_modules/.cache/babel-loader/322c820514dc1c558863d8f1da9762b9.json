{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { MatrixRoomStatus } from '../models/MatrixRoom';\n/**\n * A service to help with matrix room management\n */\nexport class MatrixRoomService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  /**\n   * Create a room\n   *\n   * @param accessToken\n   * @param config\n   */\n  createRoom(accessToken) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.httpClient.post('/createRoom', config, {\n        accessToken\n      });\n    });\n  }\n  /**\n   * Invite a user to a room\n   *\n   * @param accessToken\n   * @param user\n   * @param room\n   */\n  inviteToRoom(accessToken, user, room) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (room.status !== MatrixRoomStatus.JOINED && room.status !== MatrixRoomStatus.UNKNOWN) {\n        return Promise.reject(`User is not a member of room ${room.id}.`);\n      }\n      return this.httpClient.post(`/rooms/${encodeURIComponent(room.id)}/invite`, {\n        user_id: user\n      }, {\n        accessToken\n      });\n    });\n  }\n  /**\n   * Join a specific room\n   *\n   * @param accessToken\n   * @param room\n   */\n  joinRoom(accessToken, room) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (room.status === MatrixRoomStatus.JOINED) {\n        return Promise.resolve({\n          room_id: room.id\n        });\n      }\n      return this.httpClient.post(`/rooms/${encodeURIComponent(room.id)}/join`, {}, {\n        accessToken\n      });\n    });\n  }\n  /**\n   * Get all joined rooms\n   *\n   * @param accessToken\n   */\n  getJoinedRooms(accessToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.httpClient.get(`/joined_rooms`, undefined, {\n        accessToken\n      });\n    });\n  }\n}","map":{"version":3,"names":["MatrixRoomStatus","MatrixRoomService","constructor","httpClient","createRoom","accessToken","config","arguments","length","undefined","post","inviteToRoom","user","room","status","JOINED","UNKNOWN","Promise","reject","id","encodeURIComponent","user_id","joinRoom","resolve","room_id","getJoinedRooms","get"],"sources":["../../../../src/matrix-client/services/MatrixRoomService.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAqBA,gBAAgB,QAAQ,sBAAsB;AAMnE;;;AAGA,OAAM,MAAOC,iBAAiB;EAC5BC,YAA6BC,UAA4B;IAA5B,KAAAA,UAAU,GAAVA,UAAU;EAAqB;EAE5D;;;;;;EAMaC,UAAUA,CACrBC,WAAmB,EACiB;IAAA,IAApCC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkC,EAAE;;MAEpC,OAAO,IAAI,CAACJ,UAAU,CAACO,IAAI,CAAC,aAAa,EAAEJ,MAAM,EAAE;QAAED;MAAW,CAAE,CAAC;IACrE,CAAC;;EAED;;;;;;;EAOaM,YAAYA,CACvBN,WAAmB,EACnBO,IAAY,EACZC,IAAgB;;MAEhB,IAAIA,IAAI,CAACC,MAAM,KAAKd,gBAAgB,CAACe,MAAM,IAAIF,IAAI,CAACC,MAAM,KAAKd,gBAAgB,CAACgB,OAAO,EAAE;QACvF,OAAOC,OAAO,CAACC,MAAM,CAAC,gCAAgCL,IAAI,CAACM,EAAE,GAAG,CAAC;;MAGnE,OAAO,IAAI,CAAChB,UAAU,CAACO,IAAI,CACzB,UAAUU,kBAAkB,CAACP,IAAI,CAACM,EAAE,CAAC,SAAS,EAC9C;QAAEE,OAAO,EAAET;MAAI,CAAE,EACjB;QAAEP;MAAW,CAAE,CAChB;IACH,CAAC;;EAED;;;;;;EAMaiB,QAAQA,CAACjB,WAAmB,EAAEQ,IAAgB;;MACzD,IAAIA,IAAI,CAACC,MAAM,KAAKd,gBAAgB,CAACe,MAAM,EAAE;QAC3C,OAAOE,OAAO,CAACM,OAAO,CAAC;UAAEC,OAAO,EAAEX,IAAI,CAACM;QAAE,CAAE,CAAC;;MAG9C,OAAO,IAAI,CAAChB,UAAU,CAACO,IAAI,CAAC,UAAUU,kBAAkB,CAACP,IAAI,CAACM,EAAE,CAAC,OAAO,EAAE,EAAE,EAAE;QAAEd;MAAW,CAAE,CAAC;IAChG,CAAC;;EAED;;;;;EAKaoB,cAAcA,CAACpB,WAAmB;;MAC7C,OAAO,IAAI,CAACF,UAAU,CAACuB,GAAG,CAAC,eAAe,EAAEjB,SAAS,EAAE;QAAEJ;MAAW,CAAE,CAAC;IACzE,CAAC"},"metadata":{},"sourceType":"module"}