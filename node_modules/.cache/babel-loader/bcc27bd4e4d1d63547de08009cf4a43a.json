{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package xsalsa20 implements XSalsa20 stream cipher.\n */\nvar binary_1 = require(\"@stablelib/binary\");\nvar salsa20_1 = require(\"@stablelib/salsa20\");\nvar wipe_1 = require(\"@stablelib/wipe\");\n/**\n * Encrypt src with Salsa20/20 stream generated for the given 32-byte key\n * and 24-byte and write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * Never use the same key and nonce to encrypt more than one message.\n */\nfunction streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {\n  if (nonceInplaceCounterLength === void 0) {\n    nonceInplaceCounterLength = 0;\n  }\n  if (nonceInplaceCounterLength === 0) {\n    if (nonce.length !== 24) {\n      throw new Error(\"XSalsa20 nonce must be 24 bytes\");\n    }\n  } else {\n    if (nonce.length !== 32) {\n      throw new Error(\"XSalsa20 nonce with counter must be 32 bytes\");\n    }\n  }\n  // Use HSalsa one-way function to transform first 16 bytes of\n  // 24-byte extended nonce and key into a new key for Salsa\n  // stream -- \"subkey\".\n  var subkey = hsalsa(key, nonce.subarray(0, 16), new Uint8Array(32));\n  // Use last 8 bytes of 24-byte extended nonce as an actual nonce,\n  // and a subkey derived in the previous step as key to encrypt.\n  //\n  // If nonceInplaceCounterLength > 0, we'll still pass the correct\n  // nonce || counter, as we don't limit the end of nonce subarray.\n  var result = salsa20_1.streamXOR(subkey, nonce.subarray(16), src, dst, nonceInplaceCounterLength);\n  // Clean subkey.\n  wipe_1.wipe(subkey);\n  return result;\n}\nexports.streamXOR = streamXOR;\n/**\n * Generate Salsa20/20 stream for the given 32-byte key and\n * 24-byte nonce and write it into dst and return it.\n *\n * Never use the same key and nonce to generate more than one stream.\n *\n * stream is like streamXOR with all-zero src.\n */\nfunction stream(key, nonce, dst, nonceInplaceCounterLength) {\n  if (nonceInplaceCounterLength === void 0) {\n    nonceInplaceCounterLength = 0;\n  }\n  wipe_1.wipe(dst);\n  return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);\n}\nexports.stream = stream;\n// Number of Salsa20 rounds (Salsa20/20).\nvar ROUNDS = 20;\n/**\n * HSalsa20 is a one-way function used in XSalsa20 to extend nonce,\n * and in NaCl to hash X25519 shared keys. It takes 32-byte key and\n * 16-byte src and writes 32-byte result into dst and returns it.\n */\nfunction hsalsa(key, src, dst) {\n  var x0 = 0x61707865; // \"expa\"\n  var x1 = key[3] << 24 | key[2] << 16 | key[1] << 8 | key[0];\n  var x2 = key[7] << 24 | key[6] << 16 | key[5] << 8 | key[4];\n  var x3 = key[11] << 24 | key[10] << 16 | key[9] << 8 | key[8];\n  var x4 = key[15] << 24 | key[14] << 16 | key[13] << 8 | key[12];\n  var x5 = 0x3320646E; // \"nd 3\"\n  var x6 = src[3] << 24 | src[2] << 16 | src[1] << 8 | src[0];\n  var x7 = src[7] << 24 | src[6] << 16 | src[5] << 8 | src[4];\n  var x8 = src[11] << 24 | src[10] << 16 | src[9] << 8 | src[8];\n  var x9 = src[15] << 24 | src[14] << 16 | src[13] << 8 | src[12];\n  var x10 = 0x79622D32; // \"2-by\"\n  var x11 = key[19] << 24 | key[18] << 16 | key[17] << 8 | key[16];\n  var x12 = key[23] << 24 | key[22] << 16 | key[21] << 8 | key[20];\n  var x13 = key[27] << 24 | key[26] << 16 | key[25] << 8 | key[24];\n  var x14 = key[31] << 24 | key[30] << 16 | key[29] << 8 | key[28];\n  var x15 = 0x6B206574; // \"te k\"\n  var u;\n  for (var i = 0; i < ROUNDS; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u << 7 | u >>> 32 - 7;\n    u = x4 + x0 | 0;\n    x8 ^= u << 9 | u >>> 32 - 9;\n    u = x8 + x4 | 0;\n    x12 ^= u << 13 | u >>> 32 - 13;\n    u = x12 + x8 | 0;\n    x0 ^= u << 18 | u >>> 32 - 18;\n    u = x5 + x1 | 0;\n    x9 ^= u << 7 | u >>> 32 - 7;\n    u = x9 + x5 | 0;\n    x13 ^= u << 9 | u >>> 32 - 9;\n    u = x13 + x9 | 0;\n    x1 ^= u << 13 | u >>> 32 - 13;\n    u = x1 + x13 | 0;\n    x5 ^= u << 18 | u >>> 32 - 18;\n    u = x10 + x6 | 0;\n    x14 ^= u << 7 | u >>> 32 - 7;\n    u = x14 + x10 | 0;\n    x2 ^= u << 9 | u >>> 32 - 9;\n    u = x2 + x14 | 0;\n    x6 ^= u << 13 | u >>> 32 - 13;\n    u = x6 + x2 | 0;\n    x10 ^= u << 18 | u >>> 32 - 18;\n    u = x15 + x11 | 0;\n    x3 ^= u << 7 | u >>> 32 - 7;\n    u = x3 + x15 | 0;\n    x7 ^= u << 9 | u >>> 32 - 9;\n    u = x7 + x3 | 0;\n    x11 ^= u << 13 | u >>> 32 - 13;\n    u = x11 + x7 | 0;\n    x15 ^= u << 18 | u >>> 32 - 18;\n    u = x0 + x3 | 0;\n    x1 ^= u << 7 | u >>> 32 - 7;\n    u = x1 + x0 | 0;\n    x2 ^= u << 9 | u >>> 32 - 9;\n    u = x2 + x1 | 0;\n    x3 ^= u << 13 | u >>> 32 - 13;\n    u = x3 + x2 | 0;\n    x0 ^= u << 18 | u >>> 32 - 18;\n    u = x5 + x4 | 0;\n    x6 ^= u << 7 | u >>> 32 - 7;\n    u = x6 + x5 | 0;\n    x7 ^= u << 9 | u >>> 32 - 9;\n    u = x7 + x6 | 0;\n    x4 ^= u << 13 | u >>> 32 - 13;\n    u = x4 + x7 | 0;\n    x5 ^= u << 18 | u >>> 32 - 18;\n    u = x10 + x9 | 0;\n    x11 ^= u << 7 | u >>> 32 - 7;\n    u = x11 + x10 | 0;\n    x8 ^= u << 9 | u >>> 32 - 9;\n    u = x8 + x11 | 0;\n    x9 ^= u << 13 | u >>> 32 - 13;\n    u = x9 + x8 | 0;\n    x10 ^= u << 18 | u >>> 32 - 18;\n    u = x15 + x14 | 0;\n    x12 ^= u << 7 | u >>> 32 - 7;\n    u = x12 + x15 | 0;\n    x13 ^= u << 9 | u >>> 32 - 9;\n    u = x13 + x12 | 0;\n    x14 ^= u << 13 | u >>> 32 - 13;\n    u = x14 + x13 | 0;\n    x15 ^= u << 18 | u >>> 32 - 18;\n  }\n  binary_1.writeUint32LE(x0, dst, 0);\n  binary_1.writeUint32LE(x5, dst, 4);\n  binary_1.writeUint32LE(x10, dst, 8);\n  binary_1.writeUint32LE(x15, dst, 12);\n  binary_1.writeUint32LE(x6, dst, 16);\n  binary_1.writeUint32LE(x7, dst, 20);\n  binary_1.writeUint32LE(x8, dst, 24);\n  binary_1.writeUint32LE(x9, dst, 28);\n  return dst;\n}\nexports.hsalsa = hsalsa;","map":{"version":3,"names":["binary_1","require","salsa20_1","wipe_1","streamXOR","key","nonce","src","dst","nonceInplaceCounterLength","length","Error","subkey","hsalsa","subarray","Uint8Array","result","wipe","exports","stream","ROUNDS","x0","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","u","i","writeUint32LE"],"sources":["../xsalsa20.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}