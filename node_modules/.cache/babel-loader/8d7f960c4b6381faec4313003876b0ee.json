{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Logger } from '@airgap/beacon-core';\nimport { ExposedPromise } from '@airgap/beacon-utils';\nimport { MatrixClientStore } from './MatrixClientStore';\nimport { MatrixHttpClient } from './MatrixHttpClient';\nimport { MatrixRoom, MatrixRoomStatus } from './models/MatrixRoom';\nimport { MatrixRoomService } from './services/MatrixRoomService';\nimport { MatrixUserService } from './services/MatrixUserService';\nimport { MatrixEventService } from './services/MatrixEventService';\nimport { MatrixClientEventEmitter } from './MatrixClientEventEmitter';\nconst logger = new Logger('MatrixClient');\nconst IMMEDIATE_POLLING_RETRIES = 3;\nconst RETRY_INTERVAL = 5000;\n/**\r\n * The matrix client used to connect to the matrix network\r\n */\nexport class MatrixClient {\n  constructor(store, eventEmitter, userService, roomService, eventService, httpClient) {\n    this.store = store;\n    this.eventEmitter = eventEmitter;\n    this.userService = userService;\n    this.roomService = roomService;\n    this.eventService = eventService;\n    this.httpClient = httpClient;\n    this.isActive = true;\n    this._isReady = new ExposedPromise();\n    this.store.onStateChanged((oldState, newState, stateChange) => {\n      this.eventEmitter.onStateChanged(oldState, newState, stateChange);\n    }, 'rooms');\n  }\n  /**\r\n   * Create a matrix client based on the options provided\r\n   *\r\n   * @param config\r\n   */\n  static create(config) {\n    const store = new MatrixClientStore(config.storage);\n    const eventEmitter = new MatrixClientEventEmitter();\n    const httpClient = new MatrixHttpClient(config.baseUrl);\n    const accountService = new MatrixUserService(httpClient);\n    const roomService = new MatrixRoomService(httpClient);\n    const eventService = new MatrixEventService(httpClient);\n    return new MatrixClient(store, eventEmitter, accountService, roomService, eventService, httpClient);\n  }\n  /**\r\n   * Return all the rooms we are currently part of\r\n   */\n  get joinedRooms() {\n    return new Promise(resolve => __awaiter(this, void 0, void 0, function* () {\n      yield this.isConnected();\n      resolve(Object.values(this.store.get('rooms')).filter(room => room.status === MatrixRoomStatus.JOINED));\n    }));\n  }\n  /**\r\n   * Return all the rooms to which we have received invitations\r\n   */\n  get invitedRooms() {\n    return new Promise(resolve => __awaiter(this, void 0, void 0, function* () {\n      yield this.isConnected();\n      resolve(Object.values(this.store.get('rooms')).filter(room => room.status === MatrixRoomStatus.INVITED));\n    }));\n  }\n  /**\r\n   * Return all the rooms that we left\r\n   */\n  get leftRooms() {\n    return new Promise(resolve => __awaiter(this, void 0, void 0, function* () {\n      yield this.isConnected();\n      resolve(Object.values(this.store.get('rooms')).filter(room => room.status === MatrixRoomStatus.LEFT));\n    }));\n  }\n  /**\r\n   * Initiate the connection to the matrix node and log in\r\n   *\r\n   * @param user\r\n   */\n  start(user) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield this.userService.login(user.id, user.password, user.deviceId);\n      yield this.store.update({\n        accessToken: response.access_token\n      });\n      const initialPollingResult = new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n        yield this.poll(0, pollingResponse => __awaiter(this, void 0, void 0, function* () {\n          if (!this.store.get('isRunning')) {\n            resolve();\n          }\n          yield this.store.update({\n            isRunning: true,\n            syncToken: pollingResponse.next_batch,\n            pollingTimeout: 30000,\n            pollingRetries: 0,\n            rooms: MatrixRoom.fromSync(pollingResponse.rooms)\n          });\n        }), error => __awaiter(this, void 0, void 0, function* () {\n          if (!this.store.get('isRunning')) {\n            reject(error);\n          }\n          yield this.store.update({\n            isRunning: false,\n            pollingRetries: this.store.get('pollingRetries') + 1\n          });\n        }));\n      }));\n      initialPollingResult.then(() => {\n        this._isReady.resolve();\n      }).catch(console.error);\n      return initialPollingResult;\n    });\n  }\n  isConnected() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._isReady.promise;\n    });\n  }\n  /**\r\n   * Stop all running requests\r\n   */\n  stop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log(`MATRIX CLIENT STOPPED`);\n      this.isActive = false;\n      this._isReady = new ExposedPromise();\n      return this.httpClient.cancelAllRequests();\n    });\n  }\n  /**\r\n   * Subscribe to new matrix events\r\n   *\r\n   * @param event\r\n   * @param listener\r\n   */\n  subscribe(event, listener) {\n    this.eventEmitter.on(event, listener);\n  }\n  /**\r\n   * Unsubscribe from matrix events\r\n   *\r\n   * @param event\r\n   * @param listener\r\n   */\n  unsubscribe(event, listener) {\n    if (listener) {\n      this.eventEmitter.removeListener(event, listener);\n    }\n  }\n  /**\r\n   * Unsubscribe from all matrix events of this type\r\n   *\r\n   * @param event\r\n   * @param listener\r\n   */\n  unsubscribeAll(event) {\n    this.eventEmitter.removeListener(event);\n  }\n  getRoomById(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.isConnected();\n      return this.store.getRoom(id);\n    });\n  }\n  /**\r\n   * Create a private room with the supplied members\r\n   *\r\n   * @param members Members that will be in the room\r\n   */\n  createTrustedPrivateRoom() {\n    for (var _len = arguments.length, members = new Array(_len), _key = 0; _key < _len; _key++) {\n      members[_key] = arguments[_key];\n    }\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.isConnected();\n      return this.requiresAuthorization('createRoom', accessToken => __awaiter(this, void 0, void 0, function* () {\n        const response = yield this.roomService.createRoom(accessToken, {\n          room_version: '5',\n          invite: members,\n          preset: 'public_chat',\n          is_direct: true\n        });\n        return response.room_id;\n      }));\n    });\n  }\n  /**\r\n   * Invite user to rooms\r\n   *\r\n   * @param user The user to be invited\r\n   * @param roomsOrIds The rooms the user will be invited to\r\n   */\n  inviteToRooms(user) {\n    for (var _len2 = arguments.length, roomsOrIds = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      roomsOrIds[_key2 - 1] = arguments[_key2];\n    }\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.isConnected();\n      yield this.requiresAuthorization('invite', accessToken => Promise.all(roomsOrIds.map(roomOrId => {\n        const room = this.store.getRoom(roomOrId);\n        this.roomService.inviteToRoom(accessToken, user, room).catch(error => logger.warn('inviteToRooms', error));\n      })));\n    });\n  }\n  /**\r\n   * Join rooms\r\n   *\r\n   * @param roomsOrIds\r\n   */\n  joinRooms() {\n    for (var _len3 = arguments.length, roomsOrIds = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      roomsOrIds[_key3] = arguments[_key3];\n    }\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.isConnected();\n      yield this.requiresAuthorization('join', accessToken => Promise.all(roomsOrIds.map(roomOrId => {\n        const room = this.store.getRoom(roomOrId);\n        return this.roomService.joinRoom(accessToken, room);\n      })));\n    });\n  }\n  /**\r\n   * Send a text message\r\n   *\r\n   * @param roomOrId\r\n   * @param message\r\n   */\n  sendTextMessage(roomId, message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.isConnected();\n      yield this.requiresAuthorization('send', accessToken => __awaiter(this, void 0, void 0, function* () {\n        const txnId = yield this.createTxnId();\n        return this.eventService.sendMessage(accessToken, roomId, {\n          msgtype: 'm.text',\n          body: message\n        }, txnId);\n      }));\n    });\n  }\n  /**\r\n   * Poll the server to get the latest data and get notified of changes\r\n   *\r\n   * @param interval\r\n   * @param onSyncSuccess\r\n   * @param onSyncError\r\n   */\n  poll(interval, onSyncSuccess, onSyncError) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const store = this.store;\n      const sync = this.sync.bind(this);\n      const pollSync = (resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n        let syncingRetries = 0;\n        try {\n          const response = yield sync();\n          onSyncSuccess(response);\n        } catch (error) {\n          onSyncError(error);\n          syncingRetries = store.get('pollingRetries');\n          // console.warn('Could not sync:', error)\n          if (this.isActive) {\n            logger.log(`Retry syncing... ${syncingRetries} retries so far`);\n          }\n        } finally {\n          if (this.isActive) {\n            setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n              yield pollSync(resolve, reject);\n            }), syncingRetries > IMMEDIATE_POLLING_RETRIES ? RETRY_INTERVAL + interval : interval);\n          } else {\n            reject(new Error(`Syncing stopped manually.`));\n          }\n        }\n      });\n      return new Promise(pollSync);\n    });\n  }\n  /**\r\n   * Get state from server\r\n   */\n  sync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.requiresAuthorization('sync', accessToken => __awaiter(this, void 0, void 0, function* () {\n        return this.eventService.sync(accessToken, {\n          pollingTimeout: this.store.get('pollingTimeout'),\n          syncToken: this.store.get('syncToken')\n        });\n      }));\n    });\n  }\n  /**\r\n   * A helper method that makes sure an access token is provided\r\n   *\r\n   * @param name\r\n   * @param action\r\n   */\n  requiresAuthorization(name, action) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storedToken = this.store.get('accessToken');\n      if (!storedToken) {\n        return Promise.reject(`${name} requires authorization but no access token has been provided.`);\n      }\n      return action(storedToken);\n    });\n  }\n  /**\r\n   * Create a transaction ID\r\n   */\n  createTxnId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const timestamp = new Date().getTime();\n      const counter = this.store.get('txnNo');\n      yield this.store.update({\n        txnNo: counter + 1\n      });\n      return `m${timestamp}.${counter}`;\n    });\n  }\n}","map":{"version":3,"names":["Logger","ExposedPromise","MatrixClientStore","MatrixHttpClient","MatrixRoom","MatrixRoomStatus","MatrixRoomService","MatrixUserService","MatrixEventService","MatrixClientEventEmitter","logger","IMMEDIATE_POLLING_RETRIES","RETRY_INTERVAL","MatrixClient","constructor","store","eventEmitter","userService","roomService","eventService","httpClient","isActive","_isReady","onStateChanged","oldState","newState","stateChange","create","config","storage","baseUrl","accountService","joinedRooms","Promise","resolve","__awaiter","isConnected","Object","values","get","filter","room","status","JOINED","invitedRooms","INVITED","leftRooms","LEFT","start","user","response","login","id","password","deviceId","update","accessToken","access_token","initialPollingResult","reject","poll","pollingResponse","isRunning","syncToken","next_batch","pollingTimeout","pollingRetries","rooms","fromSync","error","then","catch","console","promise","stop","log","cancelAllRequests","subscribe","event","listener","on","unsubscribe","removeListener","unsubscribeAll","getRoomById","getRoom","createTrustedPrivateRoom","_len","arguments","length","members","Array","_key","requiresAuthorization","createRoom","room_version","invite","preset","is_direct","room_id","inviteToRooms","_len2","roomsOrIds","_key2","all","map","roomOrId","inviteToRoom","warn","joinRooms","_len3","_key3","joinRoom","sendTextMessage","roomId","message","txnId","createTxnId","sendMessage","msgtype","body","interval","onSyncSuccess","onSyncError","sync","bind","pollSync","syncingRetries","setTimeout","Error","name","action","storedToken","timestamp","Date","getTime","counter","txnNo"],"sources":["../../../src/matrix-client/MatrixClient.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,UAAU,EAAEC,gBAAgB,QAAQ,qBAAqB;AAClE,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,SAASC,kBAAkB,QAAQ,+BAA+B;AAElE,SAASC,wBAAwB,QAAQ,4BAA4B;AAGrE,MAAMC,MAAM,GAAG,IAAIV,MAAM,CAAC,cAAc,CAAC;AAazC,MAAMW,yBAAyB,GAAG,CAAC;AACnC,MAAMC,cAAc,GAAG,IAAI;AAE3B;;;AAGA,OAAM,MAAOC,YAAY;EAIvBC,YACmBC,KAAwB,EACxBC,YAAsC,EACtCC,WAA8B,EAC9BC,WAA8B,EAC9BC,YAAgC,EAChCC,UAA4B;IAL5B,KAAAL,KAAK,GAALA,KAAK;IACL,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,UAAU,GAAVA,UAAU;IATrB,KAAAC,QAAQ,GAAY,IAAI;IACxB,KAAAC,QAAQ,GAAyB,IAAIrB,cAAc,EAAE;IAU3D,IAAI,CAACc,KAAK,CAACQ,cAAc,CAAC,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,WAAW,KAAI;MAC5D,IAAI,CAACV,YAAY,CAACO,cAAc,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,WAAW,CAAC;IACnE,CAAC,EAAE,OAAO,CAAC;EACb;EAEA;;;;;EAKO,OAAOC,MAAMA,CAACC,MAA2B;IAC9C,MAAMb,KAAK,GAAG,IAAIb,iBAAiB,CAAC0B,MAAM,CAACC,OAAO,CAAC;IACnD,MAAMb,YAAY,GAAG,IAAIP,wBAAwB,EAAE;IAEnD,MAAMW,UAAU,GAAG,IAAIjB,gBAAgB,CAACyB,MAAM,CAACE,OAAO,CAAC;IAEvD,MAAMC,cAAc,GAAG,IAAIxB,iBAAiB,CAACa,UAAU,CAAC;IACxD,MAAMF,WAAW,GAAG,IAAIZ,iBAAiB,CAACc,UAAU,CAAC;IACrD,MAAMD,YAAY,GAAG,IAAIX,kBAAkB,CAACY,UAAU,CAAC;IAEvD,OAAO,IAAIP,YAAY,CACrBE,KAAK,EACLC,YAAY,EACZe,cAAc,EACdb,WAAW,EACXC,YAAY,EACZC,UAAU,CACX;EACH;EAEA;;;EAGA,IAAWY,WAAWA,CAAA;IACpB,OAAO,IAAIC,OAAO,CAAQC,OAAO,IAAIC,SAAA;MACnC,MAAM,IAAI,CAACC,WAAW,EAAE;MAExBF,OAAO,CACLG,MAAM,CAACC,MAAM,CAAC,IAAI,CAACvB,KAAK,CAACwB,GAAG,CAAC,OAAO,CAAC,CAAC,CAACC,MAAM,CAC1CC,IAAI,IAAKA,IAAI,CAACC,MAAM,KAAKrC,gBAAgB,CAACsC,MAAM,CAClD,CACF;IACH,CAAC,EAAC;EACJ;EAEA;;;EAGA,IAAWC,YAAYA,CAAA;IACrB,OAAO,IAAIX,OAAO,CAAQC,OAAO,IAAIC,SAAA;MACnC,MAAM,IAAI,CAACC,WAAW,EAAE;MAExBF,OAAO,CACLG,MAAM,CAACC,MAAM,CAAC,IAAI,CAACvB,KAAK,CAACwB,GAAG,CAAC,OAAO,CAAC,CAAC,CAACC,MAAM,CAC1CC,IAAI,IAAKA,IAAI,CAACC,MAAM,KAAKrC,gBAAgB,CAACwC,OAAO,CACnD,CACF;IACH,CAAC,EAAC;EACJ;EAEA;;;EAGA,IAAWC,SAASA,CAAA;IAClB,OAAO,IAAIb,OAAO,CAAQC,OAAO,IAAIC,SAAA;MACnC,MAAM,IAAI,CAACC,WAAW,EAAE;MAExBF,OAAO,CACLG,MAAM,CAACC,MAAM,CAAC,IAAI,CAACvB,KAAK,CAACwB,GAAG,CAAC,OAAO,CAAC,CAAC,CAACC,MAAM,CAC1CC,IAAI,IAAKA,IAAI,CAACC,MAAM,KAAKrC,gBAAgB,CAAC0C,IAAI,CAChD,CACF;IACH,CAAC,EAAC;EACJ;EAEA;;;;;EAKaC,KAAKA,CAACC,IAAuB;;MACxC,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACjC,WAAW,CAACkC,KAAK,CAACF,IAAI,CAACG,EAAE,EAAEH,IAAI,CAACI,QAAQ,EAAEJ,IAAI,CAACK,QAAQ,CAAC;MAEpF,MAAM,IAAI,CAACvC,KAAK,CAACwC,MAAM,CAAC;QACtBC,WAAW,EAAEN,QAAQ,CAACO;OACvB,CAAC;MAEF,MAAMC,oBAAoB,GAAG,IAAIzB,OAAO,CAAO,CAAOC,OAAO,EAAEyB,MAAM,KAAIxB,SAAA;QACvE,MAAM,IAAI,CAACyB,IAAI,CACb,CAAC,EACMC,eAAmC,IAAI1B,SAAA;UAC5C,IAAI,CAAC,IAAI,CAACpB,KAAK,CAACwB,GAAG,CAAC,WAAW,CAAC,EAAE;YAChCL,OAAO,EAAE;;UAEX,MAAM,IAAI,CAACnB,KAAK,CAACwC,MAAM,CAAC;YACtBO,SAAS,EAAE,IAAI;YACfC,SAAS,EAAEF,eAAe,CAACG,UAAU;YACrCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,CAAC;YACjBC,KAAK,EAAE/D,UAAU,CAACgE,QAAQ,CAACP,eAAe,CAACM,KAAK;WACjD,CAAC;QACJ,CAAC,GACME,KAAK,IAAIlC,SAAA;UACd,IAAI,CAAC,IAAI,CAACpB,KAAK,CAACwB,GAAG,CAAC,WAAW,CAAC,EAAE;YAChCoB,MAAM,CAACU,KAAK,CAAC;;UAEf,MAAM,IAAI,CAACtD,KAAK,CAACwC,MAAM,CAAC;YACtBO,SAAS,EAAE,KAAK;YAChBI,cAAc,EAAE,IAAI,CAACnD,KAAK,CAACwB,GAAG,CAAC,gBAAgB,CAAC,GAAG;WACpD,CAAC;QACJ,CAAC,EACF;MACH,CAAC,EAAC;MAEFmB,oBAAoB,CACjBY,IAAI,CAAC,MAAK;QACT,IAAI,CAAChD,QAAQ,CAACY,OAAO,EAAE;MACzB,CAAC,CAAC,CACDqC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC;MAEvB,OAAOX,oBAAoB;IAC7B,CAAC;;EAEYtB,WAAWA,CAAA;;MACtB,OAAO,IAAI,CAACd,QAAQ,CAACmD,OAAO;IAC9B,CAAC;;EAED;;;EAGaC,IAAIA,CAAA;;MACfhE,MAAM,CAACiE,GAAG,CAAC,uBAAuB,CAAC;MACnC,IAAI,CAACtD,QAAQ,GAAG,KAAK;MACrB,IAAI,CAACC,QAAQ,GAAG,IAAIrB,cAAc,EAAE;MAEpC,OAAO,IAAI,CAACmB,UAAU,CAACwD,iBAAiB,EAAE;IAC5C,CAAC;;EAED;;;;;;EAMOC,SAASA,CACdC,KAAQ,EACRC,QAA+C;IAE/C,IAAI,CAAC/D,YAAY,CAACgE,EAAE,CAACF,KAAK,EAAEC,QAAQ,CAAC;EACvC;EAEA;;;;;;EAMOE,WAAWA,CAChBH,KAA4B,EAC5BC,QAAiD;IAEjD,IAAIA,QAAQ,EAAE;MACZ,IAAI,CAAC/D,YAAY,CAACkE,cAAc,CAACJ,KAAK,EAAEC,QAAQ,CAAC;;EAErD;EAEA;;;;;;EAMOI,cAAcA,CAACL,KAA4B;IAChD,IAAI,CAAC9D,YAAY,CAACkE,cAAc,CAACJ,KAAK,CAAC;EACzC;EAEaM,WAAWA,CAAChC,EAAU;;MACjC,MAAM,IAAI,CAAChB,WAAW,EAAE;MAExB,OAAO,IAAI,CAACrB,KAAK,CAACsE,OAAO,CAACjC,EAAE,CAAC;IAC/B,CAAC;;EAED;;;;;EAKakC,wBAAwBA,CAAA,EAAqB;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAjBC,OAAiB,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAjBF,OAAiB,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;;MACxD,MAAM,IAAI,CAACxD,WAAW,EAAE;MAExB,OAAO,IAAI,CAACyD,qBAAqB,CAAC,YAAY,EAASrC,WAAW,IAAIrB,SAAA;QACpE,MAAMe,QAAQ,GAAG,MAAM,IAAI,CAAChC,WAAW,CAAC4E,UAAU,CAACtC,WAAW,EAAE;UAC9DuC,YAAY,EAAE,GAAG;UACjBC,MAAM,EAAEN,OAAO;UACfO,MAAM,EAAE,aAAa;UACrBC,SAAS,EAAE;SACZ,CAAC;QAEF,OAAOhD,QAAQ,CAACiD,OAAO;MACzB,CAAC,EAAC;IACJ,CAAC;;EAED;;;;;;EAMaC,aAAaA,CAACnD,IAAY,EAAwC;IAAA,SAAAoD,KAAA,GAAAb,SAAA,CAAAC,MAAA,EAAnCa,UAAmC,OAAAX,KAAA,CAAAU,KAAA,OAAAA,KAAA,WAAAE,KAAA,MAAAA,KAAA,GAAAF,KAAA,EAAAE,KAAA;MAAnCD,UAAmC,CAAAC,KAAA,QAAAf,SAAA,CAAAe,KAAA;IAAA;;MAC7E,MAAM,IAAI,CAACnE,WAAW,EAAE;MAExB,MAAM,IAAI,CAACyD,qBAAqB,CAAC,QAAQ,EAAGrC,WAAW,IACrDvB,OAAO,CAACuE,GAAG,CACRF,UAAoB,CAACG,GAAG,CAAEC,QAAQ,IAAI;QACrC,MAAMjE,IAAI,GAAG,IAAI,CAAC1B,KAAK,CAACsE,OAAO,CAACqB,QAAQ,CAAC;QACzC,IAAI,CAACxF,WAAW,CACbyF,YAAY,CAACnD,WAAW,EAAEP,IAAI,EAAER,IAAI,CAAC,CACrC8B,KAAK,CAAEF,KAAK,IAAK3D,MAAM,CAACkG,IAAI,CAAC,eAAe,EAAEvC,KAAK,CAAC,CAAC;MAC1D,CAAC,CAAC,CACH,CACF;IACH,CAAC;;EAED;;;;;EAKawC,SAASA,CAAA,EAAuC;IAAA,SAAAC,KAAA,GAAAtB,SAAA,CAAAC,MAAA,EAAnCa,UAAmC,OAAAX,KAAA,CAAAmB,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAnCT,UAAmC,CAAAS,KAAA,IAAAvB,SAAA,CAAAuB,KAAA;IAAA;;MAC3D,MAAM,IAAI,CAAC3E,WAAW,EAAE;MAExB,MAAM,IAAI,CAACyD,qBAAqB,CAAC,MAAM,EAAGrC,WAAW,IACnDvB,OAAO,CAACuE,GAAG,CACRF,UAAoB,CAACG,GAAG,CAAEC,QAAQ,IAAI;QACrC,MAAMjE,IAAI,GAAG,IAAI,CAAC1B,KAAK,CAACsE,OAAO,CAACqB,QAAQ,CAAC;QAEzC,OAAO,IAAI,CAACxF,WAAW,CAAC8F,QAAQ,CAACxD,WAAW,EAAEf,IAAI,CAAC;MACrD,CAAC,CAAC,CACH,CACF;IACH,CAAC;;EAED;;;;;;EAMawE,eAAeA,CAACC,MAAc,EAAEC,OAAe;;MAC1D,MAAM,IAAI,CAAC/E,WAAW,EAAE;MAExB,MAAM,IAAI,CAACyD,qBAAqB,CAAC,MAAM,EAASrC,WAAW,IAAIrB,SAAA;QAC7D,MAAMiF,KAAK,GAAG,MAAM,IAAI,CAACC,WAAW,EAAE;QAEtC,OAAO,IAAI,CAAClG,YAAY,CAACmG,WAAW,CAClC9D,WAAW,EACX0D,MAAM,EACN;UACEK,OAAO,EAAE,QAAQ;UACjBC,IAAI,EAAEL;SACP,EACDC,KAAK,CACN;MACH,CAAC,EAAC;IACJ,CAAC;;EAED;;;;;;;EAOcxD,IAAIA,CAChB6D,QAAgB,EAChBC,aAAqD,EACrDC,WAAqC;;MAErC,MAAM5G,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,MAAM6G,IAAI,GAAG,IAAI,CAACA,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC;MAEjC,MAAMC,QAAQ,GAAGA,CACf5F,OAA+D,EAC/DyB,MAA8B,KACbxB,SAAA;QACjB,IAAI4F,cAAc,GAAW,CAAC;QAC9B,IAAI;UACF,MAAM7E,QAAQ,GAAG,MAAM0E,IAAI,EAAE;UAC7BF,aAAa,CAACxE,QAAQ,CAAC;SACxB,CAAC,OAAOmB,KAAK,EAAE;UACdsD,WAAW,CAACtD,KAAK,CAAC;UAElB0D,cAAc,GAAGhH,KAAK,CAACwB,GAAG,CAAC,gBAAgB,CAAC;UAC5C;UACA,IAAI,IAAI,CAAClB,QAAQ,EAAE;YACjBX,MAAM,CAACiE,GAAG,CAAC,oBAAoBoD,cAAc,iBAAiB,CAAC;;SAElE,SAAS;UACR,IAAI,IAAI,CAAC1G,QAAQ,EAAE;YACjB2G,UAAU,CACR,MAAW7F,SAAA;cACT,MAAM2F,QAAQ,CAAC5F,OAAO,EAAEyB,MAAM,CAAC;YACjC,CAAC,GACDoE,cAAc,GAAGpH,yBAAyB,GAAGC,cAAc,GAAG6G,QAAQ,GAAGA,QAAQ,CAClF;WACF,MAAM;YACL9D,MAAM,CAAC,IAAIsE,KAAK,CAAC,2BAA2B,CAAC,CAAC;;;MAGpD,CAAC;MAED,OAAO,IAAIhG,OAAO,CAAC6F,QAAQ,CAAC;IAC9B,CAAC;;EAED;;;EAGcF,IAAIA,CAAA;;MAChB,OAAO,IAAI,CAAC/B,qBAAqB,CAAC,MAAM,EAASrC,WAAW,IAAIrB,SAAA;QAC9D,WAAI,CAAChB,YAAY,CAACyG,IAAI,CAACpE,WAAW,EAAE;UAClCS,cAAc,EAAE,IAAI,CAAClD,KAAK,CAACwB,GAAG,CAAC,gBAAgB,CAAC;UAChDwB,SAAS,EAAE,IAAI,CAAChD,KAAK,CAACwB,GAAG,CAAC,WAAW;SACtC,CAAC;QAAA,CACH;IACH,CAAC;;EAED;;;;;;EAMcsD,qBAAqBA,CACjCqC,IAAY,EACZC,MAA2C;;MAE3C,MAAMC,WAAW,GAAuB,IAAI,CAACrH,KAAK,CAACwB,GAAG,CAAC,aAAa,CAAC;MAErE,IAAI,CAAC6F,WAAW,EAAE;QAChB,OAAOnG,OAAO,CAAC0B,MAAM,CAAC,GAAGuE,IAAI,gEAAgE,CAAC;;MAGhG,OAAOC,MAAM,CAACC,WAAW,CAAC;IAC5B,CAAC;;EAED;;;EAGcf,WAAWA,CAAA;;MACvB,MAAMgB,SAAS,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;MACtC,MAAMC,OAAO,GAAG,IAAI,CAACzH,KAAK,CAACwB,GAAG,CAAC,OAAO,CAAC;MAEvC,MAAM,IAAI,CAACxB,KAAK,CAACwC,MAAM,CAAC;QACtBkF,KAAK,EAAED,OAAO,GAAG;OAClB,CAAC;MAEF,OAAO,IAAIH,SAAS,IAAIG,OAAO,EAAE;IACnC,CAAC"},"metadata":{},"sourceType":"module"}