{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Logger, Transport, PeerManager } from '@airgap/beacon-core';\nimport { TransportStatus, TransportType, Origin } from '@airgap/beacon-types';\nimport { P2PCommunicationClient } from '@airgap/beacon-transport-matrix';\nconst logger = new Logger('P2PTransport');\n/**\n * @internalapi\n *\n *\n */\nexport class P2PTransport extends Transport {\n  constructor(name, keyPair, storage, matrixNodes, storageKey, iconUrl, appUrl) {\n    super(name, new P2PCommunicationClient(name, keyPair, 1, storage, matrixNodes, iconUrl, appUrl), new PeerManager(storage, storageKey));\n    this.type = TransportType.P2P;\n  }\n  static isAvailable() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Promise.resolve(true);\n    });\n  }\n  connect() {\n    const _super = Object.create(null, {\n      connect: {\n        get: () => super.connect\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._isConnected !== TransportStatus.NOT_CONNECTED) {\n        return;\n      }\n      logger.log('connect');\n      this._isConnected = TransportStatus.CONNECTING;\n      yield this.client.start();\n      const knownPeers = yield this.getPeers();\n      if (knownPeers.length > 0) {\n        logger.log('connect', `connecting to ${knownPeers.length} peers`);\n        const connectionPromises = knownPeers.map(peer => __awaiter(this, void 0, void 0, function* () {\n          return this.listen(peer.publicKey);\n        }));\n        Promise.all(connectionPromises).catch(error => logger.error('connect', error));\n      }\n      yield this.startOpenChannelListener();\n      return _super.connect.call(this);\n    });\n  }\n  disconnect() {\n    const _super = Object.create(null, {\n      disconnect: {\n        get: () => super.disconnect\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.client.stop();\n      return _super.disconnect.call(this);\n    });\n  }\n  startOpenChannelListener() {\n    return __awaiter(this, void 0, void 0, function* () {\n      //\n    });\n  }\n  getPairingRequestInfo() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.client.getPairingRequestInfo();\n    });\n  }\n  listen(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.client.listenForEncryptedMessage(publicKey, message => {\n        const connectionContext = {\n          origin: Origin.P2P,\n          id: publicKey\n        };\n        this.notifyListeners(message, connectionContext).catch(error => {\n          throw error;\n        });\n      }).catch(error => {\n        throw error;\n      });\n    });\n  }\n}","map":{"version":3,"names":["Logger","Transport","PeerManager","TransportStatus","TransportType","Origin","P2PCommunicationClient","logger","P2PTransport","constructor","name","keyPair","storage","matrixNodes","storageKey","iconUrl","appUrl","type","P2P","isAvailable","Promise","resolve","connect","_isConnected","NOT_CONNECTED","log","CONNECTING","client","start","knownPeers","getPeers","length","connectionPromises","map","peer","__awaiter","listen","publicKey","all","catch","error","startOpenChannelListener","_super","call","disconnect","stop","getPairingRequestInfo","listenForEncryptedMessage","message","connectionContext","origin","id","notifyListeners"],"sources":["../../src/P2PTransport.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAM,EAAEC,SAAS,EAAEC,WAAW,QAAQ,qBAAqB;AACpE,SAKEC,eAAe,EACfC,aAAa,EACbC,MAAM,QAGD,sBAAsB;AAC7B,SAASC,sBAAsB,QAAQ,iCAAiC;AAGxE,MAAMC,MAAM,GAAG,IAAIP,MAAM,CAAC,cAAc,CAAC;AAEzC;;;;;AAKA,OAAM,MAAOQ,YAGX,SAAQP,SAAuC;EAG/CQ,YACEC,IAAY,EACZC,OAAgB,EAChBC,OAAgB,EAChBC,WAA8B,EAC9BC,UAAa,EACbC,OAAgB,EAChBC,MAAe;IAEf,KAAK,CACHN,IAAI,EACJ,IAAIJ,sBAAsB,CAACI,IAAI,EAAEC,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAEC,WAAW,EAAEE,OAAO,EAAEC,MAAM,CAAC,EACnF,IAAId,WAAW,CAAIU,OAAO,EAAEE,UAAU,CAAC,CACxC;IAfa,KAAAG,IAAI,GAAkBb,aAAa,CAACc,GAAG;EAgBvD;EAEO,OAAaC,WAAWA,CAAA;;MAC7B,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;IAC9B,CAAC;;EAEYC,OAAOA,CAAA;;;;;;;MAClB,IAAI,IAAI,CAACC,YAAY,KAAKpB,eAAe,CAACqB,aAAa,EAAE;QACvD;;MAGFjB,MAAM,CAACkB,GAAG,CAAC,SAAS,CAAC;MACrB,IAAI,CAACF,YAAY,GAAGpB,eAAe,CAACuB,UAAU;MAE9C,MAAM,IAAI,CAACC,MAAM,CAACC,KAAK,EAAE;MAEzB,MAAMC,UAAU,GAAG,MAAM,IAAI,CAACC,QAAQ,EAAE;MAExC,IAAID,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;QACzBxB,MAAM,CAACkB,GAAG,CAAC,SAAS,EAAE,iBAAiBI,UAAU,CAACE,MAAM,QAAQ,CAAC;QACjE,MAAMC,kBAAkB,GAAGH,UAAU,CAACI,GAAG,CAAQC,IAAI,IAAIC,SAAA;UAAC,WAAI,CAACC,MAAM,CAACF,IAAI,CAACG,SAAS,CAAC;QAAA,GAAC;QACtFjB,OAAO,CAACkB,GAAG,CAACN,kBAAkB,CAAC,CAACO,KAAK,CAAEC,KAAK,IAAKjC,MAAM,CAACiC,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC,CAAC;;MAGlF,MAAM,IAAI,CAACC,wBAAwB,EAAE;MAErC,OAAOC,MAAA,CAAMpB,OAAO,CAAAqB,IAAA;IACtB,CAAC;;EAEYC,UAAUA,CAAA;;;;;;;MACrB,MAAM,IAAI,CAACjB,MAAM,CAACkB,IAAI,EAAE;MAExB,OAAOH,MAAA,CAAME,UAAU,CAAAD,IAAA;IACzB,CAAC;;EAEYF,wBAAwBA,CAAA;;MACnC;IAAA,CACD;;EAEYK,qBAAqBA,CAAA;;MAChC,OAAO,IAAI,CAACnB,MAAM,CAACmB,qBAAqB,EAAE;IAC5C,CAAC;;EAEYV,MAAMA,CAACC,SAAiB;;MACnC,MAAM,IAAI,CAACV,MAAM,CACdoB,yBAAyB,CAACV,SAAS,EAAGW,OAAO,IAAI;QAChD,MAAMC,iBAAiB,GAAsB;UAC3CC,MAAM,EAAE7C,MAAM,CAACa,GAAG;UAClBiC,EAAE,EAAEd;SACL;QAED,IAAI,CAACe,eAAe,CAACJ,OAAO,EAAEC,iBAAiB,CAAC,CAACV,KAAK,CAAEC,KAAK,IAAI;UAC/D,MAAMA,KAAK;QACb,CAAC,CAAC;MACJ,CAAC,CAAC,CACDD,KAAK,CAAEC,KAAK,IAAI;QACf,MAAMA,KAAK;MACb,CAAC,CAAC;IACN,CAAC"},"metadata":{},"sourceType":"module"}