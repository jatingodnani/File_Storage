{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Logger } from '../utils/Logger';\nimport { ChromeStorage, LocalStorage } from '..';\nconst logger = new Logger('STORAGE');\n/**\n * Get a supported storage on this platform\n */\nexport const getStorage = () => __awaiter(void 0, void 0, void 0, function* () {\n  if (yield ChromeStorage.isSupported()) {\n    logger.log('getStorage', 'USING CHROME STORAGE');\n    return new ChromeStorage();\n  } else if (yield LocalStorage.isSupported()) {\n    logger.log('getStorage', 'USING LOCAL STORAGE');\n    return new LocalStorage();\n  } else {\n    throw new Error('no storage type supported');\n  }\n});","map":{"version":3,"names":["Logger","ChromeStorage","LocalStorage","logger","getStorage","__awaiter","isSupported","log","Error"],"sources":["../../../src/storage/getStorage.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAM,QAAQ,iBAAiB;AACxC,SAASC,aAAa,EAAEC,YAAY,QAAQ,IAAI;AAGhD,MAAMC,MAAM,GAAG,IAAIH,MAAM,CAAC,SAAS,CAAC;AAEpC;;;AAGA,OAAO,MAAMI,UAAU,GAA2BA,CAAA,KAA6BC,SAAA;EAC7E,IAAI,MAAMJ,aAAa,CAACK,WAAW,EAAE,EAAE;IACrCH,MAAM,CAACI,GAAG,CAAC,YAAY,EAAE,sBAAsB,CAAC;IAEhD,OAAO,IAAIN,aAAa,EAAE;GAC3B,MAAM,IAAI,MAAMC,YAAY,CAACI,WAAW,EAAE,EAAE;IAC3CH,MAAM,CAACI,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;IAE/C,OAAO,IAAIL,YAAY,EAAE;GAC1B,MAAM;IACL,MAAM,IAAIM,KAAK,CAAC,2BAA2B,CAAC;;AAEhD,CAAC"},"metadata":{},"sourceType":"module"}