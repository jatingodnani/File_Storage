{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { keys } from '@airgap/beacon-utils';\nimport { MatrixRoom, MatrixRoomStatus } from './models/MatrixRoom';\nimport { StorageKey } from '@airgap/beacon-types';\nconst PRESERVED_FIELDS = ['syncToken', 'rooms'];\n/**\n * The class managing the local state of matrix\n */\nexport class MatrixClientStore {\n  constructor(storage) {\n    this.storage = storage;\n    /**\n     * The state of the matrix client\n     */\n    this.state = {\n      isRunning: false,\n      userId: undefined,\n      deviceId: undefined,\n      txnNo: 0,\n      accessToken: undefined,\n      syncToken: undefined,\n      pollingTimeout: undefined,\n      pollingRetries: 0,\n      rooms: {}\n    };\n    /**\n     * Listeners that will be called when the state changes\n     */\n    this.onStateChangedListeners = new Map();\n    /**\n     * A promise that resolves once the client is ready\n     */\n    this.waitReadyPromise = new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this.initFromStorage();\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    }));\n  }\n  /**\n   * Get an item from the state\n   *\n   * @param key\n   */\n  get(key) {\n    return this.state[key];\n  }\n  /**\n   * Get the room from an ID or room instance\n   *\n   * @param roomOrId\n   */\n  getRoom(roomOrId) {\n    const room = MatrixRoom.from(roomOrId, MatrixRoomStatus.UNKNOWN);\n    return this.state.rooms[room.id] || room;\n  }\n  /**\n   * Update the state with a partial state\n   *\n   * @param stateUpdate\n   */\n  update(stateUpdate) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.waitReady();\n      const oldState = Object.assign({}, this.state);\n      this.setState(stateUpdate);\n      this.updateStorage(stateUpdate);\n      this.notifyListeners(oldState, this.state, stateUpdate);\n    });\n  }\n  /**\n   * Register listeners that are called once the state has changed\n   *\n   * @param listener\n   * @param subscribed\n   */\n  onStateChanged(listener) {\n    for (var _len = arguments.length, subscribed = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      subscribed[_key - 1] = arguments[_key];\n    }\n    if (subscribed.length > 0) {\n      subscribed.forEach(key => {\n        this.onStateChangedListeners.set(key, listener);\n      });\n    } else {\n      this.onStateChangedListeners.set('all', listener);\n    }\n  }\n  /**\n   * A promise that resolves once the client is ready\n   */\n  waitReady() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.waitReadyPromise;\n    });\n  }\n  /**\n   * Read state from storage\n   */\n  initFromStorage() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const preserved = yield this.storage.get(StorageKey.MATRIX_PRESERVED_STATE);\n      this.setState(preserved);\n    });\n  }\n  /**\n   * Prepare data before persisting it in storage\n   *\n   * @param toStore\n   */\n  prepareData(toStore) {\n    const requiresPreparation = ['rooms'];\n    const toStoreCopy = requiresPreparation.some(key => toStore[key] !== undefined) ? JSON.parse(JSON.stringify(toStore)) : toStore;\n    // there is no need for saving messages in a persistent storage\n    Object.values(toStoreCopy.rooms || {}).forEach(room => {\n      room.messages = [];\n    });\n    return toStoreCopy;\n  }\n  /**\n   * Persist state in storage\n   *\n   * @param stateUpdate\n   */\n  updateStorage(stateUpdate) {\n    const updatedCachedFields = Object.entries(stateUpdate).filter(_ref => {\n      let [key, value] = _ref;\n      return PRESERVED_FIELDS.includes(key) && Boolean(value);\n    });\n    if (updatedCachedFields.length > 0) {\n      const filteredState = {};\n      PRESERVED_FIELDS.forEach(key => {\n        filteredState[key] = this.state[key];\n      });\n      this.storage.set(StorageKey.MATRIX_PRESERVED_STATE, this.prepareData(filteredState));\n    }\n  }\n  /**\n   * Set the state\n   *\n   * @param partialState\n   */\n  setState(partialState) {\n    this.state = {\n      isRunning: partialState.isRunning || this.state.isRunning,\n      userId: partialState.userId || this.state.userId,\n      deviceId: partialState.deviceId || this.state.deviceId,\n      txnNo: partialState.txnNo || this.state.txnNo,\n      accessToken: partialState.accessToken || this.state.accessToken,\n      syncToken: partialState.syncToken || this.state.syncToken,\n      pollingTimeout: partialState.pollingTimeout || this.state.pollingTimeout,\n      pollingRetries: partialState.pollingRetries || this.state.pollingRetries,\n      rooms: this.mergeRooms(this.state.rooms, partialState.rooms)\n    };\n  }\n  /**\n   * Merge room records and eliminate duplicates\n   *\n   * @param oldRooms\n   * @param _newRooms\n   */\n  mergeRooms(oldRooms, _newRooms) {\n    if (!_newRooms) {\n      return oldRooms;\n    }\n    const newRooms = Array.isArray(_newRooms) ? _newRooms : Object.values(_newRooms);\n    const merged = Object.assign({}, oldRooms);\n    newRooms.forEach(newRoom => {\n      merged[newRoom.id] = MatrixRoom.merge(newRoom, oldRooms[newRoom.id]);\n    });\n    return merged;\n  }\n  /**\n   * Notify listeners of state changes\n   *\n   * @param oldState\n   * @param newState\n   * @param stateChange\n   */\n  notifyListeners(oldState, newState, stateChange) {\n    const listenForAll = this.onStateChangedListeners.get('all');\n    if (listenForAll) {\n      listenForAll(oldState, newState, stateChange);\n    }\n    keys(stateChange).filter(key => stateChange[key] !== undefined).forEach(key => {\n      const listener = this.onStateChangedListeners.get(key);\n      if (listener) {\n        listener(oldState, newState, stateChange);\n      }\n    });\n  }\n}","map":{"version":3,"names":["keys","MatrixRoom","MatrixRoomStatus","StorageKey","PRESERVED_FIELDS","MatrixClientStore","constructor","storage","state","isRunning","userId","undefined","deviceId","txnNo","accessToken","syncToken","pollingTimeout","pollingRetries","rooms","onStateChangedListeners","Map","waitReadyPromise","Promise","resolve","reject","__awaiter","initFromStorage","error","get","key","getRoom","roomOrId","room","from","UNKNOWN","id","update","stateUpdate","waitReady","oldState","Object","assign","setState","updateStorage","notifyListeners","onStateChanged","listener","_len","arguments","length","subscribed","Array","_key","forEach","set","preserved","MATRIX_PRESERVED_STATE","prepareData","toStore","requiresPreparation","toStoreCopy","some","JSON","parse","stringify","values","messages","updatedCachedFields","entries","filter","_ref","value","includes","Boolean","filteredState","partialState","mergeRooms","oldRooms","_newRooms","newRooms","isArray","merged","newRoom","merge","newState","stateChange","listenForAll"],"sources":["../../../src/matrix-client/MatrixClientStore.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}