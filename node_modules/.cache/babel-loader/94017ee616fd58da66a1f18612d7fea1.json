{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clientSessionKeys = exports.serverSessionKeys = exports.clientSessionKeysFromSharedKey = exports.serverSessionKeysFromSharedKey = exports.X25519Session = void 0;\n/**\n * Package x25519-session implements libsodium compatible session keys generation based on X25519 key agreement.\n */\nconst blake2b_1 = require(\"@stablelib/blake2b\");\nconst x25519_1 = require(\"@stablelib/x25519\");\nvar keyagreement_1 = require(\"./keyagreement\");\nObject.defineProperty(exports, \"X25519Session\", {\n  enumerable: true,\n  get: function () {\n    return keyagreement_1.X25519Session;\n  }\n});\nconst SESSION_KEY_LENGTH = 32;\n/**\n * Generates server-side session encryption keys from the shared key obtained during agreement phase.\n */\nfunction serverSessionKeysFromSharedKey(sharedKey, myPublicKey, theirPublicKey) {\n  let hash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : blake2b_1.BLAKE2b;\n  const state = new hash();\n  if (state.digestLength !== SESSION_KEY_LENGTH * 2) {\n    throw new Error(\"X25519: incorrect digest length\");\n  }\n  const h = state.update(sharedKey).update(theirPublicKey).update(myPublicKey).digest();\n  return {\n    send: h.subarray(0, SESSION_KEY_LENGTH),\n    receive: h.subarray(SESSION_KEY_LENGTH)\n  };\n}\nexports.serverSessionKeysFromSharedKey = serverSessionKeysFromSharedKey;\n/**\n * Generates client-side session encryption keys from the shared key obtained during agreement phase.\n */\nfunction clientSessionKeysFromSharedKey(sharedKey, myPublicKey, theirPublicKey) {\n  let hash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : blake2b_1.BLAKE2b;\n  const state = new hash();\n  if (state.digestLength !== SESSION_KEY_LENGTH * 2) {\n    throw new Error(\"X25519: incorrect digest length\");\n  }\n  const h = state.update(sharedKey).update(myPublicKey).update(theirPublicKey).digest();\n  return {\n    receive: h.subarray(0, SESSION_KEY_LENGTH),\n    send: h.subarray(SESSION_KEY_LENGTH)\n  };\n}\nexports.clientSessionKeysFromSharedKey = clientSessionKeysFromSharedKey;\n/**\n * Generates server-side session encryption keys. Uses a key pair and a peer's public key to generate the shared key.\n */\nfunction serverSessionKeys(myKeyPair, theirPublicKey) {\n  let hash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : blake2b_1.BLAKE2b;\n  const sk = (0, x25519_1.sharedKey)(myKeyPair.secretKey, theirPublicKey);\n  return serverSessionKeysFromSharedKey(sk, myKeyPair.publicKey, theirPublicKey, hash);\n}\nexports.serverSessionKeys = serverSessionKeys;\n/**\n * Generates client-side session encryption keys. Uses a key pair and a peer's public key to generate the shared key.\n */\nfunction clientSessionKeys(myKeyPair, theirPublicKey) {\n  let hash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : blake2b_1.BLAKE2b;\n  const sk = (0, x25519_1.sharedKey)(myKeyPair.secretKey, theirPublicKey);\n  return clientSessionKeysFromSharedKey(sk, myKeyPair.publicKey, theirPublicKey, hash);\n}\nexports.clientSessionKeys = clientSessionKeys;","map":{"version":3,"names":["blake2b_1","require","x25519_1","keyagreement_1","Object","defineProperty","exports","enumerable","get","X25519Session","SESSION_KEY_LENGTH","serverSessionKeysFromSharedKey","sharedKey","myPublicKey","theirPublicKey","hash","arguments","length","undefined","BLAKE2b","state","digestLength","Error","h","update","digest","send","subarray","receive","clientSessionKeysFromSharedKey","serverSessionKeys","myKeyPair","sk","secretKey","publicKey","clientSessionKeys"],"sources":["../x25519-session.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}