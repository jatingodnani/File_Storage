{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { BeaconMessageType, PermissionScope } from '@airgap/beacon-types';\nimport { getAccountIdentifier } from '../utils/get-account-identifier';\n/**\n * @internalapi\n *\n * The PermissionValidator is used to check if permissions for a certain message type have been given\n */\nexport class PermissionValidator {\n  /**\n   * Check if permissions were given for a certain message type.\n   *\n   * PermissionRequest and BroadcastRequest will always return true.\n   *\n   * @param message Beacon Message\n   */\n  static hasPermission(message, getOne, getAll) {\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (message.type) {\n        case BeaconMessageType.PermissionRequest:\n        case BeaconMessageType.BroadcastRequest:\n          {\n            return true;\n          }\n        case BeaconMessageType.OperationRequest:\n          {\n            const accountIdentifier = yield getAccountIdentifier(message.sourceAddress, message.network);\n            const permission = yield getOne(accountIdentifier);\n            if (!permission) {\n              return false;\n            }\n            return permission.scopes.includes(PermissionScope.OPERATION_REQUEST);\n          }\n        case BeaconMessageType.SignPayloadRequest:\n          {\n            const permissions = yield getAll();\n            const filteredPermissions = permissions.filter(permission => permission.address === message.sourceAddress);\n            if (filteredPermissions.length === 0) {\n              return false;\n            }\n            return filteredPermissions.some(permission => permission.scopes.includes(PermissionScope.SIGN));\n          }\n        default:\n          throw new Error('Message not handled');\n      }\n    });\n  }\n}","map":{"version":3,"names":["BeaconMessageType","PermissionScope","getAccountIdentifier","PermissionValidator","hasPermission","message","getOne","getAll","type","PermissionRequest","BroadcastRequest","OperationRequest","accountIdentifier","sourceAddress","network","permission","scopes","includes","OPERATION_REQUEST","SignPayloadRequest","permissions","filteredPermissions","filter","address","length","some","SIGN","Error"],"sources":["../../../src/managers/PermissionValidator.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAEEA,iBAAiB,EACjBC,eAAe,QAEV,sBAAsB;AAC7B,SAASC,oBAAoB,QAAQ,iCAAiC;AAEtE;;;;;AAKA,OAAM,MAAOC,mBAAmB;EAC9B;;;;;;;EAOO,OAAaC,aAAaA,CAC/BC,OAAsB,EACtBC,MAA6D,EAC7DC,MAAyC;;MAEzC,QAAQF,OAAO,CAACG,IAAI;QAClB,KAAKR,iBAAiB,CAACS,iBAAiB;QACxC,KAAKT,iBAAiB,CAACU,gBAAgB;UAAE;YACvC,OAAO,IAAI;;QAEb,KAAKV,iBAAiB,CAACW,gBAAgB;UAAE;YACvC,MAAMC,iBAAiB,GAAW,MAAMV,oBAAoB,CAC1DG,OAAO,CAACQ,aAAa,EACrBR,OAAO,CAACS,OAAO,CAChB;YAED,MAAMC,UAAU,GAAiC,MAAMT,MAAM,CAACM,iBAAiB,CAAC;YAChF,IAAI,CAACG,UAAU,EAAE;cACf,OAAO,KAAK;;YAGd,OAAOA,UAAU,CAACC,MAAM,CAACC,QAAQ,CAAChB,eAAe,CAACiB,iBAAiB,CAAC;;QAEtE,KAAKlB,iBAAiB,CAACmB,kBAAkB;UAAE;YACzC,MAAMC,WAAW,GAAuB,MAAMb,MAAM,EAAE;YACtD,MAAMc,mBAAmB,GAAuBD,WAAW,CAACE,MAAM,CAC/DP,UAA4B,IAAKA,UAAU,CAACQ,OAAO,KAAKlB,OAAO,CAACQ,aAAa,CAC/E;YAED,IAAIQ,mBAAmB,CAACG,MAAM,KAAK,CAAC,EAAE;cACpC,OAAO,KAAK;;YAGd,OAAOH,mBAAmB,CAACI,IAAI,CAAEV,UAA4B,IAC3DA,UAAU,CAACC,MAAM,CAACC,QAAQ,CAAChB,eAAe,CAACyB,IAAI,CAAC,CACjD;;QAEH;UACE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MAAA;IAE5C,CAAC"},"metadata":{},"sourceType":"module"}