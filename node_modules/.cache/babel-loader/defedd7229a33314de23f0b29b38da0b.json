{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { hash } from '@stablelib/blake2b';\nimport * as bs58check from 'bs58check';\n/**\r\n * @internalapi\r\n *\r\n * Generate a deterministic sender identifier based on a public key\r\n *\r\n * @param publicKey\r\n */\nexport const getSenderId = publicKey => __awaiter(void 0, void 0, void 0, function* () {\n  const buffer = Buffer.from(hash(Buffer.from(publicKey, 'hex'), 5));\n  return bs58check.encode(buffer);\n});","map":{"version":3,"names":["hash","bs58check","getSenderId","publicKey","__awaiter","buffer","Buffer","from","encode"],"sources":["../../../src/utils/get-sender-id.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,IAAI,QAAQ,oBAAoB;AACzC,OAAO,KAAKC,SAAS,MAAM,WAAW;AAEtC;;;;;;;AAOA,OAAO,MAAMC,WAAW,GAAUC,SAAiB,IAAqBC,SAAA;EACtE,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACP,IAAI,CAACM,MAAM,CAACC,IAAI,CAACJ,SAAS,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;EAElE,OAAOF,SAAS,CAACO,MAAM,CAACH,MAAM,CAAC;AACjC,CAAC"},"metadata":{},"sourceType":"module"}