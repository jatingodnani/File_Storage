{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { StorageManager } from './StorageManager';\n/**\n * @internalapi\n *\n * The PeerManager provides CRUD functionality for peer entities and persists them to the provided storage.\n */\nexport class PeerManager {\n  constructor(storage, key) {\n    this.storageManager = new StorageManager(storage, key);\n  }\n  hasPeer(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield this.getPeer(publicKey)) ? true : false;\n    });\n  }\n  getPeers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getAll();\n    });\n  }\n  getPeer(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.getOne(peer => peer.publicKey === publicKey);\n    });\n  }\n  addPeer(peerInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.addOne(peerInfo, peer => peer.publicKey === peerInfo.publicKey);\n    });\n  }\n  removePeer(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(peer => peer.publicKey === publicKey);\n    });\n  }\n  removePeers(publicKeys) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.remove(peer => publicKeys.includes(peer.publicKey));\n    });\n  }\n  removeAllPeers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.storageManager.removeAll();\n    });\n  }\n}","map":{"version":3,"names":["StorageManager","PeerManager","constructor","storage","key","storageManager","hasPeer","publicKey","getPeer","getPeers","getAll","getOne","peer","addPeer","peerInfo","addOne","removePeer","remove","removePeers","publicKeys","includes","removeAllPeers","removeAll"],"sources":["../../../src/managers/PeerManager.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,cAAc,QAAmB,kBAAkB;AAE5D;;;;;AAKA,OAAM,MAAOC,WAAW;EAStBC,YAAYC,OAAgB,EAAEC,GAAM;IAClC,IAAI,CAACC,cAAc,GAAG,IAAIL,cAAc,CAACG,OAAO,EAAEC,GAAG,CAAC;EACxD;EAEaE,OAAOA,CAACC,SAAiB;;MACpC,OAAO,CAAC,MAAM,IAAI,CAACC,OAAO,CAACD,SAAS,CAAC,IAAI,IAAI,GAAG,KAAK;IACvD,CAAC;;EAEYE,QAAQA,CAAA;;MACnB,OAAO,IAAI,CAACJ,cAAc,CAACK,MAAM,EAAE;IACrC,CAAC;;EAEYF,OAAOA,CAACD,SAAiB;;MACpC,OAAO,IAAI,CAACF,cAAc,CAACM,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACL,SAAS,KAAKA,SAAS,CAAC;IAC3E,CAAC;;EAEYM,OAAOA,CAACC,QAA4C;;MAC/D,OAAO,IAAI,CAACT,cAAc,CAACU,MAAM,CAACD,QAAQ,EAAGF,IAAI,IAAKA,IAAI,CAACL,SAAS,KAAKO,QAAQ,CAACP,SAAS,CAAC;IAC9F,CAAC;;EAEYS,UAAUA,CAACT,SAAiB;;MACvC,OAAO,IAAI,CAACF,cAAc,CAACY,MAAM,CAAEL,IAAI,IAAKA,IAAI,CAACL,SAAS,KAAKA,SAAS,CAAC;IAC3E,CAAC;;EAEYW,WAAWA,CAACC,UAAoB;;MAC3C,OAAO,IAAI,CAACd,cAAc,CAACY,MAAM,CAAEL,IAAI,IAAKO,UAAU,CAACC,QAAQ,CAACR,IAAI,CAACL,SAAS,CAAC,CAAC;IAClF,CAAC;;EAEYc,cAAcA,CAAA;;MACzB,OAAO,IAAI,CAAChB,cAAc,CAACiB,SAAS,EAAE;IACxC,CAAC"},"metadata":{},"sourceType":"module"}