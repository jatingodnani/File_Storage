{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { BEACON_VERSION } from '../../constants';\nimport { decryptCryptoboxPayload, encryptCryptoboxPayload, generateGUID, secretbox_NONCEBYTES, secretbox_MACBYTES } from '@airgap/beacon-utils';\nimport { CommunicationClient } from './CommunicationClient';\n/**\r\n * @internalapi\r\n *\r\n *\r\n */\nexport class MessageBasedClient extends CommunicationClient {\n  constructor(name, keyPair) {\n    super(keyPair);\n    this.name = name;\n    this.init().catch(console.error);\n  }\n  /**\r\n   * start the client and make sure all dependencies are ready\r\n   */\n  start() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield Promise.resolve();\n    });\n  }\n  /**\r\n   * Get the pairing request information. This will be shared with the peer during the connection setup\r\n   */\n  getPairingRequestInfo() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {\n        id: yield generateGUID(),\n        type: 'postmessage-pairing-request',\n        name: this.name,\n        version: BEACON_VERSION,\n        publicKey: yield this.getPublicKey()\n      };\n    });\n  }\n  /**\r\n   * Get the pairing response information. This will be shared with the peer during the connection setup\r\n   */\n  getPairingResponseInfo(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {\n        id: request.id,\n        type: 'postmessage-pairing-response',\n        name: this.name,\n        version: request.version,\n        publicKey: yield this.getPublicKey()\n      };\n    });\n  }\n  /**\r\n   * Unsubscribe from encrypted messages from a specific peer\r\n   *\r\n   * @param senderPublicKey\r\n   */\n  unsubscribeFromEncryptedMessage(senderPublicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const listener = this.activeListeners.get(senderPublicKey);\n      if (!listener) {\n        return;\n      }\n      this.activeListeners.delete(senderPublicKey);\n    });\n  }\n  /**\r\n   * Unsubscribe from all encrypted messages\r\n   */\n  unsubscribeFromEncryptedMessages() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.activeListeners.clear();\n    });\n  }\n  /**\r\n   * Decrypt a message from a specific peer\r\n   *\r\n   * @param senderPublicKey\r\n   * @param payload\r\n   */\n  decryptMessage(senderPublicKey, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const sharedKey = yield this.createCryptoBoxServer(senderPublicKey, this.keyPair);\n      const hexPayload = Buffer.from(payload, 'hex');\n      if (hexPayload.length >= secretbox_NONCEBYTES + secretbox_MACBYTES) {\n        try {\n          return yield decryptCryptoboxPayload(hexPayload, sharedKey.receive);\n        } catch (decryptionError) {\n          /* NO-OP. We try to decode every message, but some might not be addressed to us. */\n        }\n      }\n      throw new Error('Could not decrypt message');\n    });\n  }\n  /**\r\n   * Encrypt a message for a specific publicKey (receiver)\r\n   *\r\n   * @param recipientPublicKey\r\n   * @param message\r\n   */\n  encryptMessage(recipientPublicKey, message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const sharedKey = yield this.createCryptoBoxClient(recipientPublicKey, this.keyPair);\n      return encryptCryptoboxPayload(message, sharedKey.send);\n    });\n  }\n}","map":{"version":3,"names":["BEACON_VERSION","decryptCryptoboxPayload","encryptCryptoboxPayload","generateGUID","secretbox_NONCEBYTES","secretbox_MACBYTES","CommunicationClient","MessageBasedClient","constructor","name","keyPair","init","catch","console","error","start","Promise","resolve","getPairingRequestInfo","id","type","version","publicKey","getPublicKey","getPairingResponseInfo","request","unsubscribeFromEncryptedMessage","senderPublicKey","listener","activeListeners","get","delete","unsubscribeFromEncryptedMessages","clear","decryptMessage","payload","sharedKey","createCryptoBoxServer","hexPayload","Buffer","from","length","receive","decryptionError","Error","encryptMessage","recipientPublicKey","message","createCryptoBoxClient","send"],"sources":["../../../../src/transports/clients/MessageBasedClient.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,cAAc,QAAQ,iBAAiB;AAChD,SACEC,uBAAuB,EACvBC,uBAAuB,EACvBC,YAAY,EACZC,oBAAoB,EACpBC,kBAAkB,QACb,sBAAsB;AAC7B,SAASC,mBAAmB,QAAQ,uBAAuB;AAI3D;;;;;AAKA,OAAM,MAAgBC,kBAAmB,SAAQD,mBAAmB;EAMlEE,YAA+BC,IAAY,EAAEC,OAAgB;IAC3D,KAAK,CAACA,OAAO,CAAC;IADe,KAAAD,IAAI,GAAJA,IAAI;IAEjC,IAAI,CAACE,IAAI,EAAE,CAACC,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC;EAClC;EAEA;;;EAGaC,KAAKA,CAAA;;MAChB,MAAMC,OAAO,CAACC,OAAO,EAAE;IACzB,CAAC;;EAED;;;EAGaC,qBAAqBA,CAAA;;MAChC,OAAO;QACLC,EAAE,EAAE,MAAMhB,YAAY,EAAE;QACxBiB,IAAI,EAAE,6BAA6B;QACnCX,IAAI,EAAE,IAAI,CAACA,IAAI;QACfY,OAAO,EAAErB,cAAc;QACvBsB,SAAS,EAAE,MAAM,IAAI,CAACC,YAAY;OACnC;IACH,CAAC;;EAED;;;EAGaC,sBAAsBA,CACjCC,OAAkC;;MAElC,OAAO;QACLN,EAAE,EAAEM,OAAO,CAACN,EAAE;QACdC,IAAI,EAAE,8BAA8B;QACpCX,IAAI,EAAE,IAAI,CAACA,IAAI;QACfY,OAAO,EAAEI,OAAO,CAACJ,OAAO;QACxBC,SAAS,EAAE,MAAM,IAAI,CAACC,YAAY;OACnC;IACH,CAAC;;EAED;;;;;EAKaG,+BAA+BA,CAACC,eAAuB;;MAClE,MAAMC,QAAQ,GAAG,IAAI,CAACC,eAAe,CAACC,GAAG,CAACH,eAAe,CAAC;MAC1D,IAAI,CAACC,QAAQ,EAAE;QACb;;MAGF,IAAI,CAACC,eAAe,CAACE,MAAM,CAACJ,eAAe,CAAC;IAC9C,CAAC;;EAED;;;EAGaK,gCAAgCA,CAAA;;MAC3C,IAAI,CAACH,eAAe,CAACI,KAAK,EAAE;IAC9B,CAAC;;EAED;;;;;;EAMgBC,cAAcA,CAACP,eAAuB,EAAEQ,OAAe;;MACrE,MAAMC,SAAS,GAAG,MAAM,IAAI,CAACC,qBAAqB,CAACV,eAAe,EAAE,IAAI,CAACjB,OAAO,CAAC;MAEjF,MAAM4B,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACL,OAAO,EAAE,KAAK,CAAC;MAE9C,IAAIG,UAAU,CAACG,MAAM,IAAIrC,oBAAoB,GAAGC,kBAAkB,EAAE;QAClE,IAAI;UACF,OAAO,MAAMJ,uBAAuB,CAACqC,UAAU,EAAEF,SAAS,CAACM,OAAO,CAAC;SACpE,CAAC,OAAOC,eAAe,EAAE;UACxB;QAAA;;MAIJ,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IAC9C,CAAC;;EAED;;;;;;EAMgBC,cAAcA,CAACC,kBAA0B,EAAEC,OAAe;;MACxE,MAAMX,SAAS,GAAG,MAAM,IAAI,CAACY,qBAAqB,CAACF,kBAAkB,EAAE,IAAI,CAACpC,OAAO,CAAC;MAEpF,OAAOR,uBAAuB,CAAC6C,OAAO,EAAEX,SAAS,CAACa,IAAI,CAAC;IACzD,CAAC"},"metadata":{},"sourceType":"module"}