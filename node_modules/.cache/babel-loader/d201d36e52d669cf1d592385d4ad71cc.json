{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { windowRef, Serializer, getSenderId, MessageBasedClient } from '@airgap/beacon-core';\nimport { openCryptobox, secretbox_NONCEBYTES, secretbox_MACBYTES } from '@airgap/beacon-utils';\nimport { ExtensionMessageTarget, Origin } from '@airgap/beacon-types';\n/**\n * @internalapi\n *\n *\n */\nexport class PostMessageClient extends MessageBasedClient {\n  constructor() {\n    super(...arguments);\n    this.activeListeners = new Map();\n  }\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.subscribeToMessages().catch(console.error);\n    });\n  }\n  listenForEncryptedMessage(senderPublicKey, messageCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.activeListeners.has(senderPublicKey)) {\n        return;\n      }\n      const callbackFunction = (message, context) => __awaiter(this, void 0, void 0, function* () {\n        try {\n          const decryptedMessage = yield this.decryptMessage(senderPublicKey, message.encryptedPayload);\n          // console.log('calculated sender ID', await getSenderId(senderPublicKey))\n          // TODO: Add check for correct decryption key / sender ID\n          messageCallback(decryptedMessage, context);\n        } catch (decryptionError) {\n          /* NO-OP. We try to decode every message, but some might not be addressed to us. */\n        }\n      });\n      this.activeListeners.set(senderPublicKey, callbackFunction);\n    });\n  }\n  sendMessage(message, peer) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const payload = yield this.encryptMessage(peer.publicKey, message);\n      const targetId = peer === null || peer === void 0 ? void 0 : peer.extensionId;\n      // if no targetId, we remove peer\n      const msg = {\n        target: ExtensionMessageTarget.EXTENSION,\n        encryptedPayload: payload,\n        targetId\n      };\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      windowRef.postMessage(msg, windowRef.location.origin);\n    });\n  }\n  listenForChannelOpening(messageCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const fn = event => __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        if (event.source !== windowRef || event.origin !== windowRef.location.origin) {\n          // TODO: Add to error handler: console.debug('[Beacon]: Event received from untrusted origin')\n          return;\n        }\n        const data = (_a = event === null || event === void 0 ? void 0 : event.data) === null || _a === void 0 ? void 0 : _a.message;\n        if (data && data.target === ExtensionMessageTarget.PAGE && (yield this.isChannelOpenMessage(data))) {\n          const payload = Buffer.from(data.payload, 'hex');\n          if (payload.length >= secretbox_NONCEBYTES + secretbox_MACBYTES) {\n            try {\n              const pairingResponse = JSON.parse(yield openCryptobox(payload, this.keyPair.publicKey, this.keyPair.secretKey));\n              messageCallback(Object.assign(Object.assign({}, pairingResponse), {\n                senderId: yield getSenderId(pairingResponse.publicKey),\n                extensionId: (_b = event === null || event === void 0 ? void 0 : event.data) === null || _b === void 0 ? void 0 : _b.sender.id\n              }));\n            } catch (decryptionError) {\n              /* NO-OP. We try to decode every message, but some might not be addressed to us. */\n            }\n          }\n        }\n      });\n      windowRef.addEventListener('message', fn);\n    });\n  }\n  sendPairingRequest(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const message = {\n        target: ExtensionMessageTarget.EXTENSION,\n        payload: yield new Serializer().serialize(yield this.getPairingRequestInfo()),\n        targetId: id\n      };\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      windowRef.postMessage(message, windowRef.location.origin);\n    });\n  }\n  isChannelOpenMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return typeof message === 'object' && message.hasOwnProperty('payload');\n    });\n  }\n  subscribeToMessages() {\n    return __awaiter(this, void 0, void 0, function* () {\n      windowRef.addEventListener('message', message => {\n        if (message.source !== windowRef || message.origin !== windowRef.location.origin) {\n          // TODO: Add to error handler: console.debug('[Beacon]: Event received from untrusted origin')\n          return;\n        }\n        if (typeof message === 'object' && message) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const data = message.data;\n          if (data.message && data.message.target === ExtensionMessageTarget.PAGE) {\n            this.activeListeners.forEach(listener => {\n              listener(data.message, {\n                origin: Origin.EXTENSION,\n                id: data.sender.id || ''\n              });\n            });\n          }\n        }\n      });\n    });\n  }\n}","map":{"version":3,"names":["windowRef","Serializer","getSenderId","MessageBasedClient","openCryptobox","secretbox_NONCEBYTES","secretbox_MACBYTES","ExtensionMessageTarget","Origin","PostMessageClient","constructor","activeListeners","Map","init","subscribeToMessages","catch","console","error","listenForEncryptedMessage","senderPublicKey","messageCallback","has","callbackFunction","message","context","__awaiter","decryptedMessage","decryptMessage","encryptedPayload","decryptionError","set","sendMessage","peer","payload","encryptMessage","publicKey","targetId","extensionId","msg","target","EXTENSION","postMessage","location","origin","listenForChannelOpening","fn","event","source","data","_a","PAGE","isChannelOpenMessage","Buffer","from","length","pairingResponse","JSON","parse","keyPair","secretKey","Object","assign","senderId","_b","sender","id","addEventListener","sendPairingRequest","serialize","getPairingRequestInfo","hasOwnProperty","forEach","listener"],"sources":["../../src/PostMessageClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}