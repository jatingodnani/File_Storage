{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport * as bs58check from 'bs58check';\nimport { box, generateKeyPair, openBox, openSecretBox, secretBox } from '@stablelib/nacl';\nimport { randomBytes } from '@stablelib/random';\nimport { encode } from '@stablelib/utf8';\nimport { hash } from '@stablelib/blake2b';\nimport { generateKeyPairFromSeed } from '@stablelib/ed25519';\nimport { convertPublicKeyToX25519, convertSecretKeyToX25519 } from '@stablelib/ed25519';\nimport { BLAKE2b } from '@stablelib/blake2b';\nimport { concat } from '@stablelib/bytes';\nimport { sign } from '@stablelib/ed25519';\nexport const secretbox_NONCEBYTES = 24; // crypto_secretbox_NONCEBYTES\nexport const secretbox_MACBYTES = 16; // crypto_secretbox_MACBYTES\n/* eslint-disable prefer-arrow/prefer-arrow-functions */\n/**\r\n * Convert a value to hex\r\n *\r\n * @param value\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function toHex(value) {\n  return Buffer.from(value).toString('hex');\n}\n/**\r\n * Get the hex hash of a value\r\n *\r\n * @param key\r\n */\nexport function getHexHash(key) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (typeof key === 'string') {\n      return toHex(hash(encode(key), 32));\n    }\n    return toHex(hash(key, 32));\n  });\n}\n/**\r\n * Get a keypair from a seed\r\n *\r\n * @param seed\r\n */\nexport function getKeypairFromSeed(seed) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return generateKeyPairFromSeed(hash(encode(seed), 32));\n  });\n}\n/**\r\n * Encrypt a message with a shared key\r\n *\r\n * @param message\r\n * @param sharedKey\r\n */\nexport function encryptCryptoboxPayload(message, sharedKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const nonce = Buffer.from(randomBytes(secretbox_NONCEBYTES));\n    const combinedPayload = Buffer.concat([nonce, Buffer.from(secretBox(sharedKey, nonce, Buffer.from(message, 'utf8')))]);\n    return toHex(combinedPayload);\n  });\n}\n/**\r\n * Decrypt a message with a shared key\r\n *\r\n * @param payload\r\n * @param sharedKey\r\n */\nexport function decryptCryptoboxPayload(payload, sharedKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const nonce = payload.slice(0, secretbox_NONCEBYTES);\n    const ciphertext = payload.slice(secretbox_NONCEBYTES);\n    const openBox = openSecretBox(sharedKey, nonce, ciphertext);\n    if (!openBox) {\n      throw new Error('Decryption failed');\n    }\n    return Buffer.from(openBox).toString('utf8');\n  });\n}\n/**\r\n * Encrypt a message with a public key\r\n *\r\n * @param payload\r\n * @param publicKey\r\n */\nexport function sealCryptobox(payload, otherPublicKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const kxOtherPublicKey = convertPublicKeyToX25519(Buffer.from(otherPublicKey)); // Secret bytes to scalar bytes\n    const keypair = generateKeyPair();\n    const state = new BLAKE2b(24);\n    const nonce = state.update(keypair.publicKey, 32).update(kxOtherPublicKey, 32).digest();\n    const bytesPayload = typeof payload === 'string' ? encode(payload) : payload;\n    const encryptedMessage = box(kxOtherPublicKey, keypair.secretKey, nonce, bytesPayload);\n    return toHex(concat(keypair.publicKey, encryptedMessage));\n  });\n}\n/**\r\n * Decrypt a message with public + private key\r\n *\r\n * @param encryptedPayload\r\n * @param publicKey\r\n * @param privateKey\r\n */\nexport function openCryptobox(encryptedPayload, publicKey, privateKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const kxSelfPrivateKey = convertSecretKeyToX25519(Buffer.from(privateKey)); // Secret bytes to scalar bytes\n    const kxSelfPublicKey = convertPublicKeyToX25519(Buffer.from(publicKey)); // Secret bytes to scalar bytes\n    const bytesPayload = typeof encryptedPayload === 'string' ? encode(encryptedPayload) : encryptedPayload;\n    const epk = bytesPayload.slice(0, 32);\n    const ciphertext = bytesPayload.slice(32);\n    const state = new BLAKE2b(24);\n    const nonce = state.update(epk, 32).update(kxSelfPublicKey, 32).digest();\n    const decryptedMessage2 = openBox(epk, kxSelfPrivateKey, nonce, ciphertext);\n    if (!decryptedMessage2) {\n      throw new Error('Decryption failed');\n    }\n    return Buffer.from(decryptedMessage2).toString();\n  });\n}\n/**\r\n * Get an address from the public key\r\n *\r\n * @param publicKey\r\n */\nexport function getAddressFromPublicKey(publicKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const prefixes = {\n      // tz1...\n      edpk: {\n        length: 54,\n        prefix: Buffer.from(new Uint8Array([6, 161, 159]))\n      },\n      // tz2...\n      sppk: {\n        length: 55,\n        prefix: Buffer.from(new Uint8Array([6, 161, 161]))\n      },\n      // tz3...\n      p2pk: {\n        length: 55,\n        prefix: Buffer.from(new Uint8Array([6, 161, 164]))\n      }\n    };\n    let prefix;\n    let plainPublicKey;\n    if (publicKey.length === 64) {\n      prefix = prefixes.edpk.prefix;\n      plainPublicKey = publicKey;\n    } else {\n      const entries = Object.entries(prefixes);\n      for (let index = 0; index < entries.length; index++) {\n        const [key, value] = entries[index];\n        if (publicKey.startsWith(key) && publicKey.length === value.length) {\n          prefix = value.prefix;\n          const decoded = bs58check.decode(publicKey);\n          plainPublicKey = decoded.slice(key.length, decoded.length).toString('hex');\n          break;\n        }\n      }\n    }\n    if (!prefix || !plainPublicKey) {\n      throw new Error(`invalid publicKey: ${publicKey}`);\n    }\n    const payload = hash(Buffer.from(plainPublicKey, 'hex'), 20);\n    return bs58check.encode(Buffer.concat([prefix, Buffer.from(payload)]));\n  });\n}\n/**\r\n * Get the recipient string used in the matrix message\r\n *\r\n * @param recipientHash\r\n * @param relayServer\r\n */\nexport function recipientString(recipientHash, relayServer) {\n  return `@${recipientHash}:${relayServer}`;\n}\nconst toBuffer = message => __awaiter(void 0, void 0, void 0, function* () {\n  if (message.length % 2 !== 0) {\n    return encode(message);\n  }\n  let adjustedMessage = message;\n  if (message.startsWith('0x')) {\n    adjustedMessage = message.slice(2);\n  }\n  const buffer = Buffer.from(adjustedMessage, 'hex');\n  if (buffer.length === adjustedMessage.length / 2) {\n    return buffer;\n  }\n  return encode(message);\n});\nconst coinlibhash = function (message) {\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    return hash(message, size);\n  });\n};\nexport const signMessage = (message, keypair) => __awaiter(void 0, void 0, void 0, function* () {\n  const bufferMessage = yield toBuffer(message);\n  const edsigPrefix = new Uint8Array([9, 245, 205, 134, 18]);\n  const hash = yield coinlibhash(bufferMessage);\n  const rawSignature = sign(keypair.secretKey, hash);\n  const signature = bs58check.encode(Buffer.concat([Buffer.from(edsigPrefix), Buffer.from(rawSignature)]));\n  return signature;\n});\n/* eslint-enable prefer-arrow/prefer-arrow-functions */","map":{"version":3,"names":["bs58check","box","generateKeyPair","openBox","openSecretBox","secretBox","randomBytes","encode","hash","generateKeyPairFromSeed","convertPublicKeyToX25519","convertSecretKeyToX25519","BLAKE2b","concat","sign","secretbox_NONCEBYTES","secretbox_MACBYTES","toHex","value","Buffer","from","toString","getHexHash","key","getKeypairFromSeed","seed","encryptCryptoboxPayload","message","sharedKey","nonce","combinedPayload","decryptCryptoboxPayload","payload","slice","ciphertext","Error","sealCryptobox","otherPublicKey","kxOtherPublicKey","keypair","state","update","publicKey","digest","bytesPayload","encryptedMessage","secretKey","openCryptobox","encryptedPayload","privateKey","kxSelfPrivateKey","kxSelfPublicKey","epk","decryptedMessage2","getAddressFromPublicKey","prefixes","edpk","length","prefix","Uint8Array","sppk","p2pk","plainPublicKey","entries","Object","index","startsWith","decoded","decode","recipientString","recipientHash","relayServer","toBuffer","__awaiter","adjustedMessage","buffer","coinlibhash","size","arguments","undefined","signMessage","bufferMessage","edsigPrefix","rawSignature","signature"],"sources":["../../../src/utils/crypto.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}