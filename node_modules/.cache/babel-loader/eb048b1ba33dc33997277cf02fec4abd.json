{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ExposedPromise } from '@airgap/beacon-utils';\nimport { getKeypairFromSeed, toHex, generateGUID } from '@airgap/beacon-utils';\nimport { StorageKey } from '@airgap/beacon-types';\nimport { SDK_VERSION } from '../../constants';\nimport { windowRef } from '../../MockWindow';\n/**\r\n * @internalapi\r\n *\r\n * The beacon client is an abstract client that handles everything that is shared between all other clients.\r\n * Specifically, it handles managing the beaconId and and the local keypair.\r\n */\nexport class BeaconClient {\n  constructor(config) {\n    /** The beaconId is a public key that is used to identify one specific application (dapp or wallet).\r\n     * This is used inside a message to specify the sender, for example.\r\n     */\n    this._beaconId = new ExposedPromise();\n    /**\r\n     * The local keypair that is used for the communication encryption\r\n     */\n    this._keyPair = new ExposedPromise();\n    if (!config.name) {\n      throw new Error('Name not set');\n    }\n    if (!config.storage) {\n      throw new Error('Storage not set');\n    }\n    this.name = config.name;\n    this.iconUrl = config.iconUrl;\n    this.appUrl = config.appUrl;\n    this.storage = config.storage;\n    // TODO: This is a temporary \"workaround\" to prevent users from creating multiple Client instances\n    if (windowRef.beaconCreatedClientInstance) {\n      console.error('[BEACON] It looks like you created multiple Beacon SDK Client instances. This can lead to problems. Only create one instance and re-use it everywhere.');\n    } else {\n      ;\n      windowRef.beaconCreatedClientInstance = true;\n    }\n    this.initSDK().catch(console.error);\n  }\n  get beaconId() {\n    return this._beaconId.promise;\n  }\n  get keyPair() {\n    return this._keyPair.promise;\n  }\n  /**\r\n   * This resets the SDK. After using this method, this instance is no longer usable. You will have to instanciate a new client.\r\n   */\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.removeBeaconEntriesFromStorage();\n      windowRef.beaconCreatedClientInstance = false;\n    });\n  }\n  /**\r\n   * This method initializes the SDK by setting some values in the storage and generating a keypair.\r\n   */\n  initSDK() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.storage.set(StorageKey.BEACON_SDK_VERSION, SDK_VERSION).catch(console.error);\n      this.loadOrCreateBeaconSecret().catch(console.error);\n      return this.keyPair.then(keyPair => {\n        this._beaconId.resolve(toHex(keyPair.publicKey));\n      });\n    });\n  }\n  /**\r\n   * Removes all beacon values from the storage.\r\n   */\n  removeBeaconEntriesFromStorage() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const allKeys = Object.values(StorageKey);\n      yield Promise.all(allKeys.map(key => this.storage.delete(key)));\n    });\n  }\n  /**\r\n   * This method tries to load the seed from storage, if it doesn't exist, a new one will be created and persisted.\r\n   */\n  loadOrCreateBeaconSecret() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storageValue = yield this.storage.get(StorageKey.BEACON_SDK_SECRET_SEED);\n      if (storageValue && typeof storageValue === 'string') {\n        this._keyPair.resolve(yield getKeypairFromSeed(storageValue));\n      } else {\n        const key = yield generateGUID();\n        yield this.storage.set(StorageKey.BEACON_SDK_SECRET_SEED, key);\n        this._keyPair.resolve(yield getKeypairFromSeed(key));\n      }\n    });\n  }\n}","map":{"version":3,"names":["ExposedPromise","getKeypairFromSeed","toHex","generateGUID","StorageKey","SDK_VERSION","windowRef","BeaconClient","constructor","config","_beaconId","_keyPair","name","Error","storage","iconUrl","appUrl","beaconCreatedClientInstance","console","error","initSDK","catch","beaconId","promise","keyPair","destroy","removeBeaconEntriesFromStorage","set","BEACON_SDK_VERSION","loadOrCreateBeaconSecret","then","resolve","publicKey","allKeys","Object","values","Promise","all","map","key","delete","storageValue","get","BEACON_SDK_SECRET_SEED"],"sources":["../../../../src/clients/beacon-client/BeaconClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}