{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { TransportStatus, StorageKey } from '@airgap/beacon-types';\nimport { Logger } from '@airgap/beacon-core';\nimport { PostMessageTransport } from '@airgap/beacon-transport-postmessage';\nconst logger = new Logger('DappPostMessageTransport');\n/**\n * @internalapi\n *\n *\n */\nexport class DappPostMessageTransport extends PostMessageTransport {\n  constructor(name, keyPair, storage) {\n    super(name, keyPair, storage, StorageKey.TRANSPORT_POSTMESSAGE_PEERS_DAPP);\n  }\n  startOpenChannelListener() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.client.listenForChannelOpening(peer => __awaiter(this, void 0, void 0, function* () {\n        logger.log('connect', `received PostMessagePairingResponse`, peer);\n        yield this.addPeer(peer);\n        this._isConnected = TransportStatus.CONNECTED;\n        if (this.newPeerListener) {\n          this.newPeerListener(peer);\n          this.newPeerListener = undefined; // TODO: Remove this once we use the id\n        }\n      }));\n    });\n  }\n\n  listenForNewPeer(newPeerListener) {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('listenForNewPeer');\n      this.newPeerListener = newPeerListener;\n    });\n  }\n  stopListeningForNewPeers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('stopListeningForNewPeers');\n      this.newPeerListener = undefined;\n    });\n  }\n}","map":{"version":3,"names":["TransportStatus","StorageKey","Logger","PostMessageTransport","logger","DappPostMessageTransport","constructor","name","keyPair","storage","TRANSPORT_POSTMESSAGE_PEERS_DAPP","startOpenChannelListener","client","listenForChannelOpening","peer","__awaiter","log","addPeer","_isConnected","CONNECTED","newPeerListener","undefined","listenForNewPeer","stopListeningForNewPeers"],"sources":["../../../src/transports/DappPostMessageTransport.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,eAAe,EACfC,UAAU,QAGL,sBAAsB;AAC7B,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,oBAAoB,QAAQ,sCAAsC;AAG3E,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAAC,0BAA0B,CAAC;AAErD;;;;;AAKA,OAAM,MAAOG,wBAAyB,SAAQF,oBAG7C;EACCG,YAAYC,IAAY,EAAEC,OAAgB,EAAEC,OAAgB;IAC1D,KAAK,CAACF,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAER,UAAU,CAACS,gCAAgC,CAAC;EAC5E;EAEaC,wBAAwBA,CAAA;;MACnC,OAAO,IAAI,CAACC,MAAM,CAACC,uBAAuB,CAAQC,IAAwC,IAAIC,SAAA;QAC5FX,MAAM,CAACY,GAAG,CAAC,SAAS,EAAE,qCAAqC,EAAEF,IAAI,CAAC;QAElE,MAAM,IAAI,CAACG,OAAO,CAACH,IAAI,CAAC;QAExB,IAAI,CAACI,YAAY,GAAGlB,eAAe,CAACmB,SAAS;QAE7C,IAAI,IAAI,CAACC,eAAe,EAAE;UACxB,IAAI,CAACA,eAAe,CAACN,IAAI,CAAC;UAC1B,IAAI,CAACM,eAAe,GAAGC,SAAS,EAAC;;MAErC,CAAC,EAAC;IACJ,CAAC;;;EAEYC,gBAAgBA,CAC3BF,eAAmE;;MAEnEhB,MAAM,CAACY,GAAG,CAAC,kBAAkB,CAAC;MAC9B,IAAI,CAACI,eAAe,GAAGA,eAAe;IACxC,CAAC;;EAEYG,wBAAwBA,CAAA;;MACnCnB,MAAM,CAACY,GAAG,CAAC,0BAA0B,CAAC;MACtC,IAAI,CAACI,eAAe,GAAGC,SAAS;IAClC,CAAC"},"metadata":{},"sourceType":"module"}