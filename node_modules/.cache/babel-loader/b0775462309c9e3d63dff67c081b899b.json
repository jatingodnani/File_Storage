{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport axios from 'axios';\nimport { keys } from '@airgap/beacon-utils';\nimport { Logger } from '@airgap/beacon-core';\nconst logger = new Logger('MatrixHttpClient');\nconst CLIENT_API_R0 = '/_matrix/client/r0';\n/**\n * Handling the HTTP connection to the matrix synapse node\n */\nexport class MatrixHttpClient {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n    this.cancelTokenSource = axios.CancelToken.source();\n  }\n  /**\n   * Get data from the synapse node\n   *\n   * @param endpoint\n   * @param options\n   */\n  get(endpoint, params, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.send('GET', endpoint, options, params);\n    });\n  }\n  /**\n   * Post data to the synapse node\n   *\n   * @param endpoint\n   * @param body\n   * @param options\n   * @param params\n   */\n  post(endpoint, body, options, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.send('POST', endpoint, options, params, body);\n    });\n  }\n  /**\n   * Put data to the synapse node\n   *\n   * @param endpoint\n   * @param body\n   * @param options\n   * @param params\n   */\n  put(endpoint, body, options, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.send('PUT', endpoint, options, params, body);\n    });\n  }\n  cancelAllRequests() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.cancelTokenSource.cancel('Manually cancelled');\n    });\n  }\n  /**\n   * Send a request to the synapse node\n   *\n   * @param method\n   * @param endpoint\n   * @param config\n   * @param requestParams\n   * @param data\n   */\n  send(method, endpoint, config, requestParams, data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const headers = config ? this.getHeaders(config) : undefined;\n      const params = requestParams ? this.getParams(requestParams) : undefined;\n      let response;\n      try {\n        response = yield axios.request({\n          method,\n          url: endpoint,\n          baseURL: this.apiUrl(CLIENT_API_R0),\n          headers,\n          data,\n          params,\n          cancelToken: this.cancelTokenSource.token\n        });\n      } catch (error) {\n        const axiosError = error;\n        logger.error('send', axiosError.code, axiosError.message, axiosError.response.data);\n        throw error.response.data;\n      }\n      return response.data;\n    });\n  }\n  /**\n   * Get the headers based on the options object\n   *\n   * @param options\n   */\n  getHeaders(options) {\n    const headers = {};\n    const entries = [];\n    if (options.accessToken) {\n      entries.push(['Authorization', `Bearer ${options.accessToken}`]);\n    }\n    if (entries.length === 0) {\n      return undefined;\n    }\n    for (const [key, value] of entries) {\n      headers[key] = value;\n    }\n    return headers;\n  }\n  /**\n   * Get parameters\n   *\n   * @param _params\n   */\n  getParams(_params) {\n    if (!_params) {\n      return undefined;\n    }\n    const params = Object.assign(_params, {});\n    keys(params).forEach(key => params[key] === undefined && delete params[key]);\n    return params;\n  }\n  /**\n   * Construct API URL\n   */\n  apiUrl() {\n    const apiBase = this.baseUrl.endsWith('/') ? this.baseUrl.substr(0, this.baseUrl.length - 1) : this.baseUrl;\n    for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {\n      parts[_key] = arguments[_key];\n    }\n    const apiParts = parts.map(path => path.startsWith('/') ? path.substr(1) : path);\n    return [apiBase, ...apiParts].join('/');\n  }\n}","map":{"version":3,"names":["axios","keys","Logger","logger","CLIENT_API_R0","MatrixHttpClient","constructor","baseUrl","cancelTokenSource","CancelToken","source","get","endpoint","params","options","send","post","body","put","cancelAllRequests","cancel","method","config","requestParams","data","headers","getHeaders","undefined","getParams","response","request","url","baseURL","apiUrl","cancelToken","token","error","axiosError","code","message","entries","accessToken","push","length","key","value","_params","Object","assign","forEach","apiBase","endsWith","substr","_len","arguments","parts","Array","_key","apiParts","map","path","startsWith","join"],"sources":["../../../src/matrix-client/MatrixHttpClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}