{"ast":null,"code":"import { isCreateEvent, isJoinEvent, isMessageEvent } from '../utils/events';\nimport { MatrixMessage } from './MatrixMessage';\nexport var MatrixRoomStatus;\n(function (MatrixRoomStatus) {\n  MatrixRoomStatus[MatrixRoomStatus[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  MatrixRoomStatus[MatrixRoomStatus[\"JOINED\"] = 1] = \"JOINED\";\n  MatrixRoomStatus[MatrixRoomStatus[\"INVITED\"] = 2] = \"INVITED\";\n  MatrixRoomStatus[MatrixRoomStatus[\"LEFT\"] = 3] = \"LEFT\";\n})(MatrixRoomStatus || (MatrixRoomStatus = {}));\nexport class MatrixRoom {\n  constructor(id) {\n    let status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MatrixRoomStatus.UNKNOWN;\n    let members = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let messages = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    this.id = id;\n    this.status = status;\n    this.members = members;\n    this.messages = messages;\n  }\n  /**\r\n   * Reconstruct rooms from a sync response\r\n   *\r\n   * @param roomSync\r\n   */\n  static fromSync(roomSync) {\n    var _a, _b, _c;\n    if (!roomSync) {\n      return [];\n    }\n    function create(rooms, creator) {\n      return Object.entries(rooms).map(_ref => {\n        let [id, room] = _ref;\n        return creator(id, room);\n      });\n    }\n    return [...create((_a = roomSync.join) !== null && _a !== void 0 ? _a : {}, MatrixRoom.fromJoined), ...create((_b = roomSync.invite) !== null && _b !== void 0 ? _b : {}, MatrixRoom.fromInvited), ...create((_c = roomSync.leave) !== null && _c !== void 0 ? _c : {}, MatrixRoom.fromLeft)];\n  }\n  /**\r\n   * Reconstruct a room from an ID or object\r\n   *\r\n   * @param roomOrId\r\n   * @param status\r\n   */\n  static from(roomOrId, status) {\n    return typeof roomOrId === 'string' ? new MatrixRoom(roomOrId, status || MatrixRoomStatus.UNKNOWN) : status !== undefined ? new MatrixRoom(roomOrId.id, status, roomOrId.members, roomOrId.messages) : roomOrId;\n  }\n  /**\r\n   * Merge new and old state and remove duplicates\r\n   *\r\n   * @param newState\r\n   * @param previousState\r\n   */\n  static merge(newState, previousState) {\n    if (!previousState || previousState.id !== newState.id) {\n      return MatrixRoom.from(newState);\n    }\n    return new MatrixRoom(newState.id, newState.status, [...previousState.members, ...newState.members].filter((member, index, array) => array.indexOf(member) === index), [...previousState.messages, ...newState.messages]);\n  }\n  /**\r\n   * Create a room from a join\r\n   *\r\n   * @param id\r\n   * @param joined\r\n   */\n  static fromJoined(id, joined) {\n    const events = [...joined.state.events, ...joined.timeline.events];\n    const members = MatrixRoom.getMembersFromEvents(events);\n    const messages = MatrixRoom.getMessagesFromEvents(events);\n    return new MatrixRoom(id, MatrixRoomStatus.JOINED, members, messages);\n  }\n  /**\r\n   * Create a room from an invite\r\n   *\r\n   * @param id\r\n   * @param invited\r\n   */\n  static fromInvited(id, invited) {\n    const members = MatrixRoom.getMembersFromEvents(invited.invite_state.events);\n    return new MatrixRoom(id, MatrixRoomStatus.INVITED, members);\n  }\n  /**\r\n   * Create a room from a leave\r\n   *\r\n   * @param id\r\n   * @param left\r\n   */\n  static fromLeft(id, left) {\n    const events = [...left.state.events, ...left.timeline.events];\n    const members = MatrixRoom.getMembersFromEvents(events);\n    const messages = MatrixRoom.getMessagesFromEvents(events);\n    return new MatrixRoom(id, MatrixRoomStatus.LEFT, members, messages);\n  }\n  /**\r\n   * Extract members from an event\r\n   *\r\n   * @param events\r\n   */\n  static getMembersFromEvents(events) {\n    return MatrixRoom.getUniqueEvents(events.filter(event => isCreateEvent(event) || isJoinEvent(event))).map(event => event.sender).filter((member, index, array) => array.indexOf(member) === index);\n  }\n  /**\r\n   * Extract messages from an event\r\n   *\r\n   * @param events\r\n   */\n  static getMessagesFromEvents(events) {\n    return MatrixRoom.getUniqueEvents(events.filter(isMessageEvent)).map(event => MatrixMessage.from(event)).filter(Boolean);\n  }\n  /**\r\n   * Get unique events and remove duplicates\r\n   *\r\n   * @param events\r\n   */\n  static getUniqueEvents(events) {\n    const eventIds = {};\n    const uniqueEvents = [];\n    events.forEach((event, index) => {\n      const eventId = event.event_id;\n      if (eventId === undefined || !(eventId in eventIds)) {\n        if (eventId !== undefined) {\n          eventIds[eventId] = index;\n        }\n        uniqueEvents.push(event);\n      }\n    });\n    return uniqueEvents;\n  }\n}","map":{"version":3,"names":["isCreateEvent","isJoinEvent","isMessageEvent","MatrixMessage","MatrixRoomStatus","MatrixRoom","constructor","id","status","arguments","length","undefined","UNKNOWN","members","messages","fromSync","roomSync","create","rooms","creator","Object","entries","map","_ref","room","_a","join","fromJoined","_b","invite","fromInvited","_c","leave","fromLeft","from","roomOrId","merge","newState","previousState","filter","member","index","array","indexOf","joined","events","state","timeline","getMembersFromEvents","getMessagesFromEvents","JOINED","invited","invite_state","INVITED","left","LEFT","getUniqueEvents","event","sender","Boolean","eventIds","uniqueEvents","forEach","eventId","event_id","push"],"sources":["../../../../src/matrix-client/models/MatrixRoom.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}