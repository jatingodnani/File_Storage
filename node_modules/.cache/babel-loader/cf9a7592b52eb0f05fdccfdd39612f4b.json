{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { toHex, getHexHash, sealCryptobox } from '@airgap/beacon-utils';\nimport { convertPublicKeyToX25519, convertSecretKeyToX25519 } from '@stablelib/ed25519';\nimport { clientSessionKeys, serverSessionKeys } from '@stablelib/x25519-session';\n/**\r\n * @internalapi\r\n *\r\n *\r\n */\nexport class CommunicationClient {\n  constructor(keyPair) {\n    this.keyPair = keyPair;\n  }\n  /**\r\n   * Get the public key\r\n   */\n  getPublicKey() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return toHex(this.keyPair.publicKey);\n    });\n  }\n  /**\r\n   * get the public key hash\r\n   */\n  getPublicKeyHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return getHexHash(this.keyPair.publicKey);\n    });\n  }\n  /**\r\n   * Create a cryptobox server\r\n   *\r\n   * @param otherPublicKey\r\n   * @param selfKeypair\r\n   */\n  createCryptoBoxServer(otherPublicKey, selfKeypair) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return serverSessionKeys({\n        publicKey: convertPublicKeyToX25519(selfKeypair.publicKey),\n        secretKey: convertSecretKeyToX25519(selfKeypair.secretKey)\n      }, convertPublicKeyToX25519(Buffer.from(otherPublicKey, 'hex')));\n    });\n  }\n  /**\r\n   * Create a cryptobox client\r\n   *\r\n   * @param otherPublicKey\r\n   * @param selfKeypair\r\n   */\n  createCryptoBoxClient(otherPublicKey, selfKeypair) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return clientSessionKeys({\n        publicKey: convertPublicKeyToX25519(selfKeypair.publicKey),\n        secretKey: convertSecretKeyToX25519(selfKeypair.secretKey)\n      }, convertPublicKeyToX25519(Buffer.from(otherPublicKey, 'hex')));\n    });\n  }\n  /**\r\n   * Encrypt a message for a specific publicKey (receiver, asymmetric)\r\n   *\r\n   * @param recipientPublicKey\r\n   * @param message\r\n   */\n  encryptMessageAsymmetric(recipientPublicKey, message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return sealCryptobox(message, Buffer.from(recipientPublicKey, 'hex'));\n    });\n  }\n}","map":{"version":3,"names":["toHex","getHexHash","sealCryptobox","convertPublicKeyToX25519","convertSecretKeyToX25519","clientSessionKeys","serverSessionKeys","CommunicationClient","constructor","keyPair","getPublicKey","publicKey","getPublicKeyHash","createCryptoBoxServer","otherPublicKey","selfKeypair","secretKey","Buffer","from","createCryptoBoxClient","encryptMessageAsymmetric","recipientPublicKey","message"],"sources":["../../../../src/transports/clients/CommunicationClient.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,SAASA,KAAK,EAAEC,UAAU,EAAEC,aAAa,QAAQ,sBAAsB;AACvE,SAASC,wBAAwB,EAAEC,wBAAwB,QAAiB,oBAAoB;AAChG,SAASC,iBAAiB,EAAEC,iBAAiB,QAAqB,2BAA2B;AAC7F;;;;;AAKA,OAAM,MAAgBC,mBAAmB;EACvCC,YAA+BC,OAAgB;IAAhB,KAAAA,OAAO,GAAPA,OAAO;EAAY;EAElD;;;EAGaC,YAAYA,CAAA;;MACvB,OAAOV,KAAK,CAAC,IAAI,CAACS,OAAO,CAACE,SAAS,CAAC;IACtC,CAAC;;EAED;;;EAGaC,gBAAgBA,CAAA;;MAC3B,OAAOX,UAAU,CAAC,IAAI,CAACQ,OAAO,CAACE,SAAS,CAAC;IAC3C,CAAC;;EAED;;;;;;EAMgBE,qBAAqBA,CACnCC,cAAsB,EACtBC,WAAoB;;MAEpB,OAAOT,iBAAiB,CACtB;QACEK,SAAS,EAAER,wBAAwB,CAACY,WAAW,CAACJ,SAAS,CAAC;QAC1DK,SAAS,EAAEZ,wBAAwB,CAACW,WAAW,CAACC,SAAS;OAC1D,EACDb,wBAAwB,CAACc,MAAM,CAACC,IAAI,CAACJ,cAAc,EAAE,KAAK,CAAC,CAAC,CAC7D;IACH,CAAC;;EAED;;;;;;EAMgBK,qBAAqBA,CACnCL,cAAsB,EACtBC,WAAoB;;MAEpB,OAAOV,iBAAiB,CACtB;QACEM,SAAS,EAAER,wBAAwB,CAACY,WAAW,CAACJ,SAAS,CAAC;QAC1DK,SAAS,EAAEZ,wBAAwB,CAACW,WAAW,CAACC,SAAS;OAC1D,EACDb,wBAAwB,CAACc,MAAM,CAACC,IAAI,CAACJ,cAAc,EAAE,KAAK,CAAC,CAAC,CAC7D;IACH,CAAC;;EAED;;;;;;EAMgBM,wBAAwBA,CACtCC,kBAA0B,EAC1BC,OAAe;;MAEf,OAAOpB,aAAa,CAACoB,OAAO,EAAEL,MAAM,CAACC,IAAI,CAACG,kBAAkB,EAAE,KAAK,CAAC,CAAC;IACvE,CAAC"},"metadata":{},"sourceType":"module"}