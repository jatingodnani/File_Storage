{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Package salsa20 implements Salsa20 stream cipher.\r\n */\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\n// Number of Salsa20 rounds (Salsa20/20).\nvar ROUNDS = 20;\n/**\r\n * Applies the Salsa20 core function to 16-byte input,\r\n * 32-byte key key, and puts the result into 64-byte array out.\r\n */\nfunction core(out, input, key) {\n  var j0 = 0x61707865; // \"expa\"\n  var j1 = key[3] << 24 | key[2] << 16 | key[1] << 8 | key[0];\n  var j2 = key[7] << 24 | key[6] << 16 | key[5] << 8 | key[4];\n  var j3 = key[11] << 24 | key[10] << 16 | key[9] << 8 | key[8];\n  var j4 = key[15] << 24 | key[14] << 16 | key[13] << 8 | key[12];\n  var j5 = 0x3320646E; // \"nd 3\"\n  var j6 = input[3] << 24 | input[2] << 16 | input[1] << 8 | input[0];\n  var j7 = input[7] << 24 | input[6] << 16 | input[5] << 8 | input[4];\n  var j8 = input[11] << 24 | input[10] << 16 | input[9] << 8 | input[8];\n  var j9 = input[15] << 24 | input[14] << 16 | input[13] << 8 | input[12];\n  var j10 = 0x79622D32; // \"2-by\"\n  var j11 = key[19] << 24 | key[18] << 16 | key[17] << 8 | key[16];\n  var j12 = key[23] << 24 | key[22] << 16 | key[21] << 8 | key[20];\n  var j13 = key[27] << 24 | key[26] << 16 | key[25] << 8 | key[24];\n  var j14 = key[31] << 24 | key[30] << 16 | key[29] << 8 | key[28];\n  var j15 = 0x6B206574; // \"te k\"\n  var x0 = j0;\n  var x1 = j1;\n  var x2 = j2;\n  var x3 = j3;\n  var x4 = j4;\n  var x5 = j5;\n  var x6 = j6;\n  var x7 = j7;\n  var x8 = j8;\n  var x9 = j9;\n  var x10 = j10;\n  var x11 = j11;\n  var x12 = j12;\n  var x13 = j13;\n  var x14 = j14;\n  var x15 = j15;\n  var u;\n  for (var i = 0; i < ROUNDS; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u << 7 | u >>> 32 - 7;\n    u = x4 + x0 | 0;\n    x8 ^= u << 9 | u >>> 32 - 9;\n    u = x8 + x4 | 0;\n    x12 ^= u << 13 | u >>> 32 - 13;\n    u = x12 + x8 | 0;\n    x0 ^= u << 18 | u >>> 32 - 18;\n    u = x5 + x1 | 0;\n    x9 ^= u << 7 | u >>> 32 - 7;\n    u = x9 + x5 | 0;\n    x13 ^= u << 9 | u >>> 32 - 9;\n    u = x13 + x9 | 0;\n    x1 ^= u << 13 | u >>> 32 - 13;\n    u = x1 + x13 | 0;\n    x5 ^= u << 18 | u >>> 32 - 18;\n    u = x10 + x6 | 0;\n    x14 ^= u << 7 | u >>> 32 - 7;\n    u = x14 + x10 | 0;\n    x2 ^= u << 9 | u >>> 32 - 9;\n    u = x2 + x14 | 0;\n    x6 ^= u << 13 | u >>> 32 - 13;\n    u = x6 + x2 | 0;\n    x10 ^= u << 18 | u >>> 32 - 18;\n    u = x15 + x11 | 0;\n    x3 ^= u << 7 | u >>> 32 - 7;\n    u = x3 + x15 | 0;\n    x7 ^= u << 9 | u >>> 32 - 9;\n    u = x7 + x3 | 0;\n    x11 ^= u << 13 | u >>> 32 - 13;\n    u = x11 + x7 | 0;\n    x15 ^= u << 18 | u >>> 32 - 18;\n    u = x0 + x3 | 0;\n    x1 ^= u << 7 | u >>> 32 - 7;\n    u = x1 + x0 | 0;\n    x2 ^= u << 9 | u >>> 32 - 9;\n    u = x2 + x1 | 0;\n    x3 ^= u << 13 | u >>> 32 - 13;\n    u = x3 + x2 | 0;\n    x0 ^= u << 18 | u >>> 32 - 18;\n    u = x5 + x4 | 0;\n    x6 ^= u << 7 | u >>> 32 - 7;\n    u = x6 + x5 | 0;\n    x7 ^= u << 9 | u >>> 32 - 9;\n    u = x7 + x6 | 0;\n    x4 ^= u << 13 | u >>> 32 - 13;\n    u = x4 + x7 | 0;\n    x5 ^= u << 18 | u >>> 32 - 18;\n    u = x10 + x9 | 0;\n    x11 ^= u << 7 | u >>> 32 - 7;\n    u = x11 + x10 | 0;\n    x8 ^= u << 9 | u >>> 32 - 9;\n    u = x8 + x11 | 0;\n    x9 ^= u << 13 | u >>> 32 - 13;\n    u = x9 + x8 | 0;\n    x10 ^= u << 18 | u >>> 32 - 18;\n    u = x15 + x14 | 0;\n    x12 ^= u << 7 | u >>> 32 - 7;\n    u = x12 + x15 | 0;\n    x13 ^= u << 9 | u >>> 32 - 9;\n    u = x13 + x12 | 0;\n    x14 ^= u << 13 | u >>> 32 - 13;\n    u = x14 + x13 | 0;\n    x15 ^= u << 18 | u >>> 32 - 18;\n  }\n  binary_1.writeUint32LE(x0 + j0 | 0, out, 0);\n  binary_1.writeUint32LE(x1 + j1 | 0, out, 4);\n  binary_1.writeUint32LE(x2 + j2 | 0, out, 8);\n  binary_1.writeUint32LE(x3 + j3 | 0, out, 12);\n  binary_1.writeUint32LE(x4 + j4 | 0, out, 16);\n  binary_1.writeUint32LE(x5 + j5 | 0, out, 20);\n  binary_1.writeUint32LE(x6 + j6 | 0, out, 24);\n  binary_1.writeUint32LE(x7 + j7 | 0, out, 28);\n  binary_1.writeUint32LE(x8 + j8 | 0, out, 32);\n  binary_1.writeUint32LE(x9 + j9 | 0, out, 36);\n  binary_1.writeUint32LE(x10 + j10 | 0, out, 40);\n  binary_1.writeUint32LE(x11 + j11 | 0, out, 44);\n  binary_1.writeUint32LE(x12 + j12 | 0, out, 48);\n  binary_1.writeUint32LE(x13 + j13 | 0, out, 52);\n  binary_1.writeUint32LE(x14 + j14 | 0, out, 56);\n  binary_1.writeUint32LE(x15 + j15 | 0, out, 60);\n}\n/**\r\n * Encrypt src with Salsa20/20 stream generated for the given 32-byte key\r\n * and 8-byte and write the result into dst and return it.\r\n *\r\n * dst and src may be the same, but otherwise must not overlap.\r\n *\r\n * Never use the same key and nonce to encrypt more than one message.\r\n *\r\n * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte\r\n * array with stream counter in first nonceInplaceCounterLength bytes and nonce\r\n * in the last remaining bytes. The counter will be incremented inplace for\r\n * each Salsa20 block. This is useful if you need to encrypt one stream of data\r\n * in chunks.\r\n */\nfunction streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {\n  if (nonceInplaceCounterLength === void 0) {\n    nonceInplaceCounterLength = 0;\n  }\n  // We only support 256-bit keys.\n  if (key.length !== 32) {\n    throw new Error(\"Salsa20: key size must be 32 bytes\");\n  }\n  if (dst.length < src.length) {\n    throw new Error(\"Salsa20: destination is shorter than source\");\n  }\n  var nc;\n  var counterStart;\n  if (nonceInplaceCounterLength === 0) {\n    if (nonce.length !== 8) {\n      throw new Error(\"Salsa20 nonce must be 8 bytes\");\n    }\n    nc = new Uint8Array(16);\n    // First bytes of nc are nonce, set it.\n    nc.set(nonce);\n    // Last bytes are counter.\n    counterStart = nonce.length;\n  } else {\n    if (nonce.length !== 16) {\n      throw new Error(\"Salsa20 nonce with counter must be 16 bytes\");\n    }\n    // This will update passed nonce with counter inplace.\n    nc = nonce;\n    counterStart = 16 - nonceInplaceCounterLength;\n  }\n  // Allocate temporary space for Salsa20 block.\n  var block = new Uint8Array(64);\n  for (var i = 0; i < src.length; i += 64) {\n    // Generate a block.\n    core(block, nc, key);\n    // XOR block bytes with src into dst.\n    for (var j = i; j < i + 64 && j < src.length; j++) {\n      dst[j] = src[j] ^ block[j - i];\n    }\n    // Increment counter.\n    incrementCounter(nc, counterStart, nc.length - counterStart);\n  }\n  // Cleanup temporary space.\n  wipe_1.wipe(block);\n  if (nonceInplaceCounterLength === 0) {\n    // Cleanup counter.\n    wipe_1.wipe(nc);\n  }\n  return dst;\n}\nexports.streamXOR = streamXOR;\n/**\r\n * Generate Salsa20/20 stream for the given 32-byte key and 8-byte nonce\r\n * and write it into dst and return it.\r\n *\r\n * Never use the same key and nonce to generate more than one stream.\r\n *\r\n * If nonceInplaceCounterLength is not 0, it behaves the same\r\n * with respect to the nonce as described in streamXOR documentation.\r\n *\r\n * stream is like streamXOR with all-zero src.\r\n */\nfunction stream(key, nonce, dst, nonceInplaceCounterLength) {\n  if (nonceInplaceCounterLength === void 0) {\n    nonceInplaceCounterLength = 0;\n  }\n  wipe_1.wipe(dst);\n  return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);\n}\nexports.stream = stream;\nfunction incrementCounter(counter, pos, len) {\n  var carry = 1;\n  while (len--) {\n    carry = carry + (counter[pos] & 0xff) | 0;\n    counter[pos] = carry & 0xff;\n    carry >>>= 8;\n    pos++;\n  }\n  if (carry > 0) {\n    throw new Error(\"Salsa20: counter overflow\");\n  }\n}","map":{"version":3,"names":["binary_1","require","wipe_1","ROUNDS","core","out","input","key","j0","j1","j2","j3","j4","j5","j6","j7","j8","j9","j10","j11","j12","j13","j14","j15","x0","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","u","i","writeUint32LE","streamXOR","nonce","src","dst","nonceInplaceCounterLength","length","Error","nc","counterStart","Uint8Array","set","block","j","incrementCounter","wipe","exports","stream","counter","pos","len","carry"],"sources":["../salsa20.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}