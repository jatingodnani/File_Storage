{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2020 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.X25519Session = exports.SECRET_SEED_LENGTH = exports.SAVED_STATE_LENGTH = exports.ACCEPT_MESSAGE_LENGTH = exports.OFFER_MESSAGE_LENGTH = void 0;\nconst random_1 = require(\"@stablelib/random\");\nconst wipe_1 = require(\"@stablelib/wipe\");\nconst x25519_1 = require(\"@stablelib/x25519\");\nconst x25519_session_1 = require(\"./x25519-session\");\n/** Constants for key agreement */\nexports.OFFER_MESSAGE_LENGTH = x25519_1.PUBLIC_KEY_LENGTH;\nexports.ACCEPT_MESSAGE_LENGTH = x25519_1.PUBLIC_KEY_LENGTH;\nexports.SAVED_STATE_LENGTH = x25519_1.SECRET_KEY_LENGTH;\nexports.SECRET_SEED_LENGTH = x25519_1.SECRET_KEY_LENGTH;\n/**\n * X25519 key agreement using ephemeral key pairs.\n *\n * Note that unless this key agreement is combined with an authentication\n * method, such as public key signatures, it's vulnerable to man-in-the-middle\n * attacks.\n */\nclass X25519Session {\n  constructor(secretSeed, prng) {\n    this.offerMessageLength = exports.OFFER_MESSAGE_LENGTH;\n    this.acceptMessageLength = exports.ACCEPT_MESSAGE_LENGTH;\n    this.sharedKeyLength = x25519_1.SHARED_KEY_LENGTH;\n    this.savedStateLength = exports.SAVED_STATE_LENGTH;\n    this._seed = secretSeed || (0, random_1.randomBytes)(x25519_1.SECRET_KEY_LENGTH, prng);\n  }\n  saveState() {\n    return new Uint8Array(this._seed);\n  }\n  restoreState(savedState) {\n    this._seed = new Uint8Array(savedState);\n    return this;\n  }\n  clean() {\n    if (this._seed) {\n      (0, wipe_1.wipe)(this._seed);\n    }\n    if (this._keyPair) {\n      (0, wipe_1.wipe)(this._keyPair.secretKey);\n      (0, wipe_1.wipe)(this._keyPair.publicKey);\n    }\n    if (this._sharedKey) {\n      (0, wipe_1.wipe)(this._sharedKey);\n    }\n    if (this._sessionKeys) {\n      (0, wipe_1.wipe)(this._sessionKeys.receive);\n      (0, wipe_1.wipe)(this._sessionKeys.send);\n    }\n  }\n  offer() {\n    this._keyPair = (0, x25519_1.generateKeyPairFromSeed)(this._seed);\n    return new Uint8Array(this._keyPair.publicKey);\n  }\n  accept(offerMsg) {\n    if (this._keyPair) {\n      throw new Error(\"X25519Session: accept shouldn't be called by offering party\");\n    }\n    if (offerMsg.length !== this.offerMessageLength) {\n      throw new Error(\"X25519Session: incorrect offer message length\");\n    }\n    if (this._sharedKey) {\n      throw new Error(\"X25519Session: accept was already called\");\n    }\n    const keyPair = (0, x25519_1.generateKeyPairFromSeed)(this._seed);\n    this._sharedKey = (0, x25519_1.sharedKey)(keyPair.secretKey, offerMsg);\n    this._sessionKeys = (0, x25519_session_1.clientSessionKeysFromSharedKey)(this._sharedKey, keyPair.publicKey, offerMsg);\n    (0, wipe_1.wipe)(keyPair.secretKey);\n    return keyPair.publicKey;\n  }\n  finish(acceptMsg) {\n    if (acceptMsg.length !== this.acceptMessageLength) {\n      throw new Error(\"X25519Session: incorrect accept message length\");\n    }\n    if (!this._keyPair) {\n      throw new Error(\"X25519Session: no offer state\");\n    }\n    if (this._sharedKey) {\n      throw new Error(\"X25519Session: finish was already called\");\n    }\n    this._sharedKey = (0, x25519_1.sharedKey)(this._keyPair.secretKey, acceptMsg);\n    this._sessionKeys = (0, x25519_session_1.serverSessionKeysFromSharedKey)(this._sharedKey, this._keyPair.publicKey, acceptMsg);\n    return this;\n  }\n  getSharedKey() {\n    if (!this._sharedKey) {\n      throw new Error(\"X25519Session: no shared key established\");\n    }\n    return new Uint8Array(this._sharedKey);\n  }\n  getSessionKeys() {\n    if (!this._sessionKeys) {\n      throw new Error(\"X25519Session: no shared key established\");\n    }\n    return {\n      receive: new Uint8Array(this._sessionKeys.receive),\n      send: new Uint8Array(this._sessionKeys.send)\n    };\n  }\n}\nexports.X25519Session = X25519Session;","map":{"version":3,"names":["random_1","require","wipe_1","x25519_1","x25519_session_1","exports","OFFER_MESSAGE_LENGTH","PUBLIC_KEY_LENGTH","ACCEPT_MESSAGE_LENGTH","SAVED_STATE_LENGTH","SECRET_KEY_LENGTH","SECRET_SEED_LENGTH","X25519Session","constructor","secretSeed","prng","offerMessageLength","acceptMessageLength","sharedKeyLength","SHARED_KEY_LENGTH","savedStateLength","_seed","randomBytes","saveState","Uint8Array","restoreState","savedState","clean","wipe","_keyPair","secretKey","publicKey","_sharedKey","_sessionKeys","receive","send","offer","generateKeyPairFromSeed","accept","offerMsg","Error","length","keyPair","sharedKey","clientSessionKeysFromSharedKey","finish","acceptMsg","serverSessionKeysFromSharedKey","getSharedKey","getSessionKeys"],"sources":["../keyagreement.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}