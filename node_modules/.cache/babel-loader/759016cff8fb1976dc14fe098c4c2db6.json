{"ast":null,"code":"import { Prefix, prefixLength, b58cencode, prefix, buf2hex, b58cdecode, InvalidKeyHashError, InvalidPublicKeyError, InvalidAddressError, InvalidOperationKindError, validateBlock, ValidationResult } from '@taquito/utils';\nimport BigNumber$1, { BigNumber } from 'bignumber.js';\nconst toHexString = bytes => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\nconst pad = function (num) {\n  let paddingLen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  return num.toString(16).padStart(paddingLen, '0');\n};\n\n/*\r\n * Some code in this file is originally from sotez\r\n * Copyright (c) 2018 Andrew Kishino\r\n */\n// See: https://tezos.gitlab.io/protocols/005_babylon.html#transactions-now-have-an-entrypoint\nconst ENTRYPOINT_MAX_LENGTH = 31;\nvar CODEC;\n(function (CODEC) {\n  CODEC[\"SECRET\"] = \"secret\";\n  CODEC[\"RAW\"] = \"raw\";\n  CODEC[\"TZ1\"] = \"tz1\";\n  CODEC[\"BRANCH\"] = \"branch\";\n  CODEC[\"ZARITH\"] = \"zarith\";\n  CODEC[\"PUBLIC_KEY\"] = \"public_key\";\n  CODEC[\"PKH\"] = \"pkh\";\n  CODEC[\"DELEGATE\"] = \"delegate\";\n  CODEC[\"SCRIPT\"] = \"script\";\n  CODEC[\"BALLOT_STATEMENT\"] = \"ballotStmt\";\n  CODEC[\"PROPOSAL\"] = \"proposal\";\n  CODEC[\"PROPOSAL_ARR\"] = \"proposalArr\";\n  CODEC[\"INT32\"] = \"int32\";\n  CODEC[\"INT16\"] = \"int16\";\n  CODEC[\"PARAMETERS\"] = \"parameters\";\n  CODEC[\"ADDRESS\"] = \"address\";\n  CODEC[\"OPERATION\"] = \"operation\";\n  CODEC[\"OP_ACTIVATE_ACCOUNT\"] = \"activate_account\";\n  CODEC[\"OP_DELEGATION\"] = \"delegation\";\n  CODEC[\"OP_TRANSACTION\"] = \"transaction\";\n  CODEC[\"OP_ORIGINATION\"] = \"origination\";\n  CODEC[\"OP_BALLOT\"] = \"ballot\";\n  CODEC[\"OP_ENDORSEMENT\"] = \"endorsement\";\n  CODEC[\"OP_SEED_NONCE_REVELATION\"] = \"seed_nonce_revelation\";\n  CODEC[\"OP_REVEAL\"] = \"reveal\";\n  CODEC[\"OP_PROPOSALS\"] = \"proposals\";\n  CODEC[\"OP_REGISTER_GLOBAL_CONSTANT\"] = \"register_global_constant\";\n  CODEC[\"VALUE\"] = \"value\";\n  CODEC[\"MANAGER\"] = \"manager\";\n  CODEC[\"BLOCK_PAYLOAD_HASH\"] = \"blockPayloadHash\";\n})(CODEC || (CODEC = {}));\n// See https://tezos.gitlab.io/whitedoc/michelson.html#full-grammar\nconst opMapping = {\n  '00': 'parameter',\n  '01': 'storage',\n  '02': 'code',\n  '03': 'False',\n  '04': 'Elt',\n  '05': 'Left',\n  '06': 'None',\n  '07': 'Pair',\n  '08': 'Right',\n  '09': 'Some',\n  '0a': 'True',\n  '0b': 'Unit',\n  '0c': 'PACK',\n  '0d': 'UNPACK',\n  '0e': 'BLAKE2B',\n  '0f': 'SHA256',\n  '10': 'SHA512',\n  '11': 'ABS',\n  '12': 'ADD',\n  '13': 'AMOUNT',\n  '14': 'AND',\n  '15': 'BALANCE',\n  '16': 'CAR',\n  '17': 'CDR',\n  '18': 'CHECK_SIGNATURE',\n  '19': 'COMPARE',\n  '1a': 'CONCAT',\n  '1b': 'CONS',\n  '1c': 'CREATE_ACCOUNT',\n  '1d': 'CREATE_CONTRACT',\n  '1e': 'IMPLICIT_ACCOUNT',\n  '1f': 'DIP',\n  '20': 'DROP',\n  '21': 'DUP',\n  '22': 'EDIV',\n  '23': 'EMPTY_MAP',\n  '24': 'EMPTY_SET',\n  '25': 'EQ',\n  '26': 'EXEC',\n  '27': 'FAILWITH',\n  '28': 'GE',\n  '29': 'GET',\n  '2a': 'GT',\n  '2b': 'HASH_KEY',\n  '2c': 'IF',\n  '2d': 'IF_CONS',\n  '2e': 'IF_LEFT',\n  '2f': 'IF_NONE',\n  '30': 'INT',\n  '31': 'LAMBDA',\n  '32': 'LE',\n  '33': 'LEFT',\n  '34': 'LOOP',\n  '35': 'LSL',\n  '36': 'LSR',\n  '37': 'LT',\n  '38': 'MAP',\n  '39': 'MEM',\n  '3a': 'MUL',\n  '3b': 'NEG',\n  '3c': 'NEQ',\n  '3d': 'NIL',\n  '3e': 'NONE',\n  '3f': 'NOT',\n  '40': 'NOW',\n  '41': 'OR',\n  '42': 'PAIR',\n  '43': 'PUSH',\n  '44': 'RIGHT',\n  '45': 'SIZE',\n  '46': 'SOME',\n  '47': 'SOURCE',\n  '48': 'SENDER',\n  '49': 'SELF',\n  '4a': 'STEPS_TO_QUOTA',\n  '4b': 'SUB',\n  '4c': 'SWAP',\n  '4d': 'TRANSFER_TOKENS',\n  '4e': 'SET_DELEGATE',\n  '4f': 'UNIT',\n  '50': 'UPDATE',\n  '51': 'XOR',\n  '52': 'ITER',\n  '53': 'LOOP_LEFT',\n  '54': 'ADDRESS',\n  '55': 'CONTRACT',\n  '56': 'ISNAT',\n  '57': 'CAST',\n  '58': 'RENAME',\n  '59': 'bool',\n  '5a': 'contract',\n  '5b': 'int',\n  '5c': 'key',\n  '5d': 'key_hash',\n  '5e': 'lambda',\n  '5f': 'list',\n  '60': 'map',\n  '61': 'big_map',\n  '62': 'nat',\n  '63': 'option',\n  '64': 'or',\n  '65': 'pair',\n  '66': 'set',\n  '67': 'signature',\n  '68': 'string',\n  '69': 'bytes',\n  '6a': 'mutez',\n  '6b': 'timestamp',\n  '6c': 'unit',\n  '6d': 'operation',\n  '6e': 'address',\n  '6f': 'SLICE',\n  '70': 'DIG',\n  '71': 'DUG',\n  '72': 'EMPTY_BIG_MAP',\n  '73': 'APPLY',\n  '74': 'chain_id',\n  '75': 'CHAIN_ID',\n  '76': 'LEVEL',\n  '77': 'SELF_ADDRESS',\n  '78': 'never',\n  '79': 'NEVER',\n  '7a': 'UNPAIR',\n  '7b': 'VOTING_POWER',\n  '7c': 'TOTAL_VOTING_POWER',\n  '7d': 'KECCAK',\n  '7e': 'SHA3',\n  '7f': 'PAIRING_CHECK',\n  '80': 'bls12_381_g1',\n  '81': 'bls12_381_g2',\n  '82': 'bls12_381_fr',\n  '83': 'sapling_state',\n  '84': 'sapling_transaction',\n  '85': 'SAPLING_EMPTY_STATE',\n  '86': 'SAPLING_VERIFY_UPDATE',\n  '87': 'ticket',\n  '88': 'TICKET',\n  '89': 'READ_TICKET',\n  '8a': 'SPLIT_TICKET',\n  '8b': 'JOIN_TICKETS',\n  '8c': 'GET_AND_UPDATE',\n  '8d': 'chest',\n  '8e': 'chest_key',\n  '8f': 'OPEN_CHEST',\n  '90': 'VIEW',\n  '91': 'view',\n  '92': 'constant',\n  '93': 'SUB_MUTEZ'\n};\nconst opMappingReverse = (() => {\n  const result = {};\n  Object.keys(opMapping).forEach(key => {\n    result[opMapping[key]] = key;\n  });\n  return result;\n})();\n// See https://tezos.gitlab.io/api/p2p.html\nconst kindMapping = {\n  0x04: 'activate_account',\n  0x6b: 'reveal',\n  0x6e: 'delegation',\n  0x6c: 'transaction',\n  0x6d: 'origination',\n  0x06: 'ballot',\n  0x00: 'endorsement',\n  0x01: 'seed_nonce_revelation',\n  0x05: 'proposals',\n  0x6f: 'register_global_constant'\n};\nconst kindMappingReverse = (() => {\n  const result = {};\n  Object.keys(kindMapping).forEach(key => {\n    const keyNum = typeof key === 'string' ? parseInt(key, 10) : key;\n    result[kindMapping[keyNum]] = pad(keyNum, 2);\n  });\n  return result;\n})();\n// See https://tezos.gitlab.io/protocols/005_babylon.html#transactions-now-have-an-entrypoint\nconst entrypointMapping = {\n  '00': 'default',\n  '01': 'root',\n  '02': 'do',\n  '03': 'set_delegate',\n  '04': 'remove_delegate'\n};\nconst entrypointMappingReverse = (() => {\n  const result = {};\n  Object.keys(entrypointMapping).forEach(key => {\n    result[entrypointMapping[key]] = key;\n  });\n  return result;\n})();\n\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid block hash being passed or used\r\n */\nclass InvalidBlockHashError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'InvalidBlockHashError';\n  }\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid operation schema being passed or used\r\n */\nclass InvalidOperationSchemaError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'InvalidOperationSchemaError';\n  }\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an entrypoint exceeding maximum size\r\n */\nclass OversizedEntryPointError extends Error {\n  constructor(entrypoint) {\n    super(`Oversized entrypoint: ${entrypoint}. The maximum length of entrypoint is ${ENTRYPOINT_MAX_LENGTH}`);\n    this.entrypoint = entrypoint;\n    this.name = 'OversizedEntryPointError';\n  }\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid ballot value\r\n */\nclass InvalidBallotValueError extends Error {\n  constructor(ballotValue) {\n    super(`The ballot value '${ballotValue}' is invalid`);\n    this.ballotValue = ballotValue;\n    this.name = 'InvalidBallotValueError';\n  }\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure when trying to decode ballot value\r\n */\nclass DecodeBallotValueError extends Error {\n  constructor(ballotValue) {\n    super(`Failed to decode ballot value ${ballotValue}`);\n    this.ballotValue = ballotValue;\n    this.name = 'DecodeBallotValueError';\n  }\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid hex string have been passed or used\r\n */\nclass InvalidHexStringError extends Error {\n  constructor(hexString) {\n    super(`The hex string '${hexString}' is invalid`);\n    this.hexString = hexString;\n    this.name = 'InvalidHexStringError';\n  }\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates unexpected Michelson Value being passed or used\r\n */\nclass UnexpectedMichelsonValueError extends Error {\n  constructor(value) {\n    super(`Failed to encode michelson value '${value}'`);\n    this.value = value;\n    this.name = 'UnexpectedMichelsonValueError';\n  }\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure when trying to decode an operation\r\n */\nclass OperationDecodingError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'OperationDecodingError';\n  }\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure when trying to encode an operation\r\n */\nclass OperationEncodingError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'OperationEncodingError';\n  }\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an unsupported operation being passed or used\r\n */\nclass UnsupportedOperationError extends Error {\n  constructor(op) {\n    super(`The operation '${op}' is unsupported`);\n    this.op = op;\n    this.name = 'UnsupportedOperationError';\n  }\n}\nclass Uint8ArrayConsumer {\n  constructor(arr) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.arr = arr;\n    this.offset = offset;\n  }\n  static fromHexString(hex) {\n    const lowHex = hex.toLowerCase();\n    if (/^(([a-f]|\\d){2})*$/.test(lowHex)) {\n      const arr = new Uint8Array((lowHex.match(/([a-z]|\\d){2}/g) || []).map(byte => parseInt(byte, 16)));\n      return new Uint8ArrayConsumer(arr);\n    } else {\n      throw new InvalidHexStringError(lowHex);\n    }\n  }\n  consume(count) {\n    const subArr = this.arr.subarray(this.offset, this.offset + count);\n    this.offset += count;\n    return subArr;\n  }\n  get(idx) {\n    return this.arr[this.offset + idx];\n  }\n  length() {\n    return this.arr.length - this.offset;\n  }\n}\nconst isPrim = value => {\n  return 'prim' in value;\n};\nconst isBytes = value => {\n  return 'bytes' in value && typeof value.bytes === 'string';\n};\nconst isString = value => {\n  return 'string' in value && typeof value.string === 'string';\n};\nconst isInt = value => {\n  return 'int' in value && typeof value.int === 'string';\n};\nconst scriptEncoder = script => {\n  const code = valueEncoder(script.code);\n  const storage = valueEncoder(script.storage);\n  return `${pad(code.length / 2, 8)}${code}${pad(storage.length / 2, 8)}${storage}`;\n};\nconst scriptDecoder = value => {\n  const code = extractRequiredLen(value);\n  const storage = extractRequiredLen(value);\n  return {\n    code: valueDecoder(new Uint8ArrayConsumer(code)),\n    storage: valueDecoder(new Uint8ArrayConsumer(storage))\n  };\n};\nconst valueEncoder = value => {\n  if (Array.isArray(value)) {\n    const encoded = value.map(x => valueEncoder(x)).join('');\n    const len = encoded.length / 2;\n    return `02${pad(len)}${encoded}`;\n  } else if (isPrim(value)) {\n    return primEncoder(value);\n  } else if (isBytes(value)) {\n    return bytesEncoder(value);\n  } else if (isString(value)) {\n    return stringEncoder(value);\n  } else if (isInt(value)) {\n    return intEncoder(value);\n  }\n  throw new UnexpectedMichelsonValueError(value);\n};\nconst valueDecoder = value => {\n  const preamble = value.consume(1);\n  switch (preamble[0]) {\n    case 0x0a:\n      return bytesDecoder(value);\n    case 0x01:\n      return stringDecoder(value);\n    case 0x00:\n      return intDecoder(value);\n    case 0x02:\n      {\n        const val = new Uint8ArrayConsumer(extractRequiredLen(value));\n        const results = [];\n        while (val.length() > 0) {\n          results.push(valueDecoder(val));\n        }\n        return results;\n      }\n    default:\n      return primDecoder(value, preamble);\n  }\n};\nconst extractRequiredLen = function (value) {\n  let bytesLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  const len = value.consume(bytesLength);\n  const valueLen = parseInt(Buffer.from(len).toString('hex'), 16);\n  return value.consume(valueLen);\n};\nconst bytesEncoder = value => {\n  if (!/^([A-Fa-f0-9]{2})*$/.test(value.bytes)) {\n    throw new InvalidHexStringError(value.bytes);\n  }\n  const len = value.bytes.length / 2;\n  return `0a${pad(len)}${value.bytes}`;\n};\nconst bytesDecoder = value => {\n  const bytes = extractRequiredLen(value);\n  return {\n    bytes: Buffer.from(bytes).toString('hex')\n  };\n};\nconst stringEncoder = value => {\n  const str = Buffer.from(value.string, 'utf8').toString('hex');\n  const hexLength = str.length / 2;\n  return `01${pad(hexLength)}${str}`;\n};\nconst stringDecoder = value => {\n  const str = extractRequiredLen(value);\n  return {\n    string: Buffer.from(str).toString('utf8')\n  };\n};\nconst intEncoder = _ref => {\n  let {\n    int\n  } = _ref;\n  const num = new BigNumber(int, 10);\n  const positiveMark = num.toString(2)[0] === '-' ? '1' : '0';\n  const binary = num.toString(2).replace(/-/g, '');\n  const pad = binary.length <= 6 ? 6 : (binary.length - 6) % 7 ? binary.length + 7 - (binary.length - 6) % 7 : binary.length;\n  const splitted = binary.padStart(pad, '0').match(/\\d{6,7}/g);\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const reversed = splitted.reverse();\n  reversed[0] = positiveMark + reversed[0];\n  const numHex = reversed.map((x, i) =>\n  // Add one to the last chunk\n  parseInt((i === reversed.length - 1 ? '0' : '1') + x, 2).toString(16).padStart(2, '0'));\n  return `00${numHex.join('')}`;\n};\nconst intDecoder = value => {\n  let c = value.consume(1)[0];\n  const hexNumber = [];\n  const isNotLastChunkMask = 1 << 7;\n  while (c & isNotLastChunkMask) {\n    hexNumber.push(c);\n    c = value.consume(1)[0];\n  }\n  hexNumber.push(c);\n  const isNegative = !!(1 << 6 & hexNumber[0]);\n  hexNumber[0] = hexNumber[0] & 0b1111111;\n  const numBin = hexNumber.map((x, i) => x.toString(2).slice(i === 0 ? -6 : -7).padStart(i === 0 ? 6 : 7, '0')).reverse();\n  let num = new BigNumber(numBin.join(''), 2);\n  if (isNegative) {\n    num = num.times(-1);\n  }\n  return {\n    int: num.toFixed()\n  };\n};\nconst primEncoder = value => {\n  const hasAnnot = +Array.isArray(value.annots);\n  const argsCount = Array.isArray(value.args) ? value.args.length : 0;\n  // Specify the number of args max is 3 without annotation\n  const preamble = pad(Math.min(2 * argsCount + hasAnnot + 0x03, 9), 2);\n  const op = opMappingReverse[value.prim];\n  let encodedArgs = (value.args || []).map(arg => valueEncoder(arg)).join('');\n  const encodedAnnots = Array.isArray(value.annots) ? encodeAnnots(value.annots) : '';\n  if (value.prim === 'LAMBDA' && argsCount) {\n    encodedArgs = pad(encodedArgs.length / 2) + encodedArgs + pad(0);\n  }\n  if ((value.prim === 'pair' || value.prim === 'Pair') && argsCount > 2) {\n    encodedArgs = encodedAnnots === '' ? pad(encodedArgs.length / 2) + encodedArgs + pad(0) : pad(encodedArgs.length / 2) + encodedArgs;\n  }\n  if (value.prim === 'view' && value.args) {\n    encodedArgs = pad(encodedArgs.length / 2) + encodedArgs + pad(0);\n  }\n  return `${preamble}${op}${encodedArgs}${encodedAnnots}`;\n};\nconst primDecoder = (value, preamble) => {\n  const hasAnnot = (preamble[0] - 0x03) % 2 === 1;\n  let argsCount = Math.floor((preamble[0] - 0x03) / 2);\n  const op = value.consume(1)[0].toString(16).padStart(2, '0');\n  const result = {\n    prim: opMapping[op]\n  };\n  if (opMapping[op] === 'LAMBDA') {\n    value.consume(4);\n  }\n  if (opMapping[op] === 'view') {\n    if (argsCount != 0) {\n      return primViewDecoder(value, result);\n    } else {\n      return result;\n    }\n  }\n  let combPairArgs;\n  let combPairAnnots;\n  if ((opMapping[op] === 'pair' || opMapping[op] === 'Pair') && argsCount > 2) {\n    combPairArgs = decodeCombPair$1(value);\n    argsCount = 0;\n    combPairAnnots = decodeAnnots(value);\n  }\n  const args = new Array(argsCount).fill(0).map(() => valueDecoder(value));\n  if (opMapping[op] === 'LAMBDA') {\n    value.consume(4);\n  }\n  if (combPairArgs) {\n    result['args'] = combPairArgs;\n  } else if (args.length) {\n    result['args'] = args;\n  }\n  if (combPairAnnots && combPairAnnots[0] !== '') {\n    result['annots'] = combPairAnnots;\n  } else if (hasAnnot) {\n    result['annots'] = decodeAnnots(value);\n  }\n  return result;\n};\nconst primViewDecoder = (value, result) => {\n  value.consume(4);\n  result['args'] = new Array(4).fill(0).map(() => valueDecoder(value));\n  value.consume(4);\n  return result;\n};\nconst decodeCombPair$1 = val => {\n  const array = new Uint8ArrayConsumer(extractRequiredLen(val));\n  const args = [];\n  while (array.length() > 0) {\n    args.push(valueDecoder(array));\n  }\n  return args;\n};\nconst encodeAnnots = value => {\n  const mergedAnnot = value.map(x => {\n    return Buffer.from(x, 'utf8').toString('hex');\n  }).join('20');\n  const len = mergedAnnot.length / 2;\n  return `${pad(len)}${mergedAnnot}`;\n};\nconst decodeAnnots = val => {\n  const len = val.consume(4);\n  const annotLen = parseInt(Buffer.from(len).toString('hex'), 16);\n  const restOfAnnot = val.consume(annotLen);\n  const restOfAnnotHex = Buffer.from(restOfAnnot).toString('hex');\n  return restOfAnnotHex.split('20').map(x => Buffer.from(x, 'hex').toString('utf8'));\n};\nconst prefixEncoder = prefix$1 => str => {\n  return buf2hex(Buffer.from(b58cdecode(str, prefix[prefix$1])));\n};\nconst prefixDecoder = pre => str => {\n  const val = str.consume(prefixLength[pre]);\n  return b58cencode(val, prefix[pre]);\n};\nconst tz1Decoder = prefixDecoder(Prefix.TZ1);\nconst branchDecoder = prefixDecoder(Prefix.B);\nconst pkhDecoder = val => {\n  const prefix = val.consume(1);\n  if (prefix[0] === 0x00) {\n    return prefixDecoder(Prefix.TZ1)(val);\n  } else if (prefix[0] === 0x01) {\n    return prefixDecoder(Prefix.TZ2)(val);\n  } else if (prefix[0] === 0x02) {\n    return prefixDecoder(Prefix.TZ3)(val);\n  }\n};\nconst branchEncoder = prefixEncoder(Prefix.B);\nconst tz1Encoder = prefixEncoder(Prefix.TZ1);\nconst boolEncoder = bool => bool ? 'ff' : '00';\nconst proposalEncoder = proposal => {\n  return prefixEncoder(Prefix.P)(proposal);\n};\nconst proposalDecoder = proposal => {\n  return prefixDecoder(Prefix.P)(proposal);\n};\nconst proposalsDecoder = proposal => {\n  const proposals = [];\n  proposal.consume(4);\n  while (proposal.length() > 0) {\n    proposals.push(proposalDecoder(proposal));\n  }\n  return proposals;\n};\nconst proposalsEncoder = proposals => {\n  return pad(32 * proposals.length) + proposals.map(x => proposalEncoder(x)).join('');\n};\nconst ballotEncoder = ballot => {\n  switch (ballot) {\n    case 'yay':\n      return '00';\n    case 'nay':\n      return '01';\n    case 'pass':\n      return '02';\n    default:\n      throw new InvalidBallotValueError(ballot);\n  }\n};\nconst ballotDecoder = ballot => {\n  const value = ballot.consume(1);\n  switch (value[0]) {\n    case 0x00:\n      return 'yay';\n    case 0x01:\n      return 'nay';\n    case 0x02:\n      return 'pass';\n    default:\n      throw new DecodeBallotValueError(value[0].toString());\n  }\n};\nconst delegateEncoder = val => {\n  if (val) {\n    return boolEncoder(true) + pkhEncoder(val);\n  } else {\n    return boolEncoder(false);\n  }\n};\nconst int32Encoder = val => {\n  const num = parseInt(String(val), 10);\n  const byte = [];\n  for (let i = 0; i < 4; i++) {\n    const shiftBy = (4 - (i + 1)) * 8;\n    byte.push((num & 0xff << shiftBy) >> shiftBy);\n  }\n  return Buffer.from(byte).toString('hex');\n};\nconst int32Decoder = val => {\n  const num = val.consume(4);\n  let finalNum = 0;\n  for (let i = 0; i < num.length; i++) {\n    finalNum = finalNum | num[i] << (num.length - (i + 1)) * 8;\n  }\n  return finalNum;\n};\nconst int16Encoder = val => {\n  const num = parseInt(String(val), 10);\n  const byte = [];\n  for (let i = 0; i < 2; i++) {\n    const shiftBy = (2 - (i + 1)) * 8;\n    byte.push((num & 0xff << shiftBy) >> shiftBy);\n  }\n  return Buffer.from(byte).toString('hex');\n};\nconst int16Decoder = val => {\n  const num = val.consume(2);\n  let finalNum = 0;\n  for (let i = 0; i < num.length; i++) {\n    finalNum = finalNum | num[i] << (num.length - (i + 1)) * 8;\n  }\n  return finalNum;\n};\nconst boolDecoder = val => {\n  const bool = val.consume(1);\n  return bool[0] === 0xff;\n};\nconst delegateDecoder = val => {\n  const hasDelegate = boolDecoder(val);\n  if (hasDelegate) {\n    return pkhDecoder(val);\n  }\n};\nconst pkhEncoder = val => {\n  const pubkeyPrefix = val.substr(0, 3);\n  switch (pubkeyPrefix) {\n    case Prefix.TZ1:\n      return '00' + prefixEncoder(Prefix.TZ1)(val);\n    case Prefix.TZ2:\n      return '01' + prefixEncoder(Prefix.TZ2)(val);\n    case Prefix.TZ3:\n      return '02' + prefixEncoder(Prefix.TZ3)(val);\n    default:\n      throw new InvalidKeyHashError(val);\n  }\n};\nconst publicKeyEncoder = val => {\n  const pubkeyPrefix = val.substr(0, 4);\n  switch (pubkeyPrefix) {\n    case Prefix.EDPK:\n      return '00' + prefixEncoder(Prefix.EDPK)(val);\n    case Prefix.SPPK:\n      return '01' + prefixEncoder(Prefix.SPPK)(val);\n    case Prefix.P2PK:\n      return '02' + prefixEncoder(Prefix.P2PK)(val);\n    default:\n      throw new InvalidPublicKeyError(val);\n  }\n};\nconst addressEncoder = val => {\n  const pubkeyPrefix = val.substr(0, 3);\n  switch (pubkeyPrefix) {\n    case Prefix.TZ1:\n    case Prefix.TZ2:\n    case Prefix.TZ3:\n      return '00' + pkhEncoder(val);\n    case Prefix.KT1:\n      return '01' + prefixEncoder(Prefix.KT1)(val) + '00';\n    default:\n      throw new InvalidAddressError(val);\n  }\n};\nconst publicKeyDecoder = val => {\n  const preamble = val.consume(1);\n  switch (preamble[0]) {\n    case 0x00:\n      return prefixDecoder(Prefix.EDPK)(val);\n    case 0x01:\n      return prefixDecoder(Prefix.SPPK)(val);\n    case 0x02:\n      return prefixDecoder(Prefix.P2PK)(val);\n    default:\n      throw new InvalidPublicKeyError(val.toString());\n  }\n};\nconst addressDecoder = val => {\n  const preamble = val.consume(1);\n  switch (preamble[0]) {\n    case 0x00:\n      return pkhDecoder(val);\n    case 0x01:\n      {\n        const address = prefixDecoder(Prefix.KT1)(val);\n        val.consume(1);\n        return address;\n      }\n    default:\n      throw new InvalidAddressError(val.toString());\n  }\n};\nconst zarithEncoder = n => {\n  const fn = [];\n  let nn = new BigNumber$1(n, 10);\n  if (nn.isNaN()) {\n    throw new TypeError(`Invalid zarith number ${n}`);\n  }\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (nn.lt(128)) {\n      if (nn.lt(16)) fn.push('0');\n      fn.push(nn.toString(16));\n      break;\n    } else {\n      let b = nn.mod(128);\n      nn = nn.minus(b);\n      nn = nn.dividedBy(128);\n      b = b.plus(128);\n      fn.push(b.toString(16));\n    }\n  }\n  return fn.join('');\n};\nconst zarithDecoder = n => {\n  let mostSignificantByte = 0;\n  while (mostSignificantByte < n.length() && (n.get(mostSignificantByte) & 128) !== 0) {\n    mostSignificantByte += 1;\n  }\n  let num = new BigNumber$1(0);\n  for (let i = mostSignificantByte; i >= 0; i -= 1) {\n    const tmp = n.get(i) & 0x7f;\n    num = num.multipliedBy(128);\n    num = num.plus(tmp);\n  }\n  n.consume(mostSignificantByte + 1);\n  return new BigNumber$1(num).toString();\n};\nconst entrypointDecoder = value => {\n  const preamble = pad(value.consume(1)[0], 2);\n  if (preamble in entrypointMapping) {\n    return entrypointMapping[preamble];\n  } else {\n    const entry = extractRequiredLen(value, 1);\n    const entrypoint = Buffer.from(entry).toString('utf8');\n    if (entrypoint.length > ENTRYPOINT_MAX_LENGTH) {\n      throw new OversizedEntryPointError(entrypoint);\n    }\n    return entrypoint;\n  }\n};\nconst parametersDecoder = val => {\n  const preamble = val.consume(1);\n  if (preamble[0] === 0x00) {\n    return;\n  } else {\n    const encodedEntrypoint = entrypointDecoder(val);\n    const params = extractRequiredLen(val);\n    const parameters = valueDecoder(new Uint8ArrayConsumer(params));\n    return {\n      entrypoint: encodedEntrypoint,\n      value: parameters\n    };\n  }\n};\nconst entrypointEncoder = entrypoint => {\n  if (entrypoint in entrypointMappingReverse) {\n    return `${entrypointMappingReverse[entrypoint]}`;\n  } else {\n    if (entrypoint.length > ENTRYPOINT_MAX_LENGTH) {\n      throw new OversizedEntryPointError(entrypoint);\n    }\n    const value = {\n      string: entrypoint\n    };\n    return `ff${valueEncoder(value).slice(8)}`;\n  }\n};\nconst parametersEncoder = val => {\n  if (!val || val.entrypoint === 'default' && 'prim' in val.value && val.value.prim === 'Unit') {\n    return '00';\n  }\n  const encodedEntrypoint = entrypointEncoder(val.entrypoint);\n  const parameters = valueEncoder(val.value);\n  const length = (parameters.length / 2).toString(16).padStart(8, '0');\n  return `ff${encodedEntrypoint}${length}${parameters}`;\n};\nconst valueParameterEncoder = value => {\n  const valueEncoded = valueEncoder(value);\n  return `${pad(valueEncoded.length / 2)}${valueEncoded}`;\n};\nconst valueParameterDecoder = val => {\n  const value = extractRequiredLen(val);\n  return valueDecoder(new Uint8ArrayConsumer(value));\n};\nconst ManagerOperationSchema = {\n  branch: 'branch',\n  contents: ['operation']\n};\nconst ActivationSchema = {\n  pkh: 'tz1',\n  secret: 'secret'\n};\nconst RevealSchema = {\n  source: 'pkh',\n  fee: 'zarith',\n  counter: 'zarith',\n  gas_limit: 'zarith',\n  storage_limit: 'zarith',\n  public_key: 'public_key'\n};\nconst DelegationSchema = {\n  source: 'pkh',\n  fee: 'zarith',\n  counter: 'zarith',\n  gas_limit: 'zarith',\n  storage_limit: 'zarith',\n  delegate: 'delegate'\n};\nconst TransactionSchema = {\n  source: 'pkh',\n  fee: 'zarith',\n  counter: 'zarith',\n  gas_limit: 'zarith',\n  storage_limit: 'zarith',\n  amount: 'zarith',\n  destination: 'address',\n  parameters: 'parameters'\n};\nconst OriginationSchema = {\n  source: 'pkh',\n  fee: 'zarith',\n  counter: 'zarith',\n  gas_limit: 'zarith',\n  storage_limit: 'zarith',\n  balance: 'zarith',\n  delegate: 'delegate',\n  script: 'script'\n};\nconst BallotSchema = {\n  source: 'pkh',\n  period: 'int32',\n  proposal: 'proposal',\n  ballot: 'ballotStmt'\n};\nconst EndorsementSchema = {\n  level: 'int32'\n};\nconst SeedNonceRevelationSchema = {\n  level: 'int32',\n  nonce: 'raw'\n};\nconst ProposalsSchema = {\n  source: 'pkh',\n  period: 'int32',\n  proposals: 'proposalArr'\n};\nconst RegisterGlobalConstantSchema = {\n  source: 'pkh',\n  fee: 'zarith',\n  counter: 'zarith',\n  gas_limit: 'zarith',\n  storage_limit: 'zarith',\n  value: 'value'\n};\nconst operationEncoder = encoders => operation => {\n  if (!(operation.kind in encoders) || !(operation.kind in kindMappingReverse)) {\n    throw new InvalidOperationKindError(operation.kind);\n  }\n  return kindMappingReverse[operation.kind] + encoders[operation.kind](operation);\n};\nconst operationDecoder = decoders => value => {\n  const op = value.consume(1);\n  const operationName = kindMapping[op[0]];\n  if (operationName === undefined) {\n    throw new UnsupportedOperationError(op[0].toString());\n  }\n  const decodedObj = decoders[operationName](value);\n  if (typeof decodedObj !== 'object') {\n    throw new OperationDecodingError('Decoded invalid operation');\n  }\n  return Object.assign({\n    kind: operationName\n  }, decodedObj);\n};\nconst schemaEncoder = encoders => schema => value => {\n  const keys = Object.keys(schema);\n  return keys.reduce((prev, key) => {\n    const valueToEncode = schema[key];\n    if (Array.isArray(valueToEncode)) {\n      const encoder = encoders[valueToEncode[0]];\n      const values = value[key];\n      if (!Array.isArray(values)) {\n        throw new OperationEncodingError(`Expected value to be Array ${JSON.stringify(values)}`);\n      }\n      return prev + values.reduce((prevBytes, current) => prevBytes + encoder(current), '');\n    } else {\n      const encoder = encoders[valueToEncode];\n      return prev + encoder(value[key]);\n    }\n  }, '');\n};\nconst schemaDecoder = decoders => schema => value => {\n  const keys = Object.keys(schema);\n  return keys.reduce((prev, key) => {\n    const valueToEncode = schema[key];\n    if (Array.isArray(valueToEncode)) {\n      const decoder = decoders[valueToEncode[0]];\n      const decoded = [];\n      const lastLength = value.length();\n      while (value.length() > 0) {\n        decoded.push(decoder(value));\n        if (lastLength === value.length()) {\n          throw new OperationDecodingError('Unable to decode value');\n        }\n      }\n      return Object.assign(Object.assign({}, prev), {\n        [key]: decoded\n      });\n    } else {\n      const decoder = decoders[valueToEncode];\n      const result = decoder(value);\n      if (typeof result !== 'undefined') {\n        return Object.assign(Object.assign({}, prev), {\n          [key]: result\n        });\n      } else {\n        return Object.assign({}, prev);\n      }\n    }\n  }, {});\n};\nconst decoders = {\n  [CODEC.SECRET]: val => toHexString(val.consume(20)),\n  [CODEC.RAW]: val => toHexString(val.consume(32)),\n  [CODEC.TZ1]: tz1Decoder,\n  [CODEC.BRANCH]: branchDecoder,\n  [CODEC.ZARITH]: zarithDecoder,\n  [CODEC.PUBLIC_KEY]: publicKeyDecoder,\n  [CODEC.PKH]: pkhDecoder,\n  [CODEC.DELEGATE]: delegateDecoder,\n  [CODEC.INT32]: int32Decoder,\n  [CODEC.SCRIPT]: scriptDecoder,\n  [CODEC.BALLOT_STATEMENT]: ballotDecoder,\n  [CODEC.PROPOSAL]: proposalDecoder,\n  [CODEC.PROPOSAL_ARR]: proposalsDecoder,\n  [CODEC.PARAMETERS]: parametersDecoder,\n  [CODEC.ADDRESS]: addressDecoder,\n  [CODEC.VALUE]: valueParameterDecoder\n};\ndecoders[CODEC.OPERATION] = operationDecoder(decoders);\ndecoders[CODEC.OP_ACTIVATE_ACCOUNT] = val => schemaDecoder(decoders)(ActivationSchema)(val);\ndecoders[CODEC.OP_DELEGATION] = val => schemaDecoder(decoders)(DelegationSchema)(val);\ndecoders[CODEC.OP_TRANSACTION] = val => schemaDecoder(decoders)(TransactionSchema)(val);\ndecoders[CODEC.OP_ORIGINATION] = val => schemaDecoder(decoders)(OriginationSchema)(val);\ndecoders[CODEC.OP_BALLOT] = val => schemaDecoder(decoders)(BallotSchema)(val);\ndecoders[CODEC.OP_ENDORSEMENT] = val => schemaDecoder(decoders)(EndorsementSchema)(val);\ndecoders[CODEC.OP_SEED_NONCE_REVELATION] = val => schemaDecoder(decoders)(SeedNonceRevelationSchema)(val);\ndecoders[CODEC.OP_PROPOSALS] = val => schemaDecoder(decoders)(ProposalsSchema)(val);\ndecoders[CODEC.OP_REVEAL] = val => schemaDecoder(decoders)(RevealSchema)(val);\ndecoders[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = val => schemaDecoder(decoders)(RegisterGlobalConstantSchema)(val);\ndecoders[CODEC.MANAGER] = schemaDecoder(decoders)(ManagerOperationSchema);\nconst encoders = {\n  [CODEC.SECRET]: val => val,\n  [CODEC.RAW]: val => val,\n  [CODEC.TZ1]: tz1Encoder,\n  [CODEC.BRANCH]: branchEncoder,\n  [CODEC.ZARITH]: zarithEncoder,\n  [CODEC.PUBLIC_KEY]: publicKeyEncoder,\n  [CODEC.PKH]: pkhEncoder,\n  [CODEC.DELEGATE]: delegateEncoder,\n  [CODEC.SCRIPT]: scriptEncoder,\n  [CODEC.BALLOT_STATEMENT]: ballotEncoder,\n  [CODEC.PROPOSAL]: proposalEncoder,\n  [CODEC.PROPOSAL_ARR]: proposalsEncoder,\n  [CODEC.INT32]: int32Encoder,\n  [CODEC.PARAMETERS]: parametersEncoder,\n  [CODEC.ADDRESS]: addressEncoder,\n  [CODEC.VALUE]: valueParameterEncoder\n};\nencoders[CODEC.OPERATION] = operationEncoder(encoders);\nencoders[CODEC.OP_ACTIVATE_ACCOUNT] = val => schemaEncoder(encoders)(ActivationSchema)(val);\nencoders[CODEC.OP_DELEGATION] = val => schemaEncoder(encoders)(DelegationSchema)(val);\nencoders[CODEC.OP_TRANSACTION] = val => schemaEncoder(encoders)(TransactionSchema)(val);\nencoders[CODEC.OP_ORIGINATION] = val => schemaEncoder(encoders)(OriginationSchema)(val);\nencoders[CODEC.OP_BALLOT] = val => schemaEncoder(encoders)(BallotSchema)(val);\nencoders[CODEC.OP_ENDORSEMENT] = val => schemaEncoder(encoders)(EndorsementSchema)(val);\nencoders[CODEC.OP_SEED_NONCE_REVELATION] = val => schemaEncoder(encoders)(SeedNonceRevelationSchema)(val);\nencoders[CODEC.OP_PROPOSALS] = val => schemaEncoder(encoders)(ProposalsSchema)(val);\nencoders[CODEC.OP_REVEAL] = val => schemaEncoder(encoders)(RevealSchema)(val);\nencoders[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = val => schemaEncoder(encoders)(RegisterGlobalConstantSchema)(val);\nencoders[CODEC.MANAGER] = schemaEncoder(encoders)(ManagerOperationSchema);\nconst blockPayloadHashEncoder = prefixEncoder(Prefix.VH);\nconst blockPayloadHashDecoder = prefixDecoder(Prefix.VH);\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nconst kindMappingNoEndorsement = __rest(kindMapping, [\"0\"]);\nconst kindMappingProto12 = Object.assign(Object.assign({}, kindMappingNoEndorsement), {\n  0x15: 'endorsement'\n});\nconst kindMappingReverseProto12 = (() => {\n  const result = {};\n  Object.keys(kindMappingProto12).forEach(key => {\n    const keyNum = typeof key === 'string' ? parseInt(key, 10) : key;\n    result[kindMappingProto12[keyNum]] = pad(keyNum, 2);\n  });\n  return result;\n})();\nconst EndorsementSchemaProto12 = {\n  slot: 'int16',\n  level: 'int32',\n  round: 'int32',\n  block_payload_hash: 'blockPayloadHash'\n};\nconst operationEncoderProto12 = encoders => operation => {\n  if (!(operation.kind in encoders) || !(operation.kind in kindMappingReverseProto12)) {\n    throw new InvalidOperationKindError(operation.kind);\n  }\n  return kindMappingReverseProto12[operation.kind] + encoders[operation.kind](operation);\n};\nconst operationDecoderProto12 = decoders => value => {\n  const op = value.consume(1);\n  const operationName = kindMappingProto12[op[0]];\n  if (operationName === undefined) {\n    throw new UnsupportedOperationError(op[0].toString());\n  }\n  const decodedObj = decoders[operationName](value);\n  if (typeof decodedObj !== 'object') {\n    throw new OperationDecodingError('Decoded invalid operation');\n  }\n  return Object.assign({\n    kind: operationName\n  }, decodedObj);\n};\nconst decodersProto12 = Object.assign(Object.assign({}, decoders), {\n  [CODEC.INT16]: int16Decoder,\n  [CODEC.BLOCK_PAYLOAD_HASH]: blockPayloadHashDecoder\n});\ndecodersProto12[CODEC.OPERATION] = operationDecoderProto12(decodersProto12);\ndecodersProto12[CODEC.OP_ACTIVATE_ACCOUNT] = val => schemaDecoder(decodersProto12)(ActivationSchema)(val);\ndecodersProto12[CODEC.OP_DELEGATION] = val => schemaDecoder(decodersProto12)(DelegationSchema)(val);\ndecodersProto12[CODEC.OP_TRANSACTION] = val => schemaDecoder(decodersProto12)(TransactionSchema)(val);\ndecodersProto12[CODEC.OP_ORIGINATION] = val => schemaDecoder(decodersProto12)(OriginationSchema)(val);\ndecodersProto12[CODEC.OP_BALLOT] = val => schemaDecoder(decodersProto12)(BallotSchema)(val);\ndecodersProto12[CODEC.OP_ENDORSEMENT] = val => schemaDecoder(decodersProto12)(EndorsementSchemaProto12)(val);\ndecodersProto12[CODEC.OP_SEED_NONCE_REVELATION] = val => schemaDecoder(decodersProto12)(SeedNonceRevelationSchema)(val);\ndecodersProto12[CODEC.OP_PROPOSALS] = val => schemaDecoder(decodersProto12)(ProposalsSchema)(val);\ndecodersProto12[CODEC.OP_REVEAL] = val => schemaDecoder(decodersProto12)(RevealSchema)(val);\ndecodersProto12[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = val => schemaDecoder(decodersProto12)(RegisterGlobalConstantSchema)(val);\ndecodersProto12[CODEC.MANAGER] = schemaDecoder(decodersProto12)(ManagerOperationSchema);\nconst encodersProto12 = Object.assign(Object.assign({}, encoders), {\n  [CODEC.INT16]: int16Encoder,\n  [CODEC.BLOCK_PAYLOAD_HASH]: blockPayloadHashEncoder\n});\nencodersProto12[CODEC.OPERATION] = operationEncoderProto12(encodersProto12);\nencodersProto12[CODEC.OP_ACTIVATE_ACCOUNT] = val => schemaEncoder(encodersProto12)(ActivationSchema)(val);\nencodersProto12[CODEC.OP_DELEGATION] = val => schemaEncoder(encodersProto12)(DelegationSchema)(val);\nencodersProto12[CODEC.OP_TRANSACTION] = val => schemaEncoder(encodersProto12)(TransactionSchema)(val);\nencodersProto12[CODEC.OP_ORIGINATION] = val => schemaEncoder(encodersProto12)(OriginationSchema)(val);\nencodersProto12[CODEC.OP_BALLOT] = val => schemaEncoder(encodersProto12)(BallotSchema)(val);\nencodersProto12[CODEC.OP_ENDORSEMENT] = val => schemaEncoder(encodersProto12)(EndorsementSchemaProto12)(val);\nencodersProto12[CODEC.OP_SEED_NONCE_REVELATION] = val => schemaEncoder(encodersProto12)(SeedNonceRevelationSchema)(val);\nencodersProto12[CODEC.OP_PROPOSALS] = val => schemaEncoder(encodersProto12)(ProposalsSchema)(val);\nencodersProto12[CODEC.OP_REVEAL] = val => schemaEncoder(encodersProto12)(RevealSchema)(val);\nencodersProto12[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = val => schemaEncoder(encodersProto12)(RegisterGlobalConstantSchema)(val);\nencodersProto12[CODEC.MANAGER] = schemaEncoder(encodersProto12)(ManagerOperationSchema);\nconst OperationKindMapping = {\n  activate_account: ActivationSchema,\n  reveal: RevealSchema,\n  delegation: DelegationSchema,\n  transaction: TransactionSchema,\n  origination: OriginationSchema,\n  ballot: BallotSchema,\n  endorsement: EndorsementSchema,\n  seed_nonce_revelation: SeedNonceRevelationSchema,\n  proposals: ProposalsSchema,\n  register_global_constant: RegisterGlobalConstantSchema\n};\n// Asymmetric difference: only account for things in arr2 that are not present in arr1, not vice versa\nconst getArrayDifference = (arr1, arr2) => {\n  return arr2.filter(x => !arr1.includes(x));\n};\nconst deleteArrayElementByValue = (array, item) => {\n  return array.filter(e => e !== item);\n};\n/**\r\n * @returns A boolean value to indicate whether the operation kind is valid or not\r\n */\nconst validateOperationKind = opKind => {\n  const opKindList = Object.keys(OperationKindMapping);\n  return opKindList.includes(opKind);\n};\n/**\r\n *  returns 0 when the two array of properties are identical or the passed property\r\n *  does not have any missing parameters from the corresponding schema\r\n *\r\n *  @returns array element differences if there are missing required property keys\r\n */\nconst validateMissingProperty = operationContent => {\n  const kind = operationContent.kind;\n  const keys = Object.keys(operationContent);\n  const cleanKeys = deleteArrayElementByValue(keys, 'kind');\n  const schemaKeys = Object.keys(OperationKindMapping[kind]);\n  return getArrayDifference(cleanKeys, schemaKeys);\n};\nvar ProtocolsHash;\n(function (ProtocolsHash) {\n  ProtocolsHash[\"Pt24m4xi\"] = \"Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd\";\n  ProtocolsHash[\"PsBABY5H\"] = \"PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU\";\n  ProtocolsHash[\"PsBabyM1\"] = \"PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS\";\n  ProtocolsHash[\"PsCARTHA\"] = \"PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb\";\n  ProtocolsHash[\"PsDELPH1\"] = \"PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo\";\n  ProtocolsHash[\"PtEdo2Zk\"] = \"PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA\";\n  ProtocolsHash[\"PsFLorena\"] = \"PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i\";\n  ProtocolsHash[\"PtGRANADs\"] = \"PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV\";\n  ProtocolsHash[\"PtHangz2\"] = \"PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx\";\n  ProtocolsHash[\"Psithaca2\"] = \"Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A\";\n  ProtocolsHash[\"PtJakart2\"] = \"PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY\";\n  ProtocolsHash[\"ProtoALpha\"] = \"ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK\";\n})(ProtocolsHash || (ProtocolsHash = {}));\nconst protoLevel = {\n  Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd: 4,\n  PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU: 5,\n  PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS: 5,\n  PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb: 6,\n  PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo: 7,\n  PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA: 8,\n  PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i: 9,\n  PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV: 10,\n  PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx: 11,\n  Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A: 12,\n  PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY: 13,\n  ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK: 14\n};\nfunction ProtoInferiorTo(a, b) {\n  return protoLevel[a] < protoLevel[b];\n}\nconst opMappingProto13 = Object.assign(Object.assign({}, opMapping), {\n  '84': 'sapling_transaction_deprecated',\n  '94': 'tx_rollup_l2_address',\n  '95': 'MIN_BLOCK_TIME',\n  '96': 'sapling_transaction'\n});\nconst opMappingReverseProto13 = (() => {\n  const result = {};\n  Object.keys(opMappingProto13).forEach(key => {\n    result[opMappingProto13[key]] = key;\n  });\n  return result;\n})();\nconst scriptEncoderProto13 = script => {\n  const code = valueEncoderProto13(script.code);\n  const storage = valueEncoderProto13(script.storage);\n  return `${pad(code.length / 2, 8)}${code}${pad(storage.length / 2, 8)}${storage}`;\n};\nconst scriptDecoderProto13 = value => {\n  const code = extractRequiredLen(value);\n  const storage = extractRequiredLen(value);\n  return {\n    code: valueDecoderProto13(new Uint8ArrayConsumer(code)),\n    storage: valueDecoderProto13(new Uint8ArrayConsumer(storage))\n  };\n};\nconst valueEncoderProto13 = value => {\n  if (Array.isArray(value)) {\n    const encoded = value.map(x => valueEncoderProto13(x)).join('');\n    const len = encoded.length / 2;\n    return `02${pad(len)}${encoded}`;\n  } else if (isPrim(value)) {\n    return primEncoderProto13(value);\n  } else if (isBytes(value)) {\n    return bytesEncoder(value);\n  } else if (isString(value)) {\n    return stringEncoder(value);\n  } else if (isInt(value)) {\n    return intEncoder(value);\n  }\n  throw new UnexpectedMichelsonValueError('Unexpected value');\n};\nconst valueDecoderProto13 = value => {\n  const preamble = value.consume(1);\n  switch (preamble[0]) {\n    case 0x0a:\n      return bytesDecoder(value);\n    case 0x01:\n      return stringDecoder(value);\n    case 0x00:\n      return intDecoder(value);\n    case 0x02:\n      {\n        const val = new Uint8ArrayConsumer(extractRequiredLen(value));\n        const results = [];\n        while (val.length() > 0) {\n          results.push(valueDecoderProto13(val));\n        }\n        return results;\n      }\n    default:\n      return primDecoderProto13(value, preamble);\n  }\n};\nconst primEncoderProto13 = value => {\n  const hasAnnot = +Array.isArray(value.annots);\n  const argsCount = Array.isArray(value.args) ? value.args.length : 0;\n  // Specify the number of args max is 3 without annotation\n  const preamble = pad(Math.min(2 * argsCount + hasAnnot + 0x03, 9), 2);\n  const op = opMappingReverseProto13[value.prim];\n  let encodedArgs = (value.args || []).map(arg => valueEncoderProto13(arg)).join('');\n  const encodedAnnots = Array.isArray(value.annots) ? encodeAnnots(value.annots) : '';\n  if (value.prim === 'LAMBDA' && argsCount) {\n    encodedArgs = pad(encodedArgs.length / 2) + encodedArgs + pad(0);\n  }\n  if ((value.prim === 'pair' || value.prim === 'Pair') && argsCount > 2) {\n    encodedArgs = encodedAnnots === '' ? pad(encodedArgs.length / 2) + encodedArgs + pad(0) : pad(encodedArgs.length / 2) + encodedArgs;\n  }\n  if (value.prim === 'view' && value.args) {\n    encodedArgs = pad(encodedArgs.length / 2) + encodedArgs + pad(0);\n  }\n  return `${preamble}${op}${encodedArgs}${encodedAnnots}`;\n};\nconst primDecoderProto13 = (value, preamble) => {\n  const hasAnnot = (preamble[0] - 0x03) % 2 === 1;\n  let argsCount = Math.floor((preamble[0] - 0x03) / 2);\n  const op = value.consume(1)[0].toString(16).padStart(2, '0');\n  const result = {\n    prim: opMappingProto13[op]\n  };\n  if (opMappingProto13[op] === 'LAMBDA') {\n    value.consume(4);\n  }\n  if (opMappingProto13[op] === 'view') {\n    if (argsCount != 0) {\n      return primViewDecoderProto13(value, result);\n    } else {\n      return result;\n    }\n  }\n  let combPairArgs;\n  let combPairAnnots;\n  if ((opMappingProto13[op] === 'pair' || opMappingProto13[op] === 'Pair') && argsCount > 2) {\n    combPairArgs = decodeCombPair(value);\n    argsCount = 0;\n    combPairAnnots = decodeAnnots(value);\n  }\n  const args = new Array(argsCount).fill(0).map(() => valueDecoderProto13(value));\n  if (opMappingProto13[op] === 'LAMBDA') {\n    value.consume(4);\n  }\n  if (combPairArgs) {\n    result['args'] = combPairArgs;\n  } else if (args.length) {\n    result['args'] = args;\n  }\n  if (combPairAnnots && combPairAnnots[0] !== '') {\n    result['annots'] = combPairAnnots;\n  } else if (hasAnnot) {\n    result['annots'] = decodeAnnots(value);\n  }\n  return result;\n};\nconst primViewDecoderProto13 = (value, result) => {\n  value.consume(4);\n  result['args'] = new Array(4).fill(0).map(() => valueDecoderProto13(value));\n  value.consume(4);\n  return result;\n};\nconst decodeCombPair = val => {\n  const array = new Uint8ArrayConsumer(extractRequiredLen(val));\n  const args = [];\n  while (array.length() > 0) {\n    args.push(valueDecoderProto13(array));\n  }\n  return args;\n};\nconst parametersDecoderProto13 = val => {\n  const preamble = val.consume(1);\n  if (preamble[0] === 0x00) {\n    return;\n  } else {\n    const encodedEntrypoint = entrypointDecoder(val);\n    const params = extractRequiredLen(val);\n    const parameters = valueDecoderProto13(new Uint8ArrayConsumer(params));\n    return {\n      entrypoint: encodedEntrypoint,\n      value: parameters\n    };\n  }\n};\nconst valueParameterDecoderProto13 = val => {\n  const value = extractRequiredLen(val);\n  return valueDecoderProto13(new Uint8ArrayConsumer(value));\n};\nconst entrypointEncoderProto13 = entrypoint => {\n  if (entrypoint in entrypointMappingReverse) {\n    return `${entrypointMappingReverse[entrypoint]}`;\n  } else {\n    if (entrypoint.length > ENTRYPOINT_MAX_LENGTH) {\n      throw new OversizedEntryPointError(entrypoint);\n    }\n    const value = {\n      string: entrypoint\n    };\n    return `ff${valueEncoderProto13(value).slice(8)}`;\n  }\n};\nconst parametersEncoderProto13 = val => {\n  if (!val || val.entrypoint === 'default' && 'prim' in val.value && val.value.prim === 'Unit') {\n    return '00';\n  }\n  const encodedEntrypoint = entrypointEncoderProto13(val.entrypoint);\n  const parameters = valueEncoderProto13(val.value);\n  const length = (parameters.length / 2).toString(16).padStart(8, '0');\n  return `ff${encodedEntrypoint}${length}${parameters}`;\n};\nconst valueParameterEncoderProto13 = value => {\n  const valueEncoded = valueEncoderProto13(value);\n  return `${pad(valueEncoded.length / 2)}${valueEncoded}`;\n};\nconst encodersProto13 = Object.assign(Object.assign({}, encodersProto12), {\n  [CODEC.SCRIPT]: scriptEncoderProto13,\n  [CODEC.PARAMETERS]: parametersEncoderProto13,\n  [CODEC.VALUE]: valueParameterEncoderProto13\n});\nencodersProto13[CODEC.OPERATION] = operationEncoderProto12(encodersProto13);\nencodersProto13[CODEC.OP_ACTIVATE_ACCOUNT] = val => schemaEncoder(encodersProto13)(ActivationSchema)(val);\nencodersProto13[CODEC.OP_DELEGATION] = val => schemaEncoder(encodersProto13)(DelegationSchema)(val);\nencodersProto13[CODEC.OP_TRANSACTION] = val => schemaEncoder(encodersProto13)(TransactionSchema)(val);\nencodersProto13[CODEC.OP_ORIGINATION] = val => schemaEncoder(encodersProto13)(OriginationSchema)(val);\nencodersProto13[CODEC.OP_BALLOT] = val => schemaEncoder(encodersProto13)(BallotSchema)(val);\nencodersProto13[CODEC.OP_ENDORSEMENT] = val => schemaEncoder(encodersProto13)(EndorsementSchemaProto12)(val);\nencodersProto13[CODEC.OP_SEED_NONCE_REVELATION] = val => schemaEncoder(encodersProto13)(SeedNonceRevelationSchema)(val);\nencodersProto13[CODEC.OP_PROPOSALS] = val => schemaEncoder(encodersProto13)(ProposalsSchema)(val);\nencodersProto13[CODEC.OP_REVEAL] = val => schemaEncoder(encodersProto13)(RevealSchema)(val);\nencodersProto13[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = val => schemaEncoder(encodersProto13)(RegisterGlobalConstantSchema)(val);\nencodersProto13[CODEC.MANAGER] = schemaEncoder(encodersProto13)(ManagerOperationSchema);\nconst decodersProto13 = Object.assign(Object.assign({}, decodersProto12), {\n  [CODEC.SCRIPT]: scriptDecoderProto13,\n  [CODEC.PARAMETERS]: parametersDecoderProto13,\n  [CODEC.VALUE]: valueParameterDecoderProto13\n});\ndecodersProto13[CODEC.OPERATION] = operationDecoderProto12(decodersProto13);\ndecodersProto13[CODEC.OP_ACTIVATE_ACCOUNT] = val => schemaDecoder(decodersProto13)(ActivationSchema)(val);\ndecodersProto13[CODEC.OP_DELEGATION] = val => schemaDecoder(decodersProto13)(DelegationSchema)(val);\ndecodersProto13[CODEC.OP_TRANSACTION] = val => schemaDecoder(decodersProto13)(TransactionSchema)(val);\ndecodersProto13[CODEC.OP_ORIGINATION] = val => schemaDecoder(decodersProto13)(OriginationSchema)(val);\ndecodersProto13[CODEC.OP_BALLOT] = val => schemaDecoder(decodersProto13)(BallotSchema)(val);\ndecodersProto13[CODEC.OP_ENDORSEMENT] = val => schemaDecoder(decodersProto13)(EndorsementSchemaProto12)(val);\ndecodersProto13[CODEC.OP_SEED_NONCE_REVELATION] = val => schemaDecoder(decodersProto13)(SeedNonceRevelationSchema)(val);\ndecodersProto13[CODEC.OP_PROPOSALS] = val => schemaDecoder(decodersProto13)(ProposalsSchema)(val);\ndecodersProto13[CODEC.OP_REVEAL] = val => schemaDecoder(decodersProto13)(RevealSchema)(val);\ndecodersProto13[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = val => schemaDecoder(decodersProto13)(RegisterGlobalConstantSchema)(val);\ndecodersProto13[CODEC.MANAGER] = schemaDecoder(decodersProto13)(ManagerOperationSchema);\n\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nconst VERSION = {\n  \"commitHash\": \"38da814ec2bb4e81c7ad5a45b6b183a4d0b8dc25\",\n  \"version\": \"12.1.1\"\n};\n\n/**\r\n * @packageDocumentation\r\n * @module @taquito/local-forging\r\n */\nconst PROTOCOL_CURRENT = ProtocolsHash.Psithaca2;\nfunction getCodec(codec, proto) {\n  if (proto === ProtocolsHash.Psithaca2) {\n    return {\n      encoder: encodersProto12[codec],\n      decoder: hex => {\n        const consumer = Uint8ArrayConsumer.fromHexString(hex);\n        return decodersProto12[codec](consumer);\n      }\n    };\n  } else if (ProtoInferiorTo(proto, ProtocolsHash.Psithaca2)) {\n    return {\n      encoder: encoders[codec],\n      decoder: hex => {\n        const consumer = Uint8ArrayConsumer.fromHexString(hex);\n        return decoders[codec](consumer);\n      }\n    };\n  } else {\n    return {\n      encoder: encodersProto13[codec],\n      decoder: hex => {\n        const consumer = Uint8ArrayConsumer.fromHexString(hex);\n        return decodersProto13[codec](consumer);\n      }\n    };\n  }\n}\nclass LocalForger {\n  constructor() {\n    let protocolHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PROTOCOL_CURRENT;\n    this.protocolHash = protocolHash;\n    this.codec = getCodec(CODEC.MANAGER, this.protocolHash);\n  }\n  forge(params) {\n    if (validateBlock(params.branch) !== ValidationResult.VALID) {\n      throw new InvalidBlockHashError(`The block hash ${params.branch} is invalid`);\n    }\n    for (const content of params.contents) {\n      if (!validateOperationKind(content.kind)) {\n        throw new InvalidOperationKindError(content.kind);\n      }\n      const diff = validateMissingProperty(content);\n      if (diff.length === 1) {\n        if (content.kind === 'delegation' && diff[0] === 'delegate') {\n          continue;\n        } else if (content.kind === 'origination' && diff[0] === 'delegate') {\n          continue;\n        } else if (content.kind === 'transaction' && diff[0] === 'parameters') {\n          continue;\n        } else {\n          throw new InvalidOperationSchemaError(`Missing properties: ${diff.join(', ').toString()}`);\n        }\n      } else if (diff.length > 1) {\n        throw new InvalidOperationSchemaError(`Missing properties: ${diff.join(', ').toString()}`);\n      }\n    }\n    const forged = this.codec.encoder(params).toLowerCase();\n    return Promise.resolve(forged);\n  }\n  parse(hex) {\n    return Promise.resolve(this.codec.decoder(hex));\n  }\n}\nconst localForger = new LocalForger();\nexport { CODEC, LocalForger, ProtocolsHash, Uint8ArrayConsumer, VERSION, decoders, encoders, getCodec, localForger };","map":{"version":3,"names":["toHexString","bytes","reduce","str","byte","toString","padStart","pad","num","paddingLen","arguments","length","undefined","ENTRYPOINT_MAX_LENGTH","CODEC","opMapping","opMappingReverse","result","Object","keys","forEach","key","kindMapping","kindMappingReverse","keyNum","parseInt","entrypointMapping","entrypointMappingReverse","InvalidBlockHashError","Error","constructor","message","name","InvalidOperationSchemaError","OversizedEntryPointError","entrypoint","InvalidBallotValueError","ballotValue","DecodeBallotValueError","InvalidHexStringError","hexString","UnexpectedMichelsonValueError","value","OperationDecodingError","OperationEncodingError","UnsupportedOperationError","op","Uint8ArrayConsumer","arr","offset","fromHexString","hex","lowHex","toLowerCase","test","Uint8Array","match","map","consume","count","subArr","subarray","get","idx","isPrim","isBytes","isString","string","isInt","int","scriptEncoder","script","code","valueEncoder","storage","scriptDecoder","extractRequiredLen","valueDecoder","Array","isArray","encoded","x","join","len","primEncoder","bytesEncoder","stringEncoder","intEncoder","preamble","bytesDecoder","stringDecoder","intDecoder","val","results","push","primDecoder","bytesLength","valueLen","Buffer","from","hexLength","_ref","BigNumber","positiveMark","binary","replace","splitted","reversed","reverse","numHex","i","c","hexNumber","isNotLastChunkMask","isNegative","numBin","slice","times","toFixed","hasAnnot","annots","argsCount","args","Math","min","prim","encodedArgs","arg","encodedAnnots","encodeAnnots","floor","primViewDecoder","combPairArgs","combPairAnnots","decodeCombPair$1","decodeAnnots","fill","array","mergedAnnot","annotLen","restOfAnnot","restOfAnnotHex","split","prefixEncoder","prefix$1","buf2hex","b58cdecode","prefix","prefixDecoder","pre","prefixLength","b58cencode","tz1Decoder","Prefix","TZ1","branchDecoder","B","pkhDecoder","TZ2","TZ3","branchEncoder","tz1Encoder","boolEncoder","bool","proposalEncoder","proposal","P","proposalDecoder","proposalsDecoder","proposals","proposalsEncoder","ballotEncoder","ballot","ballotDecoder","delegateEncoder","pkhEncoder","int32Encoder","String","shiftBy","int32Decoder","finalNum","int16Encoder","int16Decoder","boolDecoder","delegateDecoder","hasDelegate","pubkeyPrefix","substr","InvalidKeyHashError","publicKeyEncoder","EDPK","SPPK","P2PK","InvalidPublicKeyError","addressEncoder","KT1","InvalidAddressError","publicKeyDecoder","addressDecoder","address","zarithEncoder","n","fn","nn","BigNumber$1","isNaN","TypeError","lt","b","mod","minus","dividedBy","plus","zarithDecoder","mostSignificantByte","tmp","multipliedBy","entrypointDecoder","entry","parametersDecoder","encodedEntrypoint","params","parameters","entrypointEncoder","parametersEncoder","valueParameterEncoder","valueEncoded","valueParameterDecoder","ManagerOperationSchema","branch","contents","ActivationSchema","pkh","secret","RevealSchema","source","fee","counter","gas_limit","storage_limit","public_key","DelegationSchema","delegate","TransactionSchema","amount","destination","OriginationSchema","balance","BallotSchema","period","EndorsementSchema","level","SeedNonceRevelationSchema","nonce","ProposalsSchema","RegisterGlobalConstantSchema","operationEncoder","encoders","operation","kind","InvalidOperationKindError","operationDecoder","decoders","operationName","decodedObj","assign","schemaEncoder","schema","prev","valueToEncode","encoder","values","JSON","stringify","prevBytes","current","schemaDecoder","decoder","decoded","lastLength","SECRET","RAW","BRANCH","ZARITH","PUBLIC_KEY","PKH","DELEGATE","INT32","SCRIPT","BALLOT_STATEMENT","PROPOSAL","PROPOSAL_ARR","PARAMETERS","ADDRESS","VALUE","OPERATION","OP_ACTIVATE_ACCOUNT","OP_DELEGATION","OP_TRANSACTION","OP_ORIGINATION","OP_BALLOT","OP_ENDORSEMENT","OP_SEED_NONCE_REVELATION","OP_PROPOSALS","OP_REVEAL","OP_REGISTER_GLOBAL_CONSTANT","MANAGER","blockPayloadHashEncoder","VH","blockPayloadHashDecoder","kindMappingNoEndorsement","__rest","kindMappingProto12","kindMappingReverseProto12","EndorsementSchemaProto12","slot","round","block_payload_hash","operationEncoderProto12","operationDecoderProto12","decodersProto12","INT16","BLOCK_PAYLOAD_HASH","encodersProto12","OperationKindMapping","activate_account","reveal","delegation","transaction","origination","endorsement","seed_nonce_revelation","register_global_constant","getArrayDifference","arr1","arr2","filter","includes","deleteArrayElementByValue","item","e","validateOperationKind","opKind","opKindList","validateMissingProperty","operationContent","cleanKeys","schemaKeys","ProtocolsHash","protoLevel","Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd","PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU","PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS","PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb","PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo","PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA","PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i","PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV","PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx","Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A","PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY","ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK","ProtoInferiorTo","a","opMappingProto13","opMappingReverseProto13","scriptEncoderProto13","valueEncoderProto13","scriptDecoderProto13","valueDecoderProto13","primEncoderProto13","primDecoderProto13","primViewDecoderProto13","decodeCombPair","parametersDecoderProto13","valueParameterDecoderProto13","entrypointEncoderProto13","parametersEncoderProto13","valueParameterEncoderProto13","encodersProto13","decodersProto13","VERSION","PROTOCOL_CURRENT","Psithaca2","getCodec","codec","proto","consumer","LocalForger","protocolHash","forge","validateBlock","ValidationResult","VALID","content","diff","forged","Promise","resolve","parse","localForger"],"sources":["../src/utils.ts","../src/constants.ts","../src/error.ts","../src/uint8array-consumer.ts","../src/michelson/codec.ts","../src/codec.ts","../src/schema/operation.ts","../src/decoder.ts","../src/encoder.ts","../src/proto12-ithaca/codec.ts","../src/proto12-ithaca/constants.ts","../src/proto12-ithaca/schema.ts","../src/proto12-ithaca/decoder.ts","../src/proto12-ithaca/encoder.ts","../src/validator.ts","../src/protocols.ts","../src/proto13-jakarta/constants-proto13.ts","../src/proto13-jakarta/michelson-proto13/codec-proto13.ts","../src/proto13-jakarta/codec-proto13.ts","../src/proto13-jakarta/encoder-proto13.ts","../src/proto13-jakarta/decoder-proto13.ts","../src/version.ts","../src/taquito-local-forging.ts"],"sourcesContent":["export const concat = (...arr: Uint8Array[]) => {\n  return arr.reduce((a: Uint8Array, b: Uint8Array) => {\n    const c = new Uint8Array(a.length + b.length);\n    c.set(a);\n    c.set(b, a.length);\n    return c;\n  }, new Uint8Array());\n};\n\nexport const toHexString = (bytes: Uint8Array) =>\n  bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n\nexport const pad = (num: number, paddingLen = 8) => {\n  return num.toString(16).padStart(paddingLen, '0');\n};\n","/*\n * Some code in this file is originally from sotez\n * Copyright (c) 2018 Andrew Kishino\n */\n\nimport { pad } from './utils';\n\n// See: https://tezos.gitlab.io/protocols/005_babylon.html#transactions-now-have-an-entrypoint\nexport const ENTRYPOINT_MAX_LENGTH = 31;\n\nexport enum CODEC {\n  SECRET = 'secret',\n  RAW = 'raw',\n  TZ1 = 'tz1',\n  BRANCH = 'branch',\n  ZARITH = 'zarith',\n  PUBLIC_KEY = 'public_key',\n  PKH = 'pkh',\n  DELEGATE = 'delegate',\n  SCRIPT = 'script',\n  BALLOT_STATEMENT = 'ballotStmt',\n  PROPOSAL = 'proposal',\n  PROPOSAL_ARR = 'proposalArr',\n  INT32 = 'int32',\n  INT16 = 'int16',\n  PARAMETERS = 'parameters',\n  ADDRESS = 'address',\n  OPERATION = 'operation',\n  OP_ACTIVATE_ACCOUNT = 'activate_account',\n  OP_DELEGATION = 'delegation',\n  OP_TRANSACTION = 'transaction',\n  OP_ORIGINATION = 'origination',\n  OP_BALLOT = 'ballot',\n  OP_ENDORSEMENT = 'endorsement',\n  OP_SEED_NONCE_REVELATION = 'seed_nonce_revelation',\n  OP_REVEAL = 'reveal',\n  OP_PROPOSALS = 'proposals',\n  OP_REGISTER_GLOBAL_CONSTANT = 'register_global_constant',\n  VALUE = 'value',\n  MANAGER = 'manager',\n  BLOCK_PAYLOAD_HASH = 'blockPayloadHash',\n}\n\n// See https://tezos.gitlab.io/whitedoc/michelson.html#full-grammar\nexport const opMapping: { [key: string]: string } = {\n  '00': 'parameter',\n  '01': 'storage',\n  '02': 'code',\n  '03': 'False',\n  '04': 'Elt',\n  '05': 'Left',\n  '06': 'None',\n  '07': 'Pair',\n  '08': 'Right',\n  '09': 'Some',\n  '0a': 'True',\n  '0b': 'Unit',\n  '0c': 'PACK',\n  '0d': 'UNPACK',\n  '0e': 'BLAKE2B',\n  '0f': 'SHA256',\n  '10': 'SHA512',\n  '11': 'ABS',\n  '12': 'ADD',\n  '13': 'AMOUNT',\n  '14': 'AND',\n  '15': 'BALANCE',\n  '16': 'CAR',\n  '17': 'CDR',\n  '18': 'CHECK_SIGNATURE',\n  '19': 'COMPARE',\n  '1a': 'CONCAT',\n  '1b': 'CONS',\n  '1c': 'CREATE_ACCOUNT', // Removed in Edo\n  '1d': 'CREATE_CONTRACT', // Removed in Edo\n  '1e': 'IMPLICIT_ACCOUNT',\n  '1f': 'DIP',\n  '20': 'DROP',\n  '21': 'DUP',\n  '22': 'EDIV',\n  '23': 'EMPTY_MAP',\n  '24': 'EMPTY_SET',\n  '25': 'EQ',\n  '26': 'EXEC',\n  '27': 'FAILWITH',\n  '28': 'GE',\n  '29': 'GET',\n  '2a': 'GT',\n  '2b': 'HASH_KEY',\n  '2c': 'IF',\n  '2d': 'IF_CONS',\n  '2e': 'IF_LEFT',\n  '2f': 'IF_NONE',\n  '30': 'INT',\n  '31': 'LAMBDA',\n  '32': 'LE',\n  '33': 'LEFT',\n  '34': 'LOOP',\n  '35': 'LSL',\n  '36': 'LSR',\n  '37': 'LT',\n  '38': 'MAP',\n  '39': 'MEM',\n  '3a': 'MUL',\n  '3b': 'NEG',\n  '3c': 'NEQ',\n  '3d': 'NIL',\n  '3e': 'NONE',\n  '3f': 'NOT',\n  '40': 'NOW',\n  '41': 'OR',\n  '42': 'PAIR',\n  '43': 'PUSH',\n  '44': 'RIGHT',\n  '45': 'SIZE',\n  '46': 'SOME',\n  '47': 'SOURCE',\n  '48': 'SENDER',\n  '49': 'SELF',\n  '4a': 'STEPS_TO_QUOTA', // Removed in Edo\n  '4b': 'SUB',\n  '4c': 'SWAP',\n  '4d': 'TRANSFER_TOKENS',\n  '4e': 'SET_DELEGATE',\n  '4f': 'UNIT',\n  '50': 'UPDATE',\n  '51': 'XOR',\n  '52': 'ITER',\n  '53': 'LOOP_LEFT',\n  '54': 'ADDRESS',\n  '55': 'CONTRACT',\n  '56': 'ISNAT',\n  '57': 'CAST',\n  '58': 'RENAME',\n  '59': 'bool',\n  '5a': 'contract',\n  '5b': 'int',\n  '5c': 'key',\n  '5d': 'key_hash',\n  '5e': 'lambda',\n  '5f': 'list',\n  '60': 'map',\n  '61': 'big_map',\n  '62': 'nat',\n  '63': 'option',\n  '64': 'or',\n  '65': 'pair',\n  '66': 'set',\n  '67': 'signature',\n  '68': 'string',\n  '69': 'bytes',\n  '6a': 'mutez',\n  '6b': 'timestamp',\n  '6c': 'unit',\n  '6d': 'operation',\n  '6e': 'address',\n  '6f': 'SLICE',\n  '70': 'DIG',\n  '71': 'DUG',\n  '72': 'EMPTY_BIG_MAP',\n  '73': 'APPLY',\n  '74': 'chain_id',\n  '75': 'CHAIN_ID',\n  '76': 'LEVEL',\n  '77': 'SELF_ADDRESS',\n  '78': 'never',\n  '79': 'NEVER',\n  '7a': 'UNPAIR',\n  '7b': 'VOTING_POWER',\n  '7c': 'TOTAL_VOTING_POWER',\n  '7d': 'KECCAK',\n  '7e': 'SHA3',\n  '7f': 'PAIRING_CHECK',\n  '80': 'bls12_381_g1',\n  '81': 'bls12_381_g2',\n  '82': 'bls12_381_fr',\n  '83': 'sapling_state',\n  '84': 'sapling_transaction',\n  '85': 'SAPLING_EMPTY_STATE',\n  '86': 'SAPLING_VERIFY_UPDATE',\n  '87': 'ticket',\n  '88': 'TICKET',\n  '89': 'READ_TICKET',\n  '8a': 'SPLIT_TICKET',\n  '8b': 'JOIN_TICKETS',\n  '8c': 'GET_AND_UPDATE',\n  '8d': 'chest',\n  '8e': 'chest_key',\n  '8f': 'OPEN_CHEST',\n  '90': 'VIEW',\n  '91': 'view',\n  '92': 'constant',\n  '93': 'SUB_MUTEZ',\n};\n\nexport const opMappingReverse = (() => {\n  const result: { [key: string]: string } = {};\n  Object.keys(opMapping).forEach((key: string) => {\n    result[opMapping[key]] = key;\n  });\n  return result;\n})();\n\n// See https://tezos.gitlab.io/api/p2p.html\nexport const kindMapping: { [key: number]: string } = {\n  0x04: 'activate_account',\n  0x6b: 'reveal',\n  0x6e: 'delegation',\n  0x6c: 'transaction',\n  0x6d: 'origination',\n  0x06: 'ballot',\n  0x00: 'endorsement',\n  0x01: 'seed_nonce_revelation',\n  0x05: 'proposals',\n  0x6f: 'register_global_constant',\n};\n\nexport const kindMappingReverse = (() => {\n  const result: { [key: string]: string } = {};\n  Object.keys(kindMapping).forEach((key: number | string) => {\n    const keyNum = typeof key === 'string' ? parseInt(key, 10) : key;\n    result[kindMapping[keyNum]] = pad(keyNum, 2);\n  });\n  return result;\n})();\n\n// See https://tezos.gitlab.io/protocols/005_babylon.html#transactions-now-have-an-entrypoint\nexport const entrypointMapping: { [key: string]: string } = {\n  '00': 'default',\n  '01': 'root',\n  '02': 'do',\n  '03': 'set_delegate',\n  '04': 'remove_delegate',\n};\n\nexport const entrypointMappingReverse = (() => {\n  const result: { [key: string]: string } = {};\n  Object.keys(entrypointMapping).forEach((key: string) => {\n    result[entrypointMapping[key]] = key;\n  });\n  return result;\n})();\n","import { ENTRYPOINT_MAX_LENGTH } from './constants';\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid block hash being passed or used\n */\nexport class InvalidBlockHashError extends Error {\n  public name = 'InvalidBlockHashError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid operation schema being passed or used\n */ export class InvalidOperationSchemaError extends Error {\n  public name = 'InvalidOperationSchemaError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an entrypoint exceeding maximum size\n */\nexport class OversizedEntryPointError extends Error {\n  public name = 'OversizedEntryPointError';\n  constructor(public entrypoint: string) {\n    super(\n      `Oversized entrypoint: ${entrypoint}. The maximum length of entrypoint is ${ENTRYPOINT_MAX_LENGTH}`\n    );\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid ballot value\n */\nexport class InvalidBallotValueError extends Error {\n  public name = 'InvalidBallotValueError';\n  constructor(public ballotValue: string) {\n    super(`The ballot value '${ballotValue}' is invalid`);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when trying to decode ballot value\n */\nexport class DecodeBallotValueError extends Error {\n  public name = 'DecodeBallotValueError';\n  constructor(public ballotValue: string) {\n    super(`Failed to decode ballot value ${ballotValue}`);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid hex string have been passed or used\n */\nexport class InvalidHexStringError extends Error {\n  public name = 'InvalidHexStringError';\n  constructor(public hexString: string) {\n    super(`The hex string '${hexString}' is invalid`);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates unexpected Michelson Value being passed or used\n */\nexport class UnexpectedMichelsonValueError extends Error {\n  public name = 'UnexpectedMichelsonValueError';\n  constructor(public value: string) {\n    super(`Failed to encode michelson value '${value}'`);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when trying to decode an operation\n */\nexport class OperationDecodingError extends Error {\n  public name = 'OperationDecodingError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when trying to encode an operation\n */\nexport class OperationEncodingError extends Error {\n  public name = 'OperationEncodingError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an unsupported operation being passed or used\n */\nexport class UnsupportedOperationError extends Error {\n  public name = 'UnsupportedOperationError';\n  constructor(public op: string) {\n    super(`The operation '${op}' is unsupported`);\n  }\n}\n","import { InvalidHexStringError } from './error';\nexport class Uint8ArrayConsumer {\n  static fromHexString(hex: string) {\n    const lowHex = hex.toLowerCase();\n    if (/^(([a-f]|\\d){2})*$/.test(lowHex)) {\n      const arr = new Uint8Array(\n        (lowHex.match(/([a-z]|\\d){2}/g) || []).map((byte) => parseInt(byte, 16))\n      );\n      return new Uint8ArrayConsumer(arr);\n    } else {\n      throw new InvalidHexStringError(lowHex);\n    }\n  }\n\n  constructor(private readonly arr: Uint8Array, private offset: number = 0) {}\n\n  public consume(count: number): Uint8Array {\n    const subArr = this.arr.subarray(this.offset, this.offset + count);\n    this.offset += count;\n    return subArr;\n  }\n\n  public get(idx: number) {\n    return this.arr[this.offset + idx];\n  }\n\n  public length() {\n    return this.arr.length - this.offset;\n  }\n}\n","import { BigNumber } from 'bignumber.js';\nimport { Decoder } from '../decoder';\nimport { Uint8ArrayConsumer } from '../uint8array-consumer';\nimport { Encoder } from '../taquito-local-forging';\nimport { opMappingReverse, opMapping } from '../constants';\nimport { pad } from '../utils';\nimport { InvalidHexStringError, UnexpectedMichelsonValueError } from '../error';\n\nexport type PrimValue = { prim: string; args?: MichelsonValue[]; annots?: string[] };\nexport type BytesValue = { bytes: string };\nexport type StringValue = { string: string };\nexport type IntValue = { int: string };\nexport type MichelsonValue =\n  | PrimValue\n  | BytesValue\n  | StringValue\n  | IntValue\n  | (PrimValue | BytesValue | StringValue | IntValue)[];\n\nexport const isPrim = (value: MichelsonValue): value is PrimValue => {\n  return 'prim' in value;\n};\n\nexport const isBytes = (value: MichelsonValue): value is BytesValue => {\n  return 'bytes' in value && typeof value.bytes === 'string';\n};\n\nexport const isString = (value: MichelsonValue): value is StringValue => {\n  return 'string' in value && typeof value.string === 'string';\n};\n\nexport const isInt = (value: MichelsonValue): value is IntValue => {\n  return 'int' in value && typeof value.int === 'string';\n};\n\nexport const scriptEncoder: Encoder<{ code: MichelsonValue; storage: MichelsonValue }> = (\n  script\n) => {\n  const code = valueEncoder(script.code);\n  const storage = valueEncoder(script.storage);\n  return `${pad(code.length / 2, 8)}${code}${pad(storage.length / 2, 8)}${storage}`;\n};\n\nexport const scriptDecoder: Decoder = (value: Uint8ArrayConsumer) => {\n  const code = extractRequiredLen(value);\n  const storage = extractRequiredLen(value);\n\n  return {\n    code: valueDecoder(new Uint8ArrayConsumer(code)),\n    storage: valueDecoder(new Uint8ArrayConsumer(storage)),\n  };\n};\n\nexport const valueEncoder: Encoder<MichelsonValue> = (value: MichelsonValue) => {\n  if (Array.isArray(value)) {\n    const encoded = value.map((x) => valueEncoder(x)).join('');\n    const len = encoded.length / 2;\n    return `02${pad(len)}${encoded}`;\n  } else if (isPrim(value)) {\n    return primEncoder(value);\n  } else if (isBytes(value)) {\n    return bytesEncoder(value);\n  } else if (isString(value)) {\n    return stringEncoder(value);\n  } else if (isInt(value)) {\n    return intEncoder(value);\n  }\n\n  throw new UnexpectedMichelsonValueError(value);\n};\n\nexport const valueDecoder: Decoder = (value: Uint8ArrayConsumer) => {\n  const preamble = value.consume(1);\n  switch (preamble[0]) {\n    case 0x0a:\n      return bytesDecoder(value);\n    case 0x01:\n      return stringDecoder(value);\n    case 0x00:\n      return intDecoder(value);\n    case 0x02: {\n      const val = new Uint8ArrayConsumer(extractRequiredLen(value));\n      const results = [];\n      while (val.length() > 0) {\n        results.push(valueDecoder(val));\n      }\n      return results;\n    }\n    default:\n      return primDecoder(value, preamble);\n  }\n};\n\nexport const extractRequiredLen = (value: Uint8ArrayConsumer, bytesLength = 4) => {\n  const len = value.consume(bytesLength);\n  const valueLen = parseInt(Buffer.from(len).toString('hex'), 16);\n  return value.consume(valueLen);\n};\n\nexport const bytesEncoder: Encoder<BytesValue> = (value) => {\n  if (!/^([A-Fa-f0-9]{2})*$/.test(value.bytes)) {\n    throw new InvalidHexStringError(value.bytes);\n  }\n\n  const len = value.bytes.length / 2;\n  return `0a${pad(len)}${value.bytes}`;\n};\n\nexport const bytesDecoder: Decoder = (value: Uint8ArrayConsumer) => {\n  const bytes = extractRequiredLen(value);\n  return {\n    bytes: Buffer.from(bytes).toString('hex'),\n  };\n};\n\nexport const stringEncoder: Encoder<StringValue> = (value) => {\n  const str = Buffer.from(value.string, 'utf8').toString('hex');\n  const hexLength = str.length / 2;\n  return `01${pad(hexLength)}${str}`;\n};\n\nexport const stringDecoder: Decoder = (value: Uint8ArrayConsumer) => {\n  const str = extractRequiredLen(value);\n  return {\n    string: Buffer.from(str).toString('utf8'),\n  };\n};\n\nexport const intEncoder: Encoder<IntValue> = ({ int }) => {\n  const num = new BigNumber(int, 10);\n  const positiveMark = num.toString(2)[0] === '-' ? '1' : '0';\n  const binary = num.toString(2).replace(/-/g, '');\n\n  const pad =\n    binary.length <= 6\n      ? 6\n      : (binary.length - 6) % 7\n      ? binary.length + 7 - ((binary.length - 6) % 7)\n      : binary.length;\n\n  const splitted = binary.padStart(pad, '0').match(/\\d{6,7}/g);\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const reversed = splitted!.reverse();\n\n  reversed[0] = positiveMark + reversed[0];\n\n  const numHex = reversed.map((x: string, i: number) =>\n    // Add one to the last chunk\n    parseInt((i === reversed.length - 1 ? '0' : '1') + x, 2)\n      .toString(16)\n      .padStart(2, '0')\n  );\n\n  return `00${numHex.join('')}`;\n};\n\nexport const intDecoder = (value: Uint8ArrayConsumer): IntValue => {\n  let c = value.consume(1)[0];\n  const hexNumber: number[] = [];\n  const isNotLastChunkMask = 1 << 7;\n  while (c & isNotLastChunkMask) {\n    hexNumber.push(c);\n    c = value.consume(1)[0];\n  }\n\n  hexNumber.push(c);\n  const isNegative = !!((1 << 6) & hexNumber[0]);\n\n  hexNumber[0] = hexNumber[0] & 0b1111111;\n\n  const numBin = hexNumber\n    .map((x, i) =>\n      x\n        .toString(2)\n        .slice(i === 0 ? -6 : -7)\n        .padStart(i === 0 ? 6 : 7, '0')\n    )\n    .reverse();\n  let num = new BigNumber(numBin.join(''), 2);\n  if (isNegative) {\n    num = num.times(-1);\n  }\n\n  return {\n    int: num.toFixed(),\n  };\n};\n\nexport const primEncoder: Encoder<PrimValue> = (value) => {\n  const hasAnnot = +Array.isArray(value.annots);\n  const argsCount = Array.isArray(value.args) ? value.args.length : 0;\n\n  // Specify the number of args max is 3 without annotation\n  const preamble = pad(Math.min(2 * argsCount + hasAnnot + 0x03, 9), 2);\n\n  const op = opMappingReverse[value.prim];\n\n  let encodedArgs = (value.args || []).map((arg) => valueEncoder(arg)).join('');\n  const encodedAnnots = Array.isArray(value.annots) ? encodeAnnots(value.annots) : '';\n\n  if (value.prim === 'LAMBDA' && argsCount) {\n    encodedArgs = pad(encodedArgs.length / 2) + encodedArgs + pad(0);\n  }\n\n  if ((value.prim === 'pair' || value.prim === 'Pair') && argsCount > 2) {\n    encodedArgs =\n      encodedAnnots === ''\n        ? pad(encodedArgs.length / 2) + encodedArgs + pad(0)\n        : pad(encodedArgs.length / 2) + encodedArgs;\n  }\n\n  if (value.prim === 'view' && value.args) {\n    encodedArgs = pad(encodedArgs.length / 2) + encodedArgs + pad(0);\n  }\n\n  return `${preamble}${op}${encodedArgs}${encodedAnnots}`;\n};\n\nexport const primDecoder = (value: Uint8ArrayConsumer, preamble: Uint8Array) => {\n  const hasAnnot = (preamble[0] - 0x03) % 2 === 1;\n  let argsCount = Math.floor((preamble[0] - 0x03) / 2);\n  const op = value.consume(1)[0].toString(16).padStart(2, '0');\n\n  const result: Partial<PrimValue> = {\n    prim: opMapping[op],\n  };\n\n  if (opMapping[op] === 'LAMBDA') {\n    value.consume(4);\n  }\n\n  if (opMapping[op] === 'view') {\n    if (argsCount != 0) {\n      return primViewDecoder(value, result);\n    } else {\n      return result;\n    }\n  }\n\n  let combPairArgs;\n  let combPairAnnots;\n  if ((opMapping[op] === 'pair' || opMapping[op] === 'Pair') && argsCount > 2) {\n    combPairArgs = decodeCombPair(value);\n    argsCount = 0;\n    combPairAnnots = decodeAnnots(value);\n  }\n\n  const args = new Array(argsCount).fill(0).map(() => valueDecoder(value));\n\n  if (opMapping[op] === 'LAMBDA') {\n    value.consume(4);\n  }\n\n  if (combPairArgs) {\n    result['args'] = combPairArgs as any;\n  } else if (args.length) {\n    result['args'] = args as any;\n  }\n\n  if (combPairAnnots && (combPairAnnots as any)[0] !== '') {\n    result['annots'] = combPairAnnots as any;\n  } else if (hasAnnot) {\n    result['annots'] = decodeAnnots(value) as any;\n  }\n\n  return result;\n};\n\nexport const primViewDecoder = (value: Uint8ArrayConsumer, result: Partial<PrimValue>) => {\n  value.consume(4);\n  result['args'] = new Array(4).fill(0).map(() => valueDecoder(value)) as any;\n  value.consume(4);\n  return result;\n};\n\nexport const decodeCombPair: Decoder = (val: Uint8ArrayConsumer) => {\n  const array = new Uint8ArrayConsumer(extractRequiredLen(val));\n  const args = [];\n  while (array.length() > 0) {\n    args.push(valueDecoder(array));\n  }\n  return args;\n};\n\nexport const encodeAnnots: Encoder<string[]> = (value: string[]) => {\n  const mergedAnnot = value\n    .map((x) => {\n      return Buffer.from(x, 'utf8').toString('hex');\n    })\n    .join('20');\n\n  const len = mergedAnnot.length / 2;\n  return `${pad(len)}${mergedAnnot}`;\n};\n\nexport const decodeAnnots: Decoder = (val: Uint8ArrayConsumer): string[] => {\n  const len = val.consume(4);\n  const annotLen = parseInt(Buffer.from(len).toString('hex'), 16);\n  const restOfAnnot = val.consume(annotLen);\n\n  const restOfAnnotHex = Buffer.from(restOfAnnot).toString('hex');\n  return restOfAnnotHex.split('20').map((x) => Buffer.from(x, 'hex').toString('utf8'));\n};\n","import {\n  b58cdecode,\n  b58cencode,\n  buf2hex,\n  Prefix,\n  prefix as prefixMap,\n  prefixLength,\n  InvalidKeyHashError,\n  InvalidPublicKeyError,\n  InvalidAddressError,\n} from '@taquito/utils';\nimport { OversizedEntryPointError, InvalidBallotValueError, DecodeBallotValueError } from './error';\nimport BigNumber from 'bignumber.js';\nimport { entrypointMapping, entrypointMappingReverse, ENTRYPOINT_MAX_LENGTH } from './constants';\nimport { extractRequiredLen, valueDecoder, valueEncoder, MichelsonValue } from './michelson/codec';\nimport { Uint8ArrayConsumer } from './uint8array-consumer';\nimport { pad } from './utils';\n\nexport const prefixEncoder = (prefix: Prefix) => (str: string) => {\n  return buf2hex(Buffer.from(b58cdecode(str, prefixMap[prefix])));\n};\n\nexport const prefixDecoder = (pre: Prefix) => (str: Uint8ArrayConsumer) => {\n  const val = str.consume(prefixLength[pre]);\n  return b58cencode(val, prefixMap[pre]);\n};\n\nexport const tz1Decoder = prefixDecoder(Prefix.TZ1);\nexport const branchDecoder = prefixDecoder(Prefix.B);\nexport const pkhDecoder = (val: Uint8ArrayConsumer) => {\n  const prefix = val.consume(1);\n\n  if (prefix[0] === 0x00) {\n    return prefixDecoder(Prefix.TZ1)(val);\n  } else if (prefix[0] === 0x01) {\n    return prefixDecoder(Prefix.TZ2)(val);\n  } else if (prefix[0] === 0x02) {\n    return prefixDecoder(Prefix.TZ3)(val);\n  }\n};\n\nexport const branchEncoder = prefixEncoder(Prefix.B);\nexport const tz1Encoder = prefixEncoder(Prefix.TZ1);\n\nexport const boolEncoder = (bool: unknown): string => (bool ? 'ff' : '00');\n\nexport const proposalEncoder = (proposal: string): string => {\n  return prefixEncoder(Prefix.P)(proposal);\n};\n\nexport const proposalDecoder = (proposal: Uint8ArrayConsumer): string => {\n  return prefixDecoder(Prefix.P)(proposal);\n};\n\nexport const proposalsDecoder = (proposal: Uint8ArrayConsumer): string[] => {\n  const proposals = [];\n  proposal.consume(4);\n  while (proposal.length() > 0) {\n    proposals.push(proposalDecoder(proposal));\n  }\n  return proposals;\n};\n\nexport const proposalsEncoder = (proposals: string[]): string => {\n  return pad(32 * proposals.length) + proposals.map((x) => proposalEncoder(x)).join('');\n};\n\nexport const ballotEncoder = (ballot: string): string => {\n  switch (ballot) {\n    case 'yay':\n      return '00';\n    case 'nay':\n      return '01';\n    case 'pass':\n      return '02';\n    default:\n      throw new InvalidBallotValueError(ballot);\n  }\n};\n\nexport const ballotDecoder = (ballot: Uint8ArrayConsumer): string => {\n  const value = ballot.consume(1);\n  switch (value[0]) {\n    case 0x00:\n      return 'yay';\n    case 0x01:\n      return 'nay';\n    case 0x02:\n      return 'pass';\n    default:\n      throw new DecodeBallotValueError(value[0].toString());\n  }\n};\n\nexport const delegateEncoder = (val: string) => {\n  if (val) {\n    return boolEncoder(true) + pkhEncoder(val);\n  } else {\n    return boolEncoder(false);\n  }\n};\n\nexport const int32Encoder = (val: number | string): string => {\n  const num = parseInt(String(val), 10);\n  const byte = [];\n  for (let i = 0; i < 4; i++) {\n    const shiftBy = (4 - (i + 1)) * 8;\n    byte.push((num & (0xff << shiftBy)) >> shiftBy);\n  }\n  return Buffer.from(byte).toString('hex');\n};\n\nexport const int32Decoder = (val: Uint8ArrayConsumer) => {\n  const num = val.consume(4);\n  let finalNum = 0;\n  for (let i = 0; i < num.length; i++) {\n    finalNum = finalNum | (num[i] << ((num.length - (i + 1)) * 8));\n  }\n\n  return finalNum;\n};\n\nexport const int16Encoder = (val: number | string): string => {\n  const num = parseInt(String(val), 10);\n  const byte = [];\n  for (let i = 0; i < 2; i++) {\n    const shiftBy = (2 - (i + 1)) * 8;\n    byte.push((num & (0xff << shiftBy)) >> shiftBy);\n  }\n  return Buffer.from(byte).toString('hex');\n};\n\nexport const int16Decoder = (val: Uint8ArrayConsumer) => {\n  const num = val.consume(2);\n  let finalNum = 0;\n  for (let i = 0; i < num.length; i++) {\n    finalNum = finalNum | (num[i] << ((num.length - (i + 1)) * 8));\n  }\n\n  return finalNum;\n};\n\nexport const boolDecoder = (val: Uint8ArrayConsumer): boolean => {\n  const bool = val.consume(1);\n  return bool[0] === 0xff;\n};\n\nexport const delegateDecoder = (val: Uint8ArrayConsumer) => {\n  const hasDelegate = boolDecoder(val);\n  if (hasDelegate) {\n    return pkhDecoder(val);\n  }\n};\n\nexport const pkhEncoder = (val: string) => {\n  const pubkeyPrefix = val.substr(0, 3);\n  switch (pubkeyPrefix) {\n    case Prefix.TZ1:\n      return '00' + prefixEncoder(Prefix.TZ1)(val);\n    case Prefix.TZ2:\n      return '01' + prefixEncoder(Prefix.TZ2)(val);\n    case Prefix.TZ3:\n      return '02' + prefixEncoder(Prefix.TZ3)(val);\n    default:\n      throw new InvalidKeyHashError(val);\n  }\n};\n\nexport const publicKeyEncoder = (val: string) => {\n  const pubkeyPrefix = val.substr(0, 4);\n  switch (pubkeyPrefix) {\n    case Prefix.EDPK:\n      return '00' + prefixEncoder(Prefix.EDPK)(val);\n    case Prefix.SPPK:\n      return '01' + prefixEncoder(Prefix.SPPK)(val);\n    case Prefix.P2PK:\n      return '02' + prefixEncoder(Prefix.P2PK)(val);\n    default:\n      throw new InvalidPublicKeyError(val);\n  }\n};\n\nexport const addressEncoder = (val: string): string => {\n  const pubkeyPrefix = val.substr(0, 3);\n  switch (pubkeyPrefix) {\n    case Prefix.TZ1:\n    case Prefix.TZ2:\n    case Prefix.TZ3:\n      return '00' + pkhEncoder(val);\n    case Prefix.KT1:\n      return '01' + prefixEncoder(Prefix.KT1)(val) + '00';\n    default:\n      throw new InvalidAddressError(val);\n  }\n};\n\nexport const publicKeyDecoder = (val: Uint8ArrayConsumer) => {\n  const preamble = val.consume(1);\n  switch (preamble[0]) {\n    case 0x00:\n      return prefixDecoder(Prefix.EDPK)(val);\n    case 0x01:\n      return prefixDecoder(Prefix.SPPK)(val);\n    case 0x02:\n      return prefixDecoder(Prefix.P2PK)(val);\n    default:\n      throw new InvalidPublicKeyError(val.toString());\n  }\n};\n\nexport const addressDecoder = (val: Uint8ArrayConsumer) => {\n  const preamble = val.consume(1);\n  switch (preamble[0]) {\n    case 0x00:\n      return pkhDecoder(val);\n    case 0x01: {\n      const address = prefixDecoder(Prefix.KT1)(val);\n      val.consume(1);\n      return address;\n    }\n    default:\n      throw new InvalidAddressError(val.toString());\n  }\n};\n\nexport const zarithEncoder = (n: string): string => {\n  const fn: Array<string> = [];\n  let nn = new BigNumber(n, 10);\n  if (nn.isNaN()) {\n    throw new TypeError(`Invalid zarith number ${n}`);\n  }\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (nn.lt(128)) {\n      if (nn.lt(16)) fn.push('0');\n      fn.push(nn.toString(16));\n      break;\n    } else {\n      let b = nn.mod(128);\n      nn = nn.minus(b);\n      nn = nn.dividedBy(128);\n      b = b.plus(128);\n      fn.push(b.toString(16));\n    }\n  }\n  return fn.join('');\n};\n\nexport const zarithDecoder = (n: Uint8ArrayConsumer): string => {\n  let mostSignificantByte = 0;\n  while (mostSignificantByte < n.length() && (n.get(mostSignificantByte) & 128) !== 0) {\n    mostSignificantByte += 1;\n  }\n\n  let num = new BigNumber(0);\n  for (let i = mostSignificantByte; i >= 0; i -= 1) {\n    const tmp = n.get(i) & 0x7f;\n    num = num.multipliedBy(128);\n    num = num.plus(tmp);\n  }\n\n  n.consume(mostSignificantByte + 1);\n  return new BigNumber(num).toString();\n};\n\nexport const entrypointDecoder = (value: Uint8ArrayConsumer) => {\n  const preamble = pad(value.consume(1)[0], 2);\n\n  if (preamble in entrypointMapping) {\n    return entrypointMapping[preamble];\n  } else {\n    const entry = extractRequiredLen(value, 1);\n\n    const entrypoint = Buffer.from(entry).toString('utf8');\n\n    if (entrypoint.length > ENTRYPOINT_MAX_LENGTH) {\n      throw new OversizedEntryPointError(entrypoint);\n    }\n    return entrypoint;\n  }\n};\n\nexport const parametersDecoder = (val: Uint8ArrayConsumer) => {\n  const preamble = val.consume(1);\n  if (preamble[0] === 0x00) {\n    return;\n  } else {\n    const encodedEntrypoint = entrypointDecoder(val);\n    const params = extractRequiredLen(val);\n    const parameters = valueDecoder(new Uint8ArrayConsumer(params));\n    return {\n      entrypoint: encodedEntrypoint,\n      value: parameters,\n    };\n  }\n};\nexport const entrypointEncoder = (entrypoint: string) => {\n  if (entrypoint in entrypointMappingReverse) {\n    return `${entrypointMappingReverse[entrypoint]}`;\n  } else {\n    if (entrypoint.length > ENTRYPOINT_MAX_LENGTH) {\n      throw new OversizedEntryPointError(entrypoint);\n    }\n\n    const value = { string: entrypoint };\n    return `ff${valueEncoder(value).slice(8)}`;\n  }\n};\n\nexport const parametersEncoder = (val: { entrypoint: string; value: MichelsonValue }) => {\n  if (!val || (val.entrypoint === 'default' && 'prim' in val.value && val.value.prim === 'Unit')) {\n    return '00';\n  }\n\n  const encodedEntrypoint = entrypointEncoder(val.entrypoint);\n  const parameters = valueEncoder(val.value);\n  const length = (parameters.length / 2).toString(16).padStart(8, '0');\n  return `ff${encodedEntrypoint}${length}${parameters}`;\n};\n\nexport const valueParameterEncoder = (value: MichelsonValue) => {\n  const valueEncoded = valueEncoder(value);\n  return `${pad(valueEncoded.length / 2)}${valueEncoded}`;\n};\n\nexport const valueParameterDecoder = (val: Uint8ArrayConsumer) => {\n  const value = extractRequiredLen(val);\n  return valueDecoder(new Uint8ArrayConsumer(value));\n};\n","import { Decoder } from '../decoder';\nimport { Uint8ArrayConsumer } from '../uint8array-consumer';\nimport { kindMapping, kindMappingReverse } from '../constants';\nimport { InvalidOperationKindError } from '@taquito/utils';\nimport {\n  OperationDecodingError,\n  OperationEncodingError,\n  UnsupportedOperationError,\n} from '../error';\n\nexport const ManagerOperationSchema = {\n  branch: 'branch',\n  contents: ['operation'],\n};\n\nexport const ActivationSchema = {\n  pkh: 'tz1',\n  secret: 'secret',\n};\n\nexport const RevealSchema = {\n  source: 'pkh',\n  fee: 'zarith',\n  counter: 'zarith',\n  gas_limit: 'zarith',\n  storage_limit: 'zarith',\n  public_key: 'public_key',\n};\n\nexport const DelegationSchema = {\n  source: 'pkh',\n  fee: 'zarith',\n  counter: 'zarith',\n  gas_limit: 'zarith',\n  storage_limit: 'zarith',\n  delegate: 'delegate',\n};\n\nexport const TransactionSchema = {\n  source: 'pkh',\n  fee: 'zarith',\n  counter: 'zarith',\n  gas_limit: 'zarith',\n  storage_limit: 'zarith',\n  amount: 'zarith',\n  destination: 'address',\n  parameters: 'parameters',\n};\n\nexport const OriginationSchema = {\n  source: 'pkh',\n  fee: 'zarith',\n  counter: 'zarith',\n  gas_limit: 'zarith',\n  storage_limit: 'zarith',\n  balance: 'zarith',\n  delegate: 'delegate',\n  script: 'script',\n};\n\nexport const BallotSchema = {\n  source: 'pkh',\n  period: 'int32',\n  proposal: 'proposal',\n  ballot: 'ballotStmt',\n};\n\nexport const EndorsementSchema = {\n  level: 'int32',\n};\n\nexport const SeedNonceRevelationSchema = {\n  level: 'int32',\n  nonce: 'raw',\n};\n\nexport const ProposalsSchema = {\n  source: 'pkh',\n  period: 'int32',\n  proposals: 'proposalArr',\n};\n\nexport const RegisterGlobalConstantSchema = {\n  source: 'pkh',\n  fee: 'zarith',\n  counter: 'zarith',\n  gas_limit: 'zarith',\n  storage_limit: 'zarith',\n  value: 'value',\n};\n\nexport const operationEncoder =\n  (encoders: { [key: string]: (val: object) => string }) => (operation: { kind: string }) => {\n    if (!(operation.kind in encoders) || !(operation.kind in kindMappingReverse)) {\n      throw new InvalidOperationKindError(operation.kind);\n    }\n\n    return kindMappingReverse[operation.kind] + encoders[operation.kind](operation);\n  };\n\nexport const operationDecoder =\n  (decoders: { [key: string]: Decoder }) => (value: Uint8ArrayConsumer) => {\n    const op = value.consume(1);\n\n    const operationName = kindMapping[op[0]];\n    if (operationName === undefined) {\n      throw new UnsupportedOperationError(op[0].toString());\n    }\n\n    const decodedObj = decoders[operationName](value);\n\n    if (typeof decodedObj !== 'object') {\n      throw new OperationDecodingError('Decoded invalid operation');\n    }\n\n    return {\n      kind: operationName,\n      ...decodedObj,\n    };\n  };\n\nexport const schemaEncoder =\n  (encoders: { [key: string]: (val: object) => string }) =>\n  (schema: { [key: string]: string | string[] }) =>\n  <T extends { [key: string]: any }>(value: T) => {\n    const keys = Object.keys(schema);\n    return keys.reduce((prev, key) => {\n      const valueToEncode = schema[key];\n\n      if (Array.isArray(valueToEncode)) {\n        const encoder = encoders[valueToEncode[0]];\n        const values = value[key];\n\n        if (!Array.isArray(values)) {\n          throw new OperationEncodingError(`Expected value to be Array ${JSON.stringify(values)}`);\n        }\n\n        return prev + values.reduce((prevBytes, current) => prevBytes + encoder(current), '');\n      } else {\n        const encoder = encoders[valueToEncode];\n        return prev + encoder(value[key]);\n      }\n    }, '');\n  };\n\nexport const schemaDecoder =\n  (decoders: { [key: string]: Decoder }) =>\n  (schema: { [key: string]: string | string[] }) =>\n  (value: Uint8ArrayConsumer) => {\n    const keys = Object.keys(schema);\n    return keys.reduce((prev, key) => {\n      const valueToEncode = schema[key];\n\n      if (Array.isArray(valueToEncode)) {\n        const decoder = decoders[valueToEncode[0]];\n\n        const decoded = [];\n        const lastLength = value.length();\n        while (value.length() > 0) {\n          decoded.push(decoder(value));\n\n          if (lastLength === value.length()) {\n            throw new OperationDecodingError('Unable to decode value');\n          }\n        }\n\n        return {\n          ...prev,\n          [key]: decoded,\n        };\n      } else {\n        const decoder = decoders[valueToEncode];\n\n        const result = decoder(value);\n\n        if (typeof result !== 'undefined') {\n          return {\n            ...prev,\n            [key]: result,\n          };\n        } else {\n          return {\n            ...prev,\n          };\n        }\n      }\n    }, {});\n  };\n","import {\n  addressDecoder,\n  ballotDecoder,\n  branchDecoder,\n  delegateDecoder,\n  int32Decoder,\n  parametersDecoder,\n  pkhDecoder,\n  proposalDecoder,\n  proposalsDecoder,\n  publicKeyDecoder,\n  tz1Decoder,\n  valueParameterDecoder,\n  zarithDecoder,\n} from './codec';\nimport { CODEC } from './constants';\nimport { scriptDecoder } from './michelson/codec';\nimport {\n  ActivationSchema,\n  BallotSchema,\n  DelegationSchema,\n  EndorsementSchema,\n  ManagerOperationSchema,\n  operationDecoder,\n  OriginationSchema,\n  ProposalsSchema,\n  RegisterGlobalConstantSchema,\n  RevealSchema,\n  schemaDecoder,\n  SeedNonceRevelationSchema,\n  TransactionSchema,\n} from './schema/operation';\nimport { Uint8ArrayConsumer } from './uint8array-consumer';\nimport { toHexString } from './utils';\n\nexport type Decoder = (val: Uint8ArrayConsumer) => string | number | object | undefined;\n\nexport const decoders: { [key: string]: Decoder } = {\n  [CODEC.SECRET]: (val) => toHexString(val.consume(20)),\n  [CODEC.RAW]: (val) => toHexString(val.consume(32)),\n  [CODEC.TZ1]: tz1Decoder,\n  [CODEC.BRANCH]: branchDecoder,\n  [CODEC.ZARITH]: zarithDecoder,\n  [CODEC.PUBLIC_KEY]: publicKeyDecoder,\n  [CODEC.PKH]: pkhDecoder,\n  [CODEC.DELEGATE]: delegateDecoder,\n  [CODEC.INT32]: int32Decoder,\n  [CODEC.SCRIPT]: scriptDecoder,\n  [CODEC.BALLOT_STATEMENT]: ballotDecoder,\n  [CODEC.PROPOSAL]: proposalDecoder,\n  [CODEC.PROPOSAL_ARR]: proposalsDecoder,\n  [CODEC.PARAMETERS]: parametersDecoder,\n  [CODEC.ADDRESS]: addressDecoder,\n  [CODEC.VALUE]: valueParameterDecoder,\n};\n\ndecoders[CODEC.OPERATION] = operationDecoder(decoders);\ndecoders[CODEC.OP_ACTIVATE_ACCOUNT] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decoders)(ActivationSchema)(val);\ndecoders[CODEC.OP_DELEGATION] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decoders)(DelegationSchema)(val);\ndecoders[CODEC.OP_TRANSACTION] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decoders)(TransactionSchema)(val);\ndecoders[CODEC.OP_ORIGINATION] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decoders)(OriginationSchema)(val);\ndecoders[CODEC.OP_BALLOT] = (val: Uint8ArrayConsumer) => schemaDecoder(decoders)(BallotSchema)(val);\ndecoders[CODEC.OP_ENDORSEMENT] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decoders)(EndorsementSchema)(val);\ndecoders[CODEC.OP_SEED_NONCE_REVELATION] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decoders)(SeedNonceRevelationSchema)(val);\ndecoders[CODEC.OP_PROPOSALS] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decoders)(ProposalsSchema)(val);\ndecoders[CODEC.OP_REVEAL] = (val: Uint8ArrayConsumer) => schemaDecoder(decoders)(RevealSchema)(val);\ndecoders[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decoders)(RegisterGlobalConstantSchema)(val);\ndecoders[CODEC.MANAGER] = schemaDecoder(decoders)(ManagerOperationSchema);\n","import {\n  addressEncoder,\n  ballotEncoder,\n  branchEncoder,\n  delegateEncoder,\n  int32Encoder,\n  parametersEncoder,\n  pkhEncoder,\n  proposalEncoder,\n  proposalsEncoder,\n  publicKeyEncoder,\n  tz1Encoder,\n  valueParameterEncoder,\n  zarithEncoder,\n} from './codec';\nimport { CODEC } from './constants';\nimport { scriptEncoder } from './michelson/codec';\nimport {\n  ActivationSchema,\n  BallotSchema,\n  DelegationSchema,\n  EndorsementSchema,\n  ManagerOperationSchema,\n  operationEncoder,\n  OriginationSchema,\n  ProposalsSchema,\n  RegisterGlobalConstantSchema,\n  RevealSchema,\n  schemaEncoder,\n  SeedNonceRevelationSchema,\n  TransactionSchema,\n} from './schema/operation';\n\nexport type Encoder<T> = (val: T) => string;\n\nexport const encoders: { [key: string]: Encoder<any> } = {\n  [CODEC.SECRET]: (val: string) => val,\n  [CODEC.RAW]: (val: string) => val,\n  [CODEC.TZ1]: tz1Encoder,\n  [CODEC.BRANCH]: branchEncoder,\n  [CODEC.ZARITH]: zarithEncoder,\n  [CODEC.PUBLIC_KEY]: publicKeyEncoder,\n  [CODEC.PKH]: pkhEncoder,\n  [CODEC.DELEGATE]: delegateEncoder,\n  [CODEC.SCRIPT]: scriptEncoder,\n  [CODEC.BALLOT_STATEMENT]: ballotEncoder,\n  [CODEC.PROPOSAL]: proposalEncoder,\n  [CODEC.PROPOSAL_ARR]: proposalsEncoder,\n  [CODEC.INT32]: int32Encoder,\n  [CODEC.PARAMETERS]: parametersEncoder,\n  [CODEC.ADDRESS]: addressEncoder,\n  [CODEC.VALUE]: valueParameterEncoder\n};\n\nencoders[CODEC.OPERATION] = operationEncoder(encoders);\nencoders[CODEC.OP_ACTIVATE_ACCOUNT] = (val: any) => schemaEncoder(encoders)(ActivationSchema)(val);\nencoders[CODEC.OP_DELEGATION] = (val: any) => schemaEncoder(encoders)(DelegationSchema)(val);\nencoders[CODEC.OP_TRANSACTION] = (val: any) => schemaEncoder(encoders)(TransactionSchema)(val);\nencoders[CODEC.OP_ORIGINATION] = (val: any) => schemaEncoder(encoders)(OriginationSchema)(val);\nencoders[CODEC.OP_BALLOT] = (val: any) => schemaEncoder(encoders)(BallotSchema)(val);\nencoders[CODEC.OP_ENDORSEMENT] = (val: any) => schemaEncoder(encoders)(EndorsementSchema)(val);\nencoders[CODEC.OP_SEED_NONCE_REVELATION] = (val: any) =>\n  schemaEncoder(encoders)(SeedNonceRevelationSchema)(val);\nencoders[CODEC.OP_PROPOSALS] = (val: any) => schemaEncoder(encoders)(ProposalsSchema)(val);\nencoders[CODEC.OP_REVEAL] = (val: any) => schemaEncoder(encoders)(RevealSchema)(val);\nencoders[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val: any) => schemaEncoder(encoders)(RegisterGlobalConstantSchema)(val);\nencoders[CODEC.MANAGER] = schemaEncoder(encoders)(ManagerOperationSchema);\n","import { Prefix } from '@taquito/utils';\nimport { prefixDecoder, prefixEncoder } from '../codec';\n\nexport const blockPayloadHashEncoder = prefixEncoder(Prefix.VH);\nexport const blockPayloadHashDecoder = prefixDecoder(Prefix.VH);\n","import { kindMapping } from '../constants';\nimport { pad } from '../utils';\n\nconst { [0x00]: _ommited, ...kindMappingNoEndorsement } = kindMapping;\n\nexport const kindMappingProto12: { [key: number]: string } = {\n  ...kindMappingNoEndorsement,\n  0x15: 'endorsement',\n};\n\nexport const kindMappingReverseProto12 = (() => {\n  const result: { [key: string]: string } = {};\n  Object.keys(kindMappingProto12).forEach((key: number | string) => {\n    const keyNum = typeof key === 'string' ? parseInt(key, 10) : key;\n    result[kindMappingProto12[keyNum]] = pad(keyNum, 2);\n  });\n  return result;\n})();\n","import { Decoder } from '../decoder';\nimport { Uint8ArrayConsumer } from '../uint8array-consumer';\nimport { kindMappingProto12, kindMappingReverseProto12 } from './constants';\nimport { InvalidOperationKindError } from '@taquito/utils';\nimport { OperationDecodingError, UnsupportedOperationError } from '../error';\n\nexport const EndorsementSchemaProto12 = {\n  slot: 'int16',\n  level: 'int32',\n  round: 'int32',\n  block_payload_hash: 'blockPayloadHash',\n};\n\nexport const operationEncoderProto12 =\n  (encoders: { [key: string]: (val: object) => string }) => (operation: { kind: string }) => {\n    if (!(operation.kind in encoders) || !(operation.kind in kindMappingReverseProto12)) {\n      throw new InvalidOperationKindError(operation.kind);\n    }\n\n    return kindMappingReverseProto12[operation.kind] + encoders[operation.kind](operation);\n  };\n\nexport const operationDecoderProto12 =\n  (decoders: { [key: string]: Decoder }) => (value: Uint8ArrayConsumer) => {\n    const op = value.consume(1);\n\n    const operationName = kindMappingProto12[op[0]];\n    if (operationName === undefined) {\n      throw new UnsupportedOperationError(op[0].toString());\n    }\n    const decodedObj = decoders[operationName](value);\n\n    if (typeof decodedObj !== 'object') {\n      throw new OperationDecodingError('Decoded invalid operation');\n    }\n\n    return {\n      kind: operationName,\n      ...decodedObj,\n    };\n  };\n","import { int16Decoder } from '../codec';\nimport { CODEC } from '../constants';\nimport { Decoder, decoders } from '../decoder';\nimport {\n  schemaDecoder,\n  ActivationSchema,\n  DelegationSchema,\n  TransactionSchema,\n  OriginationSchema,\n  BallotSchema,\n  SeedNonceRevelationSchema,\n  ProposalsSchema,\n  RevealSchema,\n  RegisterGlobalConstantSchema,\n  ManagerOperationSchema,\n} from '../schema/operation';\nimport { Uint8ArrayConsumer } from '../uint8array-consumer';\nimport { blockPayloadHashDecoder } from './codec';\nimport { EndorsementSchemaProto12, operationDecoderProto12 } from './schema';\n\nexport const decodersProto12: { [key: string]: Decoder } = {\n  ...decoders,\n  [CODEC.INT16]: int16Decoder,\n  [CODEC.BLOCK_PAYLOAD_HASH]: blockPayloadHashDecoder,\n};\n\ndecodersProto12[CODEC.OPERATION] = operationDecoderProto12(decodersProto12);\ndecodersProto12[CODEC.OP_ACTIVATE_ACCOUNT] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto12)(ActivationSchema)(val);\ndecodersProto12[CODEC.OP_DELEGATION] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto12)(DelegationSchema)(val);\ndecodersProto12[CODEC.OP_TRANSACTION] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto12)(TransactionSchema)(val);\ndecodersProto12[CODEC.OP_ORIGINATION] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto12)(OriginationSchema)(val);\ndecodersProto12[CODEC.OP_BALLOT] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto12)(BallotSchema)(val);\ndecodersProto12[CODEC.OP_ENDORSEMENT] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto12)(EndorsementSchemaProto12)(val);\ndecodersProto12[CODEC.OP_SEED_NONCE_REVELATION] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto12)(SeedNonceRevelationSchema)(val);\ndecodersProto12[CODEC.OP_PROPOSALS] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto12)(ProposalsSchema)(val);\ndecodersProto12[CODEC.OP_REVEAL] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto12)(RevealSchema)(val);\ndecodersProto12[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto12)(RegisterGlobalConstantSchema)(val);\ndecodersProto12[CODEC.MANAGER] = schemaDecoder(decodersProto12)(ManagerOperationSchema);\n","import { int16Encoder } from '../codec';\nimport { CODEC } from '../constants';\nimport { Encoder, encoders } from '../encoder';\nimport {\n  schemaEncoder,\n  ActivationSchema,\n  DelegationSchema,\n  TransactionSchema,\n  OriginationSchema,\n  BallotSchema,\n  SeedNonceRevelationSchema,\n  ProposalsSchema,\n  RevealSchema,\n  RegisterGlobalConstantSchema,\n  ManagerOperationSchema,\n} from '../schema/operation';\nimport { blockPayloadHashEncoder } from './codec';\nimport { EndorsementSchemaProto12, operationEncoderProto12 } from './schema';\n\nexport const encodersProto12: { [key: string]: Encoder<any> } = {\n  ...encoders,\n  [CODEC.INT16]: int16Encoder,\n  [CODEC.BLOCK_PAYLOAD_HASH]: blockPayloadHashEncoder,\n};\n\nencodersProto12[CODEC.OPERATION] = operationEncoderProto12(encodersProto12);\nencodersProto12[CODEC.OP_ACTIVATE_ACCOUNT] = (val: any) =>\n  schemaEncoder(encodersProto12)(ActivationSchema)(val);\nencodersProto12[CODEC.OP_DELEGATION] = (val: any) =>\n  schemaEncoder(encodersProto12)(DelegationSchema)(val);\nencodersProto12[CODEC.OP_TRANSACTION] = (val: any) =>\n  schemaEncoder(encodersProto12)(TransactionSchema)(val);\nencodersProto12[CODEC.OP_ORIGINATION] = (val: any) =>\n  schemaEncoder(encodersProto12)(OriginationSchema)(val);\nencodersProto12[CODEC.OP_BALLOT] = (val: any) => schemaEncoder(encodersProto12)(BallotSchema)(val);\nencodersProto12[CODEC.OP_ENDORSEMENT] = (val: any) =>\n  schemaEncoder(encodersProto12)(EndorsementSchemaProto12)(val);\nencodersProto12[CODEC.OP_SEED_NONCE_REVELATION] = (val: any) =>\n  schemaEncoder(encodersProto12)(SeedNonceRevelationSchema)(val);\nencodersProto12[CODEC.OP_PROPOSALS] = (val: any) =>\n  schemaEncoder(encodersProto12)(ProposalsSchema)(val);\nencodersProto12[CODEC.OP_REVEAL] = (val: any) => schemaEncoder(encodersProto12)(RevealSchema)(val);\nencodersProto12[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val: any) =>\n  schemaEncoder(encodersProto12)(RegisterGlobalConstantSchema)(val);\nencodersProto12[CODEC.MANAGER] = schemaEncoder(encodersProto12)(ManagerOperationSchema);\n","import { OpKind } from '@taquito/rpc';\nimport { OperationContents } from '@taquito/rpc';\nimport {\n  ActivationSchema,\n  DelegationSchema,\n  TransactionSchema,\n  OriginationSchema,\n  BallotSchema,\n  SeedNonceRevelationSchema,\n  ProposalsSchema,\n  RevealSchema,\n  RegisterGlobalConstantSchema,\n  EndorsementSchema,\n} from './schema/operation';\n\ntype OperationKind =\n  | 'activate_account'\n  | 'reveal'\n  | 'delegation'\n  | 'transaction'\n  | 'origination'\n  | 'ballot'\n  | 'endorsement'\n  | 'seed_nonce_revelation'\n  | 'proposals'\n  | 'register_global_constant';\n\nconst OperationKindMapping = {\n  activate_account: ActivationSchema,\n  reveal: RevealSchema,\n  delegation: DelegationSchema,\n  transaction: TransactionSchema,\n  origination: OriginationSchema,\n  ballot: BallotSchema,\n  endorsement: EndorsementSchema,\n  seed_nonce_revelation: SeedNonceRevelationSchema,\n  proposals: ProposalsSchema,\n  register_global_constant: RegisterGlobalConstantSchema,\n};\n\n// Asymmetric difference: only account for things in arr2 that are not present in arr1, not vice versa\nconst getArrayDifference = (arr1: string[], arr2: string[]) => {\n  return arr2.filter((x) => !arr1.includes(x));\n};\n\nconst deleteArrayElementByValue = (array: string[], item: string) => {\n  return array.filter((e) => e !== item);\n};\n\n/**\n * @returns A boolean value to indicate whether the operation kind is valid or not\n */\nexport const validateOperationKind = (opKind: OpKind) => {\n  const opKindList = Object.keys(OperationKindMapping);\n  return opKindList.includes(opKind);\n};\n\n/**\n *  returns 0 when the two array of properties are identical or the passed property\n *  does not have any missing parameters from the corresponding schema\n *\n *  @returns array element differences if there are missing required property keys\n */\nexport const validateMissingProperty = (operationContent: OperationContents) => {\n  const kind = operationContent.kind as OperationKind;\n\n  const keys = Object.keys(operationContent);\n  const cleanKeys = deleteArrayElementByValue(keys, 'kind');\n\n  const schemaKeys = Object.keys(OperationKindMapping[kind]);\n\n  return getArrayDifference(cleanKeys, schemaKeys);\n};\n","export enum ProtocolsHash {\n  Pt24m4xi = 'Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd',\n  PsBABY5H = 'PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU',\n  PsBabyM1 = 'PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS',\n  PsCARTHA = 'PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb',\n  PsDELPH1 = 'PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo',\n  PtEdo2Zk = 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA',\n  PsFLorena = 'PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i',\n  PtGRANADs = 'PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV',\n  PtHangz2 = 'PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx',\n  Psithaca2 = 'Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A',\n  PtJakart2 = 'PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY',\n  ProtoALpha = 'ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK',\n}\n\nconst protoLevel: Record<ProtocolsHash, number> = {\n  Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd: 4,\n  PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU: 5,\n  PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS: 5,\n  PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb: 6,\n  PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo: 7,\n  PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA: 8,\n  PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i: 9,\n  PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV: 10,\n  PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx: 11,\n  Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A: 12,\n  PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY: 13,\n  ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK: 14,\n};\n\nexport function ProtoInferiorTo(a: ProtocolsHash, b: ProtocolsHash): boolean {\n  return protoLevel[a] < protoLevel[b];\n}\n","import { opMapping as opMappingGeneral } from './../constants';\n\nexport const opMappingProto13: { [key: string]: string } = {\n  ...opMappingGeneral,\n  '84': 'sapling_transaction_deprecated',\n  '94': 'tx_rollup_l2_address',\n  '95': 'MIN_BLOCK_TIME',\n  '96': 'sapling_transaction',\n};\n\nexport const opMappingReverseProto13 = (() => {\n  const result: { [key: string]: string } = {};\n  Object.keys(opMappingProto13).forEach((key: string) => {\n    result[opMappingProto13[key]] = key;\n  });\n  return result;\n})();\n","import { Decoder } from '../../decoder';\nimport { pad } from '../../utils';\nimport { Encoder } from '../../encoder';\nimport {\n  bytesDecoder,\n  bytesEncoder,\n  decodeAnnots,\n  encodeAnnots,\n  extractRequiredLen,\n  intDecoder,\n  intEncoder,\n  isBytes,\n  isInt,\n  isPrim,\n  isString,\n  MichelsonValue,\n  PrimValue,\n  stringDecoder,\n  stringEncoder,\n} from '../../michelson/codec';\nimport { Uint8ArrayConsumer } from '../../uint8array-consumer';\nimport { opMappingProto13, opMappingReverseProto13 } from '../constants-proto13';\nimport { UnexpectedMichelsonValueError } from '../../error';\n\nexport const scriptEncoderProto13: Encoder<{ code: MichelsonValue; storage: MichelsonValue }> = (\n  script\n) => {\n  const code = valueEncoderProto13(script.code);\n  const storage = valueEncoderProto13(script.storage);\n  return `${pad(code.length / 2, 8)}${code}${pad(storage.length / 2, 8)}${storage}`;\n};\n\nexport const scriptDecoderProto13: Decoder = (value: Uint8ArrayConsumer) => {\n  const code = extractRequiredLen(value);\n  const storage = extractRequiredLen(value);\n\n  return {\n    code: valueDecoderProto13(new Uint8ArrayConsumer(code)),\n    storage: valueDecoderProto13(new Uint8ArrayConsumer(storage)),\n  };\n};\n\nexport const valueEncoderProto13: Encoder<MichelsonValue> = (value: MichelsonValue) => {\n  if (Array.isArray(value)) {\n    const encoded = value.map((x) => valueEncoderProto13(x)).join('');\n    const len = encoded.length / 2;\n    return `02${pad(len)}${encoded}`;\n  } else if (isPrim(value)) {\n    return primEncoderProto13(value);\n  } else if (isBytes(value)) {\n    return bytesEncoder(value);\n  } else if (isString(value)) {\n    return stringEncoder(value);\n  } else if (isInt(value)) {\n    return intEncoder(value);\n  }\n\n  throw new UnexpectedMichelsonValueError('Unexpected value');\n};\n\nexport const valueDecoderProto13: Decoder = (value: Uint8ArrayConsumer) => {\n  const preamble = value.consume(1);\n  switch (preamble[0]) {\n    case 0x0a:\n      return bytesDecoder(value);\n    case 0x01:\n      return stringDecoder(value);\n    case 0x00:\n      return intDecoder(value);\n    case 0x02: {\n      const val = new Uint8ArrayConsumer(extractRequiredLen(value));\n      const results = [];\n      while (val.length() > 0) {\n        results.push(valueDecoderProto13(val));\n      }\n      return results;\n    }\n    default:\n      return primDecoderProto13(value, preamble);\n  }\n};\n\nexport const primEncoderProto13: Encoder<PrimValue> = (value) => {\n  const hasAnnot = +Array.isArray(value.annots);\n  const argsCount = Array.isArray(value.args) ? value.args.length : 0;\n\n  // Specify the number of args max is 3 without annotation\n  const preamble = pad(Math.min(2 * argsCount + hasAnnot + 0x03, 9), 2);\n\n  const op = opMappingReverseProto13[value.prim];\n\n  let encodedArgs = (value.args || []).map((arg) => valueEncoderProto13(arg)).join('');\n  const encodedAnnots = Array.isArray(value.annots) ? encodeAnnots(value.annots) : '';\n\n  if (value.prim === 'LAMBDA' && argsCount) {\n    encodedArgs = pad(encodedArgs.length / 2) + encodedArgs + pad(0);\n  }\n\n  if ((value.prim === 'pair' || value.prim === 'Pair') && argsCount > 2) {\n    encodedArgs =\n      encodedAnnots === ''\n        ? pad(encodedArgs.length / 2) + encodedArgs + pad(0)\n        : pad(encodedArgs.length / 2) + encodedArgs;\n  }\n\n  if (value.prim === 'view' && value.args) {\n    encodedArgs = pad(encodedArgs.length / 2) + encodedArgs + pad(0);\n  }\n\n  return `${preamble}${op}${encodedArgs}${encodedAnnots}`;\n};\n\nexport const primDecoderProto13 = (value: Uint8ArrayConsumer, preamble: Uint8Array) => {\n  const hasAnnot = (preamble[0] - 0x03) % 2 === 1;\n  let argsCount = Math.floor((preamble[0] - 0x03) / 2);\n  const op = value.consume(1)[0].toString(16).padStart(2, '0');\n\n  const result: Partial<PrimValue> = {\n    prim: opMappingProto13[op],\n  };\n\n  if (opMappingProto13[op] === 'LAMBDA') {\n    value.consume(4);\n  }\n\n  if (opMappingProto13[op] === 'view') {\n    if (argsCount != 0) {\n      return primViewDecoderProto13(value, result) as any;\n    } else {\n      return result;\n    }\n  }\n\n  let combPairArgs;\n  let combPairAnnots;\n  if ((opMappingProto13[op] === 'pair' || opMappingProto13[op] === 'Pair') && argsCount > 2) {\n    combPairArgs = decodeCombPair(value);\n    argsCount = 0;\n    combPairAnnots = decodeAnnots(value);\n  }\n\n  const args = new Array(argsCount).fill(0).map(() => valueDecoderProto13(value));\n\n  if (opMappingProto13[op] === 'LAMBDA') {\n    value.consume(4);\n  }\n\n  if (combPairArgs) {\n    result['args'] = combPairArgs as any;\n  } else if (args.length) {\n    result['args'] = args as any;\n  }\n\n  if (combPairAnnots && (combPairAnnots as any)[0] !== '') {\n    result['annots'] = combPairAnnots as any;\n  } else if (hasAnnot) {\n    result['annots'] = decodeAnnots(value) as any;\n  }\n\n  return result;\n};\n\nexport const primViewDecoderProto13 = (value: Uint8ArrayConsumer, result: Partial<PrimValue>) => {\n  value.consume(4);\n  result['args'] = new Array(4).fill(0).map(() => valueDecoderProto13(value)) as any;\n  value.consume(4);\n  return result;\n};\n\nexport const decodeCombPair: Decoder = (val: Uint8ArrayConsumer) => {\n  const array = new Uint8ArrayConsumer(extractRequiredLen(val));\n  const args = [];\n  while (array.length() > 0) {\n    args.push(valueDecoderProto13(array));\n  }\n  return args;\n};\n","import { entrypointDecoder } from '../codec';\nimport { entrypointMappingReverse, ENTRYPOINT_MAX_LENGTH } from '../constants';\nimport { OversizedEntryPointError } from '../error';\nimport { extractRequiredLen, MichelsonValue } from '../michelson/codec';\nimport { Uint8ArrayConsumer } from '../uint8array-consumer';\nimport { pad } from '../utils';\nimport { valueDecoderProto13, valueEncoderProto13 } from './michelson-proto13/codec-proto13';\n\nexport const parametersDecoderProto13 = (val: Uint8ArrayConsumer) => {\n  const preamble = val.consume(1);\n  if (preamble[0] === 0x00) {\n    return;\n  } else {\n    const encodedEntrypoint = entrypointDecoder(val);\n    const params = extractRequiredLen(val);\n    const parameters = valueDecoderProto13(new Uint8ArrayConsumer(params));\n    return {\n      entrypoint: encodedEntrypoint,\n      value: parameters,\n    };\n  }\n};\n\nexport const valueParameterDecoderProto13 = (val: Uint8ArrayConsumer) => {\n  const value = extractRequiredLen(val);\n  return valueDecoderProto13(new Uint8ArrayConsumer(value));\n};\n\nexport const entrypointEncoderProto13 = (entrypoint: string) => {\n  if (entrypoint in entrypointMappingReverse) {\n    return `${entrypointMappingReverse[entrypoint]}`;\n  } else {\n    if (entrypoint.length > ENTRYPOINT_MAX_LENGTH) {\n      throw new OversizedEntryPointError(entrypoint);\n    }\n\n    const value = { string: entrypoint };\n    return `ff${valueEncoderProto13(value).slice(8)}`;\n  }\n};\n\nexport const parametersEncoderProto13 = (val: { entrypoint: string; value: MichelsonValue }) => {\n  if (!val || (val.entrypoint === 'default' && 'prim' in val.value && val.value.prim === 'Unit')) {\n    return '00';\n  }\n\n  const encodedEntrypoint = entrypointEncoderProto13(val.entrypoint);\n  const parameters = valueEncoderProto13(val.value);\n  const length = (parameters.length / 2).toString(16).padStart(8, '0');\n  return `ff${encodedEntrypoint}${length}${parameters}`;\n};\n\nexport const valueParameterEncoderProto13 = (value: MichelsonValue) => {\n  const valueEncoded = valueEncoderProto13(value);\n  return `${pad(valueEncoded.length / 2)}${valueEncoded}`;\n};\n","import { CODEC } from '../constants';\nimport { Encoder } from '../encoder';\nimport { encodersProto12 } from '../proto12-ithaca/encoder';\nimport { EndorsementSchemaProto12, operationEncoderProto12 } from '../proto12-ithaca/schema';\nimport {\n  ActivationSchema,\n  BallotSchema,\n  DelegationSchema,\n  ManagerOperationSchema,\n  OriginationSchema,\n  ProposalsSchema,\n  RegisterGlobalConstantSchema,\n  RevealSchema,\n  schemaEncoder,\n  SeedNonceRevelationSchema,\n  TransactionSchema,\n} from '../schema/operation';\nimport { parametersEncoderProto13, valueParameterEncoderProto13 } from './codec-proto13';\nimport { scriptEncoderProto13 } from './michelson-proto13/codec-proto13';\n\nexport const encodersProto13: { [key: string]: Encoder<any> } = {\n  ...encodersProto12,\n  [CODEC.SCRIPT]: scriptEncoderProto13,\n  [CODEC.PARAMETERS]: parametersEncoderProto13,\n  [CODEC.VALUE]: valueParameterEncoderProto13,\n};\n\nencodersProto13[CODEC.OPERATION] = operationEncoderProto12(encodersProto13);\nencodersProto13[CODEC.OP_ACTIVATE_ACCOUNT] = (val: any) =>\n  schemaEncoder(encodersProto13)(ActivationSchema)(val);\nencodersProto13[CODEC.OP_DELEGATION] = (val: any) =>\n  schemaEncoder(encodersProto13)(DelegationSchema)(val);\nencodersProto13[CODEC.OP_TRANSACTION] = (val: any) =>\n  schemaEncoder(encodersProto13)(TransactionSchema)(val);\nencodersProto13[CODEC.OP_ORIGINATION] = (val: any) =>\n  schemaEncoder(encodersProto13)(OriginationSchema)(val);\nencodersProto13[CODEC.OP_BALLOT] = (val: any) => schemaEncoder(encodersProto13)(BallotSchema)(val);\nencodersProto13[CODEC.OP_ENDORSEMENT] = (val: any) =>\n  schemaEncoder(encodersProto13)(EndorsementSchemaProto12)(val);\nencodersProto13[CODEC.OP_SEED_NONCE_REVELATION] = (val: any) =>\n  schemaEncoder(encodersProto13)(SeedNonceRevelationSchema)(val);\nencodersProto13[CODEC.OP_PROPOSALS] = (val: any) =>\n  schemaEncoder(encodersProto13)(ProposalsSchema)(val);\nencodersProto13[CODEC.OP_REVEAL] = (val: any) => schemaEncoder(encodersProto13)(RevealSchema)(val);\nencodersProto13[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val: any) =>\n  schemaEncoder(encodersProto13)(RegisterGlobalConstantSchema)(val);\nencodersProto13[CODEC.MANAGER] = schemaEncoder(encodersProto13)(ManagerOperationSchema);\n","import { decodersProto12 } from '../proto12-ithaca/decoder';\nimport { Decoder } from '../decoder';\nimport { CODEC } from '../constants';\nimport { EndorsementSchemaProto12, operationDecoderProto12 } from '../proto12-ithaca/schema';\nimport { Uint8ArrayConsumer } from '../uint8array-consumer';\nimport { parametersDecoderProto13, valueParameterDecoderProto13 } from './codec-proto13';\nimport {\n  ActivationSchema,\n  BallotSchema,\n  DelegationSchema,\n  ManagerOperationSchema,\n  OriginationSchema,\n  ProposalsSchema,\n  RegisterGlobalConstantSchema,\n  RevealSchema,\n  schemaDecoder,\n  SeedNonceRevelationSchema,\n  TransactionSchema,\n} from '../schema/operation';\nimport { scriptDecoderProto13 } from './michelson-proto13/codec-proto13';\n\nexport const decodersProto13: { [key: string]: Decoder } = {\n  ...decodersProto12,\n  [CODEC.SCRIPT]: scriptDecoderProto13,\n  [CODEC.PARAMETERS]: parametersDecoderProto13,\n  [CODEC.VALUE]: valueParameterDecoderProto13,\n};\n\ndecodersProto13[CODEC.OPERATION] = operationDecoderProto12(decodersProto13);\ndecodersProto13[CODEC.OP_ACTIVATE_ACCOUNT] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto13)(ActivationSchema)(val);\ndecodersProto13[CODEC.OP_DELEGATION] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto13)(DelegationSchema)(val);\ndecodersProto13[CODEC.OP_TRANSACTION] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto13)(TransactionSchema)(val);\ndecodersProto13[CODEC.OP_ORIGINATION] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto13)(OriginationSchema)(val);\ndecodersProto13[CODEC.OP_BALLOT] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto13)(BallotSchema)(val);\ndecodersProto13[CODEC.OP_ENDORSEMENT] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto13)(EndorsementSchemaProto12)(val);\ndecodersProto13[CODEC.OP_SEED_NONCE_REVELATION] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto13)(SeedNonceRevelationSchema)(val);\ndecodersProto13[CODEC.OP_PROPOSALS] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto13)(ProposalsSchema)(val);\ndecodersProto13[CODEC.OP_REVEAL] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto13)(RevealSchema)(val);\ndecodersProto13[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val: Uint8ArrayConsumer) =>\n  schemaDecoder(decodersProto13)(RegisterGlobalConstantSchema)(val);\ndecodersProto13[CODEC.MANAGER] = schemaDecoder(decodersProto13)(ManagerOperationSchema);\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"38da814ec2bb4e81c7ad5a45b6b183a4d0b8dc25\",\n    \"version\": \"12.1.1\"\n};\n","/**\n * @packageDocumentation\n * @module @taquito/local-forging\n */\n\nimport { ForgeParams, Forger } from './interface';\nimport { CODEC } from './constants';\nimport { decoders } from './decoder';\nimport { encoders } from './encoder';\nimport { Uint8ArrayConsumer } from './uint8array-consumer';\nimport { decodersProto12 } from './proto12-ithaca/decoder';\nimport { encodersProto12 } from './proto12-ithaca/encoder';\nimport { validateBlock, ValidationResult, InvalidOperationKindError } from '@taquito/utils';\nimport { InvalidBlockHashError, InvalidOperationSchemaError } from './error';\nimport { validateMissingProperty, validateOperationKind } from './validator';\nimport { ProtocolsHash, ProtoInferiorTo } from './protocols';\nimport { encodersProto13 } from './proto13-jakarta/encoder-proto13';\nimport { decodersProto13 } from './proto13-jakarta/decoder-proto13';\n\nexport { CODEC } from './constants';\nexport * from './decoder';\nexport * from './encoder';\nexport * from './uint8array-consumer';\nexport * from './interface';\nexport { VERSION } from './version';\nexport { ProtocolsHash } from './protocols';\n\nconst PROTOCOL_CURRENT = ProtocolsHash.Psithaca2;\n\nexport function getCodec(codec: CODEC, proto: ProtocolsHash) {\n  if (proto === ProtocolsHash.Psithaca2) {\n    return {\n      encoder: encodersProto12[codec],\n      decoder: (hex: string) => {\n        const consumer = Uint8ArrayConsumer.fromHexString(hex);\n        return decodersProto12[codec](consumer) as any;\n      },\n    };\n  } else if (ProtoInferiorTo(proto, ProtocolsHash.Psithaca2)) {\n    return {\n      encoder: encoders[codec],\n      decoder: (hex: string) => {\n        const consumer = Uint8ArrayConsumer.fromHexString(hex);\n        return decoders[codec](consumer) as any;\n      },\n    };\n  } else {\n    return {\n      encoder: encodersProto13[codec],\n      decoder: (hex: string) => {\n        const consumer = Uint8ArrayConsumer.fromHexString(hex);\n        return decodersProto13[codec](consumer) as any;\n      },\n    };\n  }\n}\n\nexport class LocalForger implements Forger {\n  constructor(public readonly protocolHash = PROTOCOL_CURRENT) {}\n\n  private codec = getCodec(CODEC.MANAGER, this.protocolHash);\n\n  forge(params: ForgeParams): Promise<string> {\n    if (validateBlock(params.branch) !== ValidationResult.VALID) {\n      throw new InvalidBlockHashError(`The block hash ${params.branch} is invalid`);\n    }\n\n    for (const content of params.contents) {\n      if (!validateOperationKind(content.kind)) {\n        throw new InvalidOperationKindError(content.kind);\n      }\n\n      const diff = validateMissingProperty(content);\n      if (diff.length === 1) {\n        if (content.kind === 'delegation' && diff[0] === 'delegate') {\n          continue;\n        } else if (content.kind === 'origination' && diff[0] === 'delegate') {\n          continue;\n        } else if (content.kind === 'transaction' && diff[0] === 'parameters') {\n          continue;\n        } else {\n          throw new InvalidOperationSchemaError(\n            `Missing properties: ${diff.join(', ').toString()}`\n          );\n        }\n      } else if (diff.length > 1) {\n        throw new InvalidOperationSchemaError(`Missing properties: ${diff.join(', ').toString()}`);\n      }\n    }\n    const forged = this.codec.encoder(params).toLowerCase()\n    return Promise.resolve(forged);\n  }\n\n  parse(hex: string): Promise<ForgeParams> {\n    return Promise.resolve(this.codec.decoder(hex) as ForgeParams);\n  }\n}\n\nexport const localForger = new LocalForger();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}